
decl function &_gcc_half_exp(arg_f32 %ret)(arg_f32 %x);


function &_gcc_half_exp(arg_f32 %_gcc_half_exp)(arg_f32 %x)
{

@_gcc_half_exp_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mul_ftz_f32	$s0, $s0, 0F3fb8aa3b;
	nexp2_f32	$s0, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_half_exp];
	ret;
};


decl function &_gcc_erfc(arg_f32 %ret)(arg_f32 %x);


function &_gcc_erfc(arg_f32 %_gcc_erfc)(arg_f32 %x)
{

@_gcc_erfc_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	class_b1_f32	$c0, $s0, 3;
	cvt_u32_b1	$s1, $c0;
	and_b32	$s1, $s1, 1;
	mov_b32	$s2, $s0;
	and_b32	$s3, $s2, 2147479552;
	neg_f32	$s4, $s3;
	nfma_f32	$s5, $s4, $s3, 0Fbf100000;
	mov_b32	$s4, $s5;
	and_b32	$s4, $s4, 4294963200;
	sub_ftz_f32	$s6, $s5, $s4;
	mul_ftz_f32	$s7, $s6, 0F39a3b295;
	nfma_f32	$s6, $s6, 0F3fb8a000, $s7;
	nfma_f32	$s6, $s4, 0F39a3b295, $s6;
	nexp2_f32	$s6, $s6;
	mul_ftz_f32	$s4, $s4, 0F3fb8a000;
	nexp2_f32	$s4, $s4;
	mul_ftz_f32	$s4, $s6, $s4;
	cmp_lt_ftz_b1_f32	$c0, $s5, 0Fc2aeac50;
	cmov_b32	$s6, $c0, 0, $s4;
	and_b32	$s2, $s2, 2147483647;
	add_ftz_f32	$s7, $s2, 0Fbf800000;
	mul_ftz_f32	$s4, $s2, $s2;
	gcn_divrelaxednarrow_f32	$s8, 0F3f800000, $s4;
	cmp_lt_ftz_b1_f32	$c1, $s2, 0F3fa00000;
	cmov_b32	$s7, $c1, $s7, $s8;
	cmp_lt_ftz_b1_f32	$c0, $s2, 0F3f580000;
	cmov_b32	$s4, $c0, $s4, $s7;
	nfma_f32	$s7, $s4, 0Fbd777f97, 0F40d23f7c;
	nfma_f32	$s7, $s4, $s7, 0F42d9451f;
	nfma_f32	$s7, $s4, $s7, 0F43d6810b;
	nfma_f32	$s7, $s4, $s7, 0F442158c9;
	nfma_f32	$s7, $s4, $s7, 0F43d9486f;
	nfma_f32	$s8, $s4, 0Fc3f1c275, 0Fc480230b;
	nfma_f32	$s8, $s4, $s8, 0Fc41f6441;
	nfma_f32	$s8, $s4, $s8, 0Fc320a2ea;
	nfma_f32	$s8, $s4, $s8, 0Fc18e104b;
	nfma_f32	$s8, $s4, $s8, 0Fbf4c9dd4;
	nfma_f32	$s9, $s4, $s7, 0F4309a863;
	nfma_f32	$s7, $s4, 0Fc1b38712, 0F43ed43a7;
	nfma_f32	$s7, $s4, $s7, 0F451f90ce;
	nfma_f32	$s7, $s4, $s7, 0F4547fdbb;
	nfma_f32	$s7, $s4, $s7, 0F44c01759;
	nfma_f32	$s7, $s4, $s7, 0F43a2e571;
	nfma_f32	$s11, $s4, 0Fc11d077e, 0Fc2a2932b;
	nfma_f32	$s7, $s4, $s7, 0F41f2b459;
	nfma_f32	$s10, $s4, $s9, 0F419d35ce;
	nfma_f32	$s8, $s4, $s8, 0Fbc21a092;
	nfma_f32	$s9, $s4, $s11, 0Fc3389ae7;
	nfma_f32	$s9, $s4, $s9, 0Fc322658c;
	nfma_f32	$s9, $s4, $s9, 0Fc2798057;
	nfma_f32	$s9, $s4, $s9, 0Fc128f022;
	nfma_f32	$s9, $s4, $s9, 0Fbf31a0b7;
	nfma_f32	$s9, $s4, $s9, 0Fbc21a093;
	cmp_lt_ftz_b1_f32	$c2, $s2, 0F4036db6d;
	cmov_b32	$s9, $c2, $s9, $s8;
	cmov_b32	$s7, $c2, $s10, $s7;
	cmp_gt_ftz_b1_f32	$c2, $s5, 0F42b17218;
	cmov_b32	$s5, $c2, 2139095040, $s6;
	nfma_f32	$s6, $s4, 0Fbb0df9c0, 0F3d1151b3;
	nfma_f32	$s6, $s4, $s6, 0Fbde31cc2;
	nfma_f32	$s8, $s4, 0F3c445aa3, 0F3c5f6e13;
	nfma_f32	$s11, $s4, $s8, 0F3e013307;
	nfma_f32	$s12, $s4, $s6, 0F3ea2fe54;
	nfma_f32	$s6, $s4, 0Fb684e21a, 0F390aee49;
	nfma_f32	$s10, $s4, $s6, 0F3ba68116;
	add_ftz_f32	$s6, $s3, $s2;
	sub_ftz_f32	$s8, $s3, $s2;
	nfma_f32	$s3, $s4, $s12, 0Fbebe9208;
	nfma_f32	$s3, $s4, $s3, 0F3ed46805;
	nfma_f32	$s3, $s4, $s3, 0Fbb1acdc6;
	cmov_b32	$s3, $c1, $s3, $s9;
	nfma_f32	$s9, $s4, $s11, 0F3d931ae7;
	nfma_f32	$s9, $s4, $s9, 0F3f0a5785;
	nfma_f32	$s11, $s4, 0Fb7c756b1, 0Fbbbd1489;
	nfma_f32	$s11, $s4, $s11, 0Fbce9528f;
	nfma_f32	$s11, $s4, $s11, 0Fbea66beb;
	nfma_f32	$s11, $s4, $s11, 0F3e0375d4;
	cmov_b32	$s3, $c0, $s11, $s3;
	nfma_f32	$s9, $s4, $s9, 0F3dd9f331;
	cmov_b32	$s7, $c1, $s9, $s7;
	nfma_f32	$s9, $s4, $s10, 0F3d852a63;
	nfma_f32	$s9, $s4, $s9, 0F3ecbbbce;
	cmov_b32	$s7, $c0, $s9, $s7;
	nfma_f32	$s4, $s4, $s7, 0F3f800000;
	nrcp_f32	$s4, $s4;
	mul_ftz_f32	$s3, $s3, $s4;
	nfma_f32	$s4, $s8, $s6, $s3;
	mov_b32	$s6, $s4;
	and_b32	$s6, $s6, 4294963200;
	sub_ftz_f32	$s7, $s4, $s6;
	mul_ftz_f32	$s8, $s7, 0F39a3b295;
	nfma_f32	$s7, $s7, 0F3fb8a000, $s8;
	nfma_f32	$s7, $s6, 0F39a3b295, $s7;
	nexp2_f32	$s7, $s7;
	mul_ftz_f32	$s6, $s6, 0F3fb8a000;
	nexp2_f32	$s6, $s6;
	mul_ftz_f32	$s6, $s7, $s6;
	cmp_lt_ftz_b1_f32	$c2, $s4, 0Fc2aeac50;
	cmov_b32	$s6, $c2, 0, $s6;
	cmp_gt_ftz_b1_f32	$c2, $s4, 0F42b17218;
	cmov_b32	$s4, $c2, 2139095040, $s6;
	nrcp_f32	$s6, $s2;
	sub_ftz_f32	$s7, 0F3e1ea7d4, $s3;
	add_ftz_f32	$s8, $s3, 0F3f58560b;
	add_ftz_f32	$s8, $s8, 0F3f800000;
	cmp_lt_ftz_b1_f32	$c2, $s0, 0F00000000;
	cmov_b32	$s7, $c2, $s8, $s7;
	mul_ftz_f32	$s4, $s5, $s4;
	mul_ftz_f32	$s4, $s6, $s4;
	sub_ftz_f32	$s5, 0F40000000, $s4;
	cmov_b32	$s4, $c2, $s5, $s4;
	cmp_lt_ftz_b1_f32	$c2, $s2, 0F41e00000;
	cmov_b32	$s2, $c2, $s4, 0;
	cmov_b32	$s2, $c1, $s7, $s2;
	add_ftz_f32	$s4, $s0, 0Fbf000000;
	nfma_f32	$s3, $s0, $s3, $s4;
	sub_ftz_f32	$s3, 0F3f000000, $s3;
	cmov_b32	$s2, $c0, $s3, $s2;
	cmp_lt_ftz_b1_f32	$c0, $s0, 0Fc0c00000;
	cmov_b32	$s2, $c0, 1073741824, $s2;
	cvt_b1_u32	$c0, $s1;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_erfc];
	ret;
};


decl function &_gcc_atan2pi(arg_f32 %ret)(
	arg_f32 %y,
	arg_f32 %x);


function &_gcc_atan2pi(arg_f32 %_gcc_atan2pi)(
	arg_f32 %y,
	arg_f32 %x)
{

@_gcc_atan2pi_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%y];
	ld_arg_align(4)_f32	$s1, [%x];
	class_b1_f32	$c0, $s1, 3;
	cvt_u32_b1	$s2, $c0;
	class_b1_f32	$c0, $s0, 3;
	cvt_u32_b1	$s3, $c0;
	or_b32	$s2, $s3, $s2;
	abs_f32	$s3, $s0;
	abs_f32	$s4, $s1;
	gcn_max_f32	$s8, $s4, $s3;
	cmp_gt_ftz_b1_f32	$c0, $s8, 0F6f800000;
	cmov_b32	$s7, $c0, 796917760, 1065353216;
	cmp_eq_ftz_b1_f32	$c0, $s3, 0F7f800000;
	cmp_eq_ftz_b1_f32	$c1, $s4, 0F7f800000;
	and_b1	$c0, $c1, $c0;
	cmp_gt_ftz_b1_f32	$c1, $s1, 0F00000000;
	cmov_b32	$s5, $c1, 1048576000, 1061158912;
	mov_b32	$s6, $s1;
	cmp_lt_b1_s32	$c1, $s6, 0;
	cmov_b32	$s6, $c1, 1065353216, 0;
	mul_ftz_f32	$s8, $s8, $s7;
	nrcp_f32	$s8, $s8;
	gcn_min_f32	$s9, $s4, $s3;
	mul_ftz_f32	$s8, $s9, $s8;
	mul_ftz_f32	$s7, $s7, $s8;
	mul_ftz_f32	$s8, $s7, $s7;
	nfma_f32	$s9, $s8, 0Fbb3f0fbc, 0Fbe3e8dcc;
	nfma_f32	$s9, $s8, $s9, 0Fbeaaaa68;
	mul_ftz_f32	$s9, $s9, $s8;
	mul_ftz_f32	$s9, $s7, $s9;
	nfma_f32	$s10, $s8, 0F3e8d38a6, 0F3f943e2b;
	nfma_f32	$s8, $s8, $s10, 0F3f800000;
	nrcp_f32	$s8, $s8;
	nfma_f32	$s7, $s9, $s8, $s7;
	mul_ftz_f32	$s7, $s7, 0F3ea2f983;
	sub_ftz_f32	$s8, 0F3f000000, $s7;
	cmp_gt_ftz_b1_f32	$c1, $s3, $s4;
	cmov_b32	$s3, $c1, $s8, $s7;
	sub_ftz_f32	$s4, 0F3f800000, $s3;
	cmp_lt_ftz_b1_f32	$c1, $s1, 0F00000000;
	cmov_b32	$s1, $c1, $s4, $s3;
	cmp_eq_ftz_b1_f32	$c1, $s0, 0F00000000;
	cmov_b32	$s1, $c1, $s6, $s1;
	cmov_b32	$s1, $c0, $s5, $s1;
	and_b32	$s2, $s2, 1;
	cvt_b1_u32	$c0, $s2;
	cmov_b32	$s1, $c0, 2143289344, $s1;
	copysign_f32	$s0, $s1, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_atan2pi];
	ret;
};


decl function &_gcc_cos(arg_f32 %ret)(arg_f32 %x);


function &_gcc_cos(arg_f32 %_gcc_cos)(arg_f32 %x)
{

@_gcc_cos_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s1, $s0;
	and_b32	$s0, $s1, 2147483647;
	mov_b32	$s2, $s0;
	cmp_geu_ftz_b1_f32	$c0, $s2, 0F4b000000;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	nfma_f32	$s1, $s2, 0F3f22f983, 0F3f000000;
	trunc_ftz_f32	$s3, $s1;
	mul_ftz_f32	$s4, $s3, 0Fbfc90fda;
	fma_ftz_f32	$s4, $s3, 0F3fc90fda, $s4;
	mul_ftz_f32	$s6, $s3, 0F3fc90fda;
	sub_ftz_f32	$s5, $s2, $s6;
	sub_ftz_f32	$s2, $s2, $s5;
	sub_ftz_f32	$s2, $s2, $s6;
	sub_ftz_f32	$s2, $s2, $s4;
	add_ftz_f32	$s4, $s5, $s2;
	mul_ftz_f32	$s2, $s3, 0Fa7c234c4;
	mul_ftz_f32	$s6, $s3, 0F33a22168;
	sub_ftz_f32	$s5, $s4, $s6;
	fma_ftz_f32	$s2, $s3, 0F27c234c4, $s2;
	mul_ftz_f32	$s7, $s3, 0Fb3a22168;
	neg_f32	$s2, $s2;
	fma_ftz_f32	$s7, $s3, 0F33a22168, $s7;
	cvt_ftz_s32_f32	$s1, $s1;
	mul_ftz_f32	$s3, $s3, 0F27c234c4;
	sub_ftz_f32	$s4, $s4, $s5;
	sub_ftz_f32	$s4, $s4, $s6;
	sub_ftz_f32	$s4, $s4, $s7;
	add_ftz_f32	$s5, $s5, $s4;
	sub_ftz_f32	$s4, $s5, $s3;
	sub_ftz_f32	$s5, $s5, $s4;
	sub_ftz_f32	$s3, $s5, $s3;
	add_ftz_f32	$s3, $s4, $s3;
	br	@BB0_3;

@BB0_2:
	and_b32	$s1, $s1, 8388607;
	or_b32	$s3, $s1, 8388608;
	mulhi_u32	$s2, $s3, 4266746795;
	mad_u32	$s1, $s3, 1011060801, $s2;
	cmp_lt_b1_u32	$c0, $s1, $s2;
	cvt_u32_b1	$s2, $c0;
	mulhi_u32	$s4, $s3, 1011060801;
	add_u32	$s4, $s2, $s4;
	mad_u32	$s2, $s3, 3680671129, $s4;
	cmp_lt_b1_u32	$c0, $s2, $s4;
	cvt_u32_b1	$s4, $c0;
	mulhi_u32	$s5, $s3, 3680671129;
	add_u32	$s5, $s4, $s5;
	mad_u32	$s4, $s3, 4113882560, $s5;
	cmp_lt_b1_u32	$c0, $s4, $s5;
	cvt_u32_b1	$s5, $c0;
	mulhi_u32	$s6, $s3, 4113882560;
	add_u32	$s6, $s5, $s6;
	mad_u32	$s5, $s3, 4230436817, $s6;
	cmp_lt_b1_u32	$c0, $s5, $s6;
	cvt_u32_b1	$s6, $c0;
	mulhi_u32	$s7, $s3, 4230436817;
	add_u32	$s7, $s6, $s7;
	mad_u32	$s6, $s3, 1313084713, $s7;
	cmp_lt_b1_u32	$c0, $s6, $s7;
	cvt_u32_b1	$s7, $c0;
	mulhi_u32	$s8, $s3, 1313084713;
	add_u32	$s8, $s7, $s8;
	mad_u32	$s7, $s3, 2734261102, $s8;
	cmp_lt_b1_u32	$c0, $s7, $s8;
	cvt_u32_b1	$s10, $c0;
	mulhi_u32	$s11, $s3, 2734261102;
	mul_u32	$s9, $s3, 4266746795;
	shr_u32	$s3, $s0, 23;
	add_u32	$s8, $s3, 4294967176;
	cmp_gt_b1_u32	$c0, $s8, 31;
	cmov_b32	$s3, $c0, $s1, $s2;
	cmov_b32	$s9, $c0, $s9, $s1;
	cvt_u32_b1	$s12, $c0;
	cmov_b32	$s1, $c0, $s5, $s6;
	cmov_b32	$s5, $c0, $s4, $s5;
	cmov_b32	$s2, $c0, $s2, $s4;
	add_u32	$s4, $s10, $s11;
	cmov_b32	$s4, $c0, $s7, $s4;
	cmov_b32	$s7, $c0, $s6, $s7;
	neg_s32	$s6, $s12;
	and_b32	$s6, $s6, 32;
	sub_u32	$s8, $s8, $s6;
	cmp_gt_b1_u32	$c0, $s8, 31;
	cmov_b32	$s6, $c0, $s3, $s2;
	cmov_b32	$s9, $c0, $s9, $s3;
	cvt_u32_b1	$s10, $c0;
	cmov_b32	$s3, $c0, $s1, $s7;
	cmov_b32	$s1, $c0, $s5, $s1;
	cmov_b32	$s2, $c0, $s2, $s5;
	cmov_b32	$s7, $c0, $s7, $s4;
	neg_s32	$s4, $s10;
	and_b32	$s4, $s4, 32;
	sub_u32	$s4, $s8, $s4;
	cmp_gt_b1_u32	$c0, $s4, 31;
	cmov_b32	$s5, $c0, $s6, $s2;
	cmov_b32	$s6, $c0, $s9, $s6;
	cvt_u32_b1	$s10, $c0;
	cmov_b32	$s7, $c0, $s3, $s7;
	cmov_b32	$s8, $c0, $s1, $s3;
	cmov_b32	$s9, $c0, $s2, $s1;
	neg_s32	$s1, $s10;
	and_b32	$s1, $s1, 32;
	sub_u32	$s4, $s4, $s1;
	cmp_gt_b1_u32	$c0, $s4, 31;
	cmov_b32	$s1, $c0, $s5, $s9;
	cmov_b32	$s3, $c0, $s6, $s5;
	cvt_u32_b1	$s5, $c0;
	cmov_b32	$s2, $c0, $s8, $s7;
	cmov_b32	$s6, $c0, $s9, $s8;
	neg_s32	$s5, $s5;
	and_b32	$s5, $s5, 32;
	sub_u32	$s7, $s5, $s4;
	shr_u32	$s8, $s3, $s7;
	shr_u32	$s10, $s1, $s7;
	neg_s32	$s9, $s7;
	shl_u32	$s11, $s6, $s9;
	or_b32	$s10, $s11, $s10;
	shl_u32	$s11, $s1, $s9;
	cmp_ne_b1_s32	$c0, $s4, $s5;
	cmov_b32	$s5, $c0, $s10, $s6;
	or_b32	$s4, $s11, $s8;
	shl_u32	$s8, $s2, $s9;
	shr_u32	$s6, $s6, $s7;
	or_b32	$s6, $s8, $s6;
	cmov_b32	$s7, $c0, $s4, $s1;
	cmov_b32	$s1, $c0, $s6, $s2;
	shl_u32	$s2, $s1, 2;
	shr_u32	$s4, $s5, 30;
	or_b32	$s4, $s2, $s4;
	shr_u32	$s2, $s1, 29;
	shl_u32	$s2, $s2, 31;
	shr_s32	$s8, $s2, 31;
	xor_b32	$s6, $s8, $s4;
	firstbit_u32_u32	$s9, $s6;
	cmp_eq_b1_s32	$c0, $s4, $s8;
	cmov_b32	$s4, $c0, 32, $s9;
	shr_u32	$s3, $s3, 30;
	shr_u32	$s9, $s7, 30;
	shl_u32	$s5, $s5, 2;
	or_b32	$s5, $s5, $s9;
	shl_u32	$s7, $s7, 2;
	or_b32	$s7, $s7, $s3;
	sub_u32	$s3, 31, $s4;
	xor_b32	$s7, $s8, $s7;
	shr_u32	$s9, $s7, $s3;
	neg_s32	$s7, $s3;
	xor_b32	$s10, $s8, $s5;
	shl_u32	$s5, $s10, $s7;
	or_b32	$s5, $s5, $s9;
	shr_u32	$s8, $s5, 9;
	shr_u32	$s3, $s10, $s3;
	shl_u32	$s6, $s6, $s7;
	or_b32	$s3, $s6, $s3;
	shl_u32	$s6, $s3, 23;
	or_b32	$s6, $s6, $s8;
	firstbit_u32_u32	$s7, $s6;
	cmp_eq_b1_s32	$c0, $s6, 0;
	cmov_b32	$s7, $c0, 32, $s7;
	sub_u32	$s8, 126, $s4;
	shr_u32	$s9, $s1, 30;
	bitextract_u32	$s1, $s1, 29, 1;
	shl_u32	$s8, $s8, 23;
	add_u32	$s1, $s1, $s9;
	or_b32	$s8, $s8, $s2;
	sub_u32	$s4, 102, $s4;
	sub_u32	$s9, 31, $s7;
	shr_u32	$s5, $s5, $s9;
	neg_s32	$s9, $s9;
	shl_u32	$s6, $s6, $s9;
	or_b32	$s5, $s6, $s5;
	shr_u32	$s5, $s5, 9;
	sub_u32	$s4, $s4, $s7;
	shl_u32	$s4, $s4, 23;
	or_b32	$s2, $s4, $s2;
	shr_u32	$s3, $s3, 9;
	or_b32	$s3, $s8, $s3;
	or_b32	$s4, $s2, $s5;
	mul_ftz_f32	$s2, $s3, 0F3fc90fda;
	mul_ftz_f32	$s5, $s3, 0Fbfc90fda;
	fma_ftz_f32	$s5, $s3, 0F3fc90fda, $s5;
	fma_ftz_f32	$s3, $s3, 0F33a22168, $s5;
	fma_ftz_f32	$s4, $s4, 0F3fc90fda, $s3;
	add_ftz_f32	$s3, $s4, $s2;
	sub_ftz_f32	$s2, $s3, $s2;
	sub_ftz_f32	$s2, $s4, $s2;

@BB0_3:
	// %argReductionS.exit
	mov_b32	$s4, $s3;
	and_b32	$s4, $s4, 2147483647;
	add_u32	$s5, $s4, 4278190080;
	add_u32	$s6, $s4, 3244713574;
	cmp_lt_b1_u32	$c0, $s6, 11429479;
	cmov_b32	$s5, $c0, $s5, 0;
	cmp_gt_b1_u32	$c0, $s4, 1061683200;
	cmov_b32	$s6, $c0, 1049624576, $s5;
	and_b32	$s4, $s1, 2;
	cmp_gt_b1_u32	$c0, $s4, 1;
	cvt_u32_b1	$s4, $c0;
	mul_ftz_f32	$s5, $s3, $s3;
	nfma_f32	$s7, $s5, 0F2f2ec9d3, 0Fb2d72f34;
	nfma_f32	$s7, $s5, $s7, 0F3636df25;
	nfma_f32	$s7, $s5, $s7, 0Fb95009d4;
	nfma_f32	$s8, $s5, $s7, 0F3c088887;
	mul_ftz_f32	$s7, $s3, $s5;
	neg_f32	$s9, $s7;
	neg_f32	$s10, $s3;
	mul_ftz_f32	$s8, $s8, $s9;
	sub_ftz_f32	$s9, 0F3f800000, $s6;
	mul_ftz_f32	$s10, $s2, $s10;
	nfma_f32	$s11, $s5, 0Fad47d74e, 0F310f74f6;
	nfma_f32	$s11, $s5, $s11, 0Fb492923a;
	nfma_f32	$s11, $s5, $s11, 0F37d00ae2;
	nfma_f32	$s11, $s5, $s11, 0Fbab60b60;
	nfma_f32	$s11, $s5, $s11, 0F3d2aaaab;
	mul_ftz_f32	$s11, $s5, $s11;
	and_b32	$s1, $s1, 1;
	nfma_f32	$s10, $s5, $s11, $s10;
	neg_f32	$s6, $s6;
	nfma_f32	$s6, $s5, 0F3f000000, $s6;
	sub_ftz_f32	$s6, $s6, $s10;
	sub_ftz_f32	$s6, $s9, $s6;
	nfma_f32	$s8, $s2, 0F3f000000, $s8;
	neg_f32	$s2, $s2;
	nfma_f32	$s2, $s5, $s8, $s2;
	nfma_f32	$s2, $s7, 0F3e2aaaab, $s2;
	sub_ftz_f32	$s2, $s3, $s2;
	neg_f32	$s2, $s2;
	cvt_b1_u32	$c0, $s1;
	cmov_b32	$s1, $c0, $s2, $s6;
	shl_u32	$s2, $s4, 31;
	xor_b32	$s1, $s1, $s2;
	cmp_gt_b1_u32	$c0, $s0, 2139095039;
	cmov_b32	$s0, $c0, 2143289344, $s1;
	st_arg_align(4)_f32	$s0, [%_gcc_cos];
	ret;
};


decl function &_gcc_erf(arg_f32 %ret)(arg_f32 %x);


function &_gcc_erf(arg_f32 %_gcc_erf)(arg_f32 %x)
{

@_gcc_erf_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s2, $s0;
	and_b32	$s1, $s2, 8388607;
	or_b32	$s3, $s1, 1065353216;
	add_ftz_f32	$s3, $s3, 0Fbf800000;
	cvt_ftz_f64_f32	$d0, $s3;
	add_u64	$d0, $d0, 17879290520660869120;
	cmp_ne_b1_s32	$c0, $s1, 0;
	cmov_b64	$d0, $c0, $d0, 0;
	neg_f64	$d1, $d0;
	cmp_lt_b1_s32	$c0, $s2, 0;
	cmov_b64	$d0, $c0, $d1, $d0;
	and_b32	$s1, $s2, 2147479552;
	mov_b32	$s4, $s1;
	neg_f32	$s1, $s4;
	nfma_f32	$s6, $s1, $s4, 0Fbf100000;
	mov_b32	$s1, $s6;
	and_b32	$s1, $s1, 4294963200;
	sub_ftz_f32	$s3, $s6, $s1;
	mul_ftz_f32	$s5, $s3, 0F39a3b295;
	nfma_f32	$s3, $s3, 0F3fb8a000, $s5;
	nfma_f32	$s3, $s1, 0F39a3b295, $s3;
	nexp2_f32	$s3, $s3;
	mul_ftz_f32	$s1, $s1, 0F3fb8a000;
	nexp2_f32	$s1, $s1;
	mul_ftz_f32	$s1, $s3, $s1;
	cmp_lt_ftz_b1_f32	$c0, $s6, 0Fc2aeac50;
	cmov_b32	$s7, $c0, 0, $s1;
	cvt_ftz_f64_f32	$d1, $s0;
	cmp_neu_ftz_b1_f32	$c0, $s0, 0F00000000;
	cmov_b64	$d0, $c0, $d1, $d0;
	and_b32	$s1, $s2, 2147483647;
	mov_b32	$s3, $s1;
	add_ftz_f32	$s8, $s3, 0Fbf800000;
	mul_ftz_f32	$s5, $s3, $s3;
	gcn_divrelaxednarrow_f32	$s9, 0F3f800000, $s5;
	cmp_lt_ftz_b1_f32	$c1, $s3, 0F3fa00000;
	cmov_b32	$s8, $c1, $s8, $s9;
	cmp_lt_ftz_b1_f32	$c0, $s3, 0F3f580000;
	cmov_b32	$s5, $c0, $s5, $s8;
	nfma_f32	$s8, $s5, 0Fbd777f97, 0F40d23f7c;
	nfma_f32	$s8, $s5, $s8, 0F42d9451f;
	nfma_f32	$s8, $s5, $s8, 0F43d6810b;
	nfma_f32	$s8, $s5, $s8, 0F442158c9;
	nfma_f32	$s8, $s5, $s8, 0F43d9486f;
	nfma_f32	$s9, $s5, 0Fc3f1c275, 0Fc480230b;
	nfma_f32	$s9, $s5, $s9, 0Fc41f6441;
	nfma_f32	$s9, $s5, $s9, 0Fc320a2ea;
	nfma_f32	$s9, $s5, $s9, 0Fc18e104b;
	nfma_f32	$s9, $s5, $s9, 0Fbf4c9dd4;
	nfma_f32	$s10, $s5, $s8, 0F4309a863;
	nfma_f32	$s8, $s5, 0Fc1b38712, 0F43ed43a7;
	nfma_f32	$s8, $s5, $s8, 0F451f90ce;
	nfma_f32	$s8, $s5, $s8, 0F4547fdbb;
	nfma_f32	$s8, $s5, $s8, 0F44c01759;
	nfma_f32	$s8, $s5, $s8, 0F43a2e571;
	nfma_f32	$s11, $s5, 0Fc11d077e, 0Fc2a2932b;
	nfma_f32	$s8, $s5, $s8, 0F41f2b459;
	nfma_f32	$s10, $s5, $s10, 0F419d35ce;
	nfma_f32	$s9, $s5, $s9, 0Fbc21a092;
	nfma_f32	$s11, $s5, $s11, 0Fc3389ae7;
	nfma_f32	$s11, $s5, $s11, 0Fc322658c;
	nfma_f32	$s11, $s5, $s11, 0Fc2798057;
	nfma_f32	$s11, $s5, $s11, 0Fc128f022;
	nfma_f32	$s11, $s5, $s11, 0Fbf31a0b7;
	nfma_f32	$s11, $s5, $s11, 0Fbc21a093;
	cmp_lt_ftz_b1_f32	$c2, $s3, 0F4036db6e;
	cmov_b32	$s9, $c2, $s11, $s9;
	cmov_b32	$s8, $c2, $s10, $s8;
	cmp_gt_ftz_b1_f32	$c2, $s6, 0F42b17218;
	cmov_b32	$s6, $c2, 2139095040, $s7;
	mul_f64	$d2, $d0, 0Dbff20dd750429b6d;
	mul_f64	$d1, $d0, 0D3ff20dd750429b6d;
	cmp_lt_b1_f64	$c2, $d1, 0D0000000000000000;
	cmov_b64	$d0, $c2, $d2, $d1;
	nfma_f32	$s7, $s5, 0Fbb0df9c0, 0F3d1151b3;
	nfma_f32	$s7, $s5, $s7, 0Fbde31cc2;
	nfma_f32	$s10, $s5, 0F3c445aa3, 0F3c5f6e13;
	nfma_f32	$s12, $s5, $s10, 0F3e013307;
	nfma_f32	$s13, $s5, $s7, 0F3ea2fe54;
	nfma_f32	$s7, $s5, 0Fb684e21a, 0F390aee49;
	nfma_f32	$s11, $s5, $s7, 0F3ba68116;
	add_ftz_f32	$s7, $s4, $s3;
	sub_ftz_f32	$s10, $s4, $s3;
	nfma_f32	$s4, $s5, $s13, 0Fbebe9208;
	nfma_f32	$s4, $s5, $s4, 0F3ed46805;
	nfma_f32	$s4, $s5, $s4, 0Fbb1acdc6;
	cmov_b32	$s4, $c1, $s4, $s9;
	nfma_f32	$s9, $s5, $s12, 0F3d931ae7;
	nfma_f32	$s9, $s5, $s9, 0F3f0a5785;
	nfma_f32	$s12, $s5, 0Fb7c756b1, 0Fbbbd1489;
	nfma_f32	$s12, $s5, $s12, 0Fbce9528f;
	nfma_f32	$s12, $s5, $s12, 0Fbea66beb;
	nfma_f32	$s12, $s5, $s12, 0F3e0375d4;
	cmov_b32	$s4, $c0, $s12, $s4;
	nfma_f32	$s9, $s5, $s9, 0F3dd9f331;
	cmov_b32	$s8, $c1, $s9, $s8;
	nfma_f32	$s9, $s5, $s11, 0F3d852a63;
	nfma_f32	$s9, $s5, $s9, 0F3ecbbbce;
	cmov_b32	$s8, $c0, $s9, $s8;
	nfma_f32	$s5, $s5, $s8, 0F3f800000;
	nrcp_f32	$s5, $s5;
	mul_ftz_f32	$s4, $s4, $s5;
	nfma_f32	$s5, $s10, $s7, $s4;
	mov_b32	$s7, $s5;
	and_b32	$s7, $s7, 4294963200;
	sub_ftz_f32	$s8, $s5, $s7;
	mul_ftz_f32	$s9, $s8, 0F39a3b295;
	nfma_f32	$s8, $s8, 0F3fb8a000, $s9;
	nfma_f32	$s8, $s7, 0F39a3b295, $s8;
	nexp2_f32	$s8, $s8;
	mul_ftz_f32	$s7, $s7, 0F3fb8a000;
	nexp2_f32	$s7, $s7;
	mul_ftz_f32	$s7, $s8, $s7;
	cmp_lt_ftz_b1_f32	$c2, $s5, 0Fc2aeac50;
	cmov_b32	$s7, $c2, 0, $s7;
	cmp_gt_ftz_b1_f32	$c2, $s5, 0F42b17218;
	cmov_b32	$s5, $c2, 2139095040, $s7;
	nrcp_f32	$s7, $s3;
	mul_ftz_f32	$s5, $s6, $s5;
	mul_ftz_f32	$s5, $s7, $s5;
	sub_ftz_f32	$s5, 0F3f800000, $s5;
	cmp_lt_ftz_b1_f32	$c2, $s3, 0F40c00000;
	cmov_b32	$s5, $c2, $s5, 1065353216;
	add_ftz_f32	$s6, $s4, 0F3f58560b;
	cmov_b32	$s5, $c1, $s6, $s5;
	and_b32	$s6, $s2, 2147483648;
	nfma_f32	$s2, $s0, $s4, $s0;
	mov_b32	$s4, $s5;
	or_b32	$s4, $s4, $s6;
	cmov_b32	$s2, $c0, $s2, $s4;
	mul_ftz_f32	$s4, $s0, 0F3f8375d4;
	nfma_f32	$s4, 0F41000000, $s0, $s4;
	mul_ftz_f32	$s4, $s4, 0F3e000000;
	cmp_lt_ftz_b1_f32	$c0, $s3, 0F31800000;
	cmov_b32	$s2, $c0, $s4, $s2;
	mov_b64	$d2, $d1;
	cvt_u32_u64	$s4, $d2;
	shr_u32	$s3, $s4, 29;
	shr_u64	$d3, $d2, 29;
	cvt_u32_u64	$s5, $d3;
	and_b32	$s5, $s5, 8388600;
	or_b32	$s3, $s3, $s5;
	or_b32	$s3, $s3, 8388608;
	shl_u32	$s6, $s4, 3;
	shr_u64	$d3, $d2, 52;
	cvt_u32_u64	$s4, $d3;
	and_b32	$s4, $s4, 2047;
	sub_u32	$s7, 897, $s4;
	shr_u32	$s4, $s3, $s7;
	shr_u32	$s5, $s6, $s7;
	neg_s32	$s7, $s7;
	shl_u32	$s8, $s3, $s7;
	cvt_ftz_near_f32_f64	$s3, $d1;
	shr_u64	$d1, $d2, 32;
	or_b32	$s8, $s5, $s8;
	cvt_u32_u64	$s5, $d1;
	and_b32	$s5, $s5, 2147483648;
	cmp_gt_b1_u32	$c0, $s8, 2147483648;
	cbr_b1	$c0, @BB0_3;
	// BB#1:
	cmp_ne_b1_s32	$c0, $s8, -2147483648;
	cbr_b1	$c0, @BB0_4;
	// BB#2:
	shl_u32	$s6, $s6, $s7;
	and_b32	$s7, $s4, 1;
	or_b32	$s6, $s7, $s6;
	cmp_eq_b1_s32	$c0, $s6, 0;
	cbr_b1	$c0, @BB0_4;

@BB0_3:
	add_u32	$s4, $s4, 1;

@BB0_4:
	// %double_to_float_uint.exit
	or_b32	$s4, $s4, $s5;
	cmp_ge_b1_f64	$c0, $d0, 0D3690000000000001;
	cmov_b32	$s4, $c0, $s4, 0;
	mov_b32	$s5, $s3;
	cmp_neu_ftz_b1_f32	$c0, $s3, 0F00000000;
	cmov_b32	$s3, $c0, $s5, $s4;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b32	$s1, $c0, 0, $s3;
	cmp_eq_ftz_b1_f32	$c0, $s0, 0F00000000;
	cmov_b32	$s1, $c0, $s1, $s2;
	class_b1_f32	$c0, $s0, 3;
	cvt_u32_b1	$s2, $c0;
	and_b32	$s2, $s2, 1;
	cvt_b1_u32	$c0, $s2;
	cmov_b32	$s0, $c0, $s0, $s1;
	st_arg_align(4)_f32	$s0, [%_gcc_erf];
	ret;
};


decl function &_gcc_ldexp(arg_f32 %ret)(
	arg_f32 %x,
	arg_u32 %n);


function &_gcc_ldexp(arg_f32 %_gcc_ldexp)(
	arg_f32 %x,
	arg_u32 %n)
{

@_gcc_ldexp_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	class_b1_f32	$c0, $s0, 3;
	cvt_u32_b1	$s1, $c0;
	class_b1_f32	$c0, $s0, 516;
	cvt_u32_b1	$s2, $c0;
	or_b32	$s1, $s2, $s1;
	mov_b32	$s6, $s0;
	and_b32	$s3, $s6, 2147483647;
	shr_u32	$s2, $s3, 23;
	ld_arg_align(4)_u32	$s7, [%n];
	add_u32	$s4, $s2, $s7;
	sub_u32	$s5, 1, $s4;
	and_b32	$s8, $s6, 8388607;
	or_b32	$s8, $s8, 8388608;
	shr_u32	$s5, $s8, $s5;
	shl_u32	$s8, $s4, 23;
	and_b32	$s9, $s6, 2155872255;
	or_b32	$s8, $s9, $s8;
	cmp_gt_b1_s32	$c0, $s4, 0;
	cmov_b32	$s5, $c0, $s8, $s5;
	cmp_gt_b1_s32	$c0, $s4, 254;
	cmov_b32	$s5, $c0, 2139095040, $s5;
	cmp_lt_b1_s32	$c0, $s4, -24;
	cmov_b32	$s4, $c0, 0, $s5;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cvt_u32_b1	$s5, $c0;
	or_b32	$s8, $s3, 1065353216;
	add_ftz_f32	$s8, $s8, 0Fbf800000;
	shr_u32	$s8, $s8, 23;
	sub_u32	$s8, 127, $s8;
	and_b32	$s6, $s6, 2147483648;
	sub_u32	$s9, 25, $s8;
	add_u32	$s7, $s9, $s7;
	sub_u32	$s9, 25, $s7;
	shl_u32	$s3, $s3, $s8;
	and_b32	$s8, $s3, 8388607;
	or_b32	$s3, $s8, 8388608;
	shr_u32	$s3, $s3, $s9;
	or_b32	$s9, $s8, $s6;
	add_u32	$s8, $s7, 4294967272;
	shl_u32	$s10, $s8, 23;
	or_b32	$s9, $s9, $s10;
	cmp_gt_b1_s32	$c0, $s8, 0;
	cmov_b32	$s3, $c0, $s9, $s3;
	cmp_gt_b1_s32	$c0, $s8, 254;
	cmov_b32	$s3, $c0, 2139095040, $s3;
	cmp_lt_b1_s32	$c0, $s7, 0;
	cmov_b32	$s3, $c0, 0, $s3;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmov_b32	$s2, $c0, $s3, $s4;
	and_b32	$s1, $s1, 1;
	or_b32	$s1, $s1, $s5;
	or_b32	$s2, $s2, $s6;
	cmp_ne_b1_s32	$c0, $s1, 0;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_ldexp];
	ret;
};


decl function &_gcc_half_divide(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y);


function &_gcc_half_divide(arg_f32 %_gcc_half_divide)(
	arg_f32 %x,
	arg_f32 %y)
{

@_gcc_half_divide_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s1, [%y];
	abs_f32	$s0, $s1;
	cmp_gt_ftz_b1_f32	$c0, $s0, 0F6f800000;
	cmov_b32	$s0, $c0, 796917760, 1065353216;
	mul_ftz_f32	$s1, $s0, $s1;
	nrcp_f32	$s1, $s1;
	ld_arg_align(4)_f32	$s2, [%x];
	mul_ftz_f32	$s1, $s1, $s2;
	mul_ftz_f32	$s0, $s0, $s1;
	st_arg_align(4)_f32	$s0, [%_gcc_half_divide];
	ret;
};


decl function &_gcc_fmod(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y);


function &_gcc_fmod(arg_f32 %_gcc_fmod)(
	arg_f32 %x,
	arg_f32 %y)
{

@_gcc_fmod_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s2, [%x];
	mov_b32	$s0, $s2;
	and_b32	$s4, $s0, 2147483647;
	cmp_le_b1_u32	$c0, $s4, 2139095040;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	mov_b32	$s5, $s2;
	br	@BB0_22;

@BB0_2:
	mov_b32	$s6, 2143289344;
	cmp_ne_b1_s32	$c0, $s4, 2139095040;
	cbr_b1	$c0, @BB0_4;
	// BB#3:
	mov_b32	$s5, $s6;
	br	@BB0_22;

@BB0_4:
	ld_arg_align(4)_f32	$s5, [%y];
	mov_b32	$s1, $s5;
	and_b32	$s3, $s1, 2147483647;
	cmp_gt_b1_u32	$c0, $s3, 2139095040;
	cbr_b1	$c0, @BB0_22;
	// BB#5:
	cmp_ne_b1_s32	$c0, $s3, 2139095040;
	cbr_b1	$c0, @BB0_7;
	// BB#6:
	mov_b32	$s5, $s2;
	br	@BB0_22;

@BB0_7:
	or_b32	$s5, $s1, $s0;
	and_b32	$s5, $s5, 2147483647;
	cmp_eq_b1_s32	$c0, $s5, 0;
	mov_b32	$s5, $s6;
	cbr_b1	$c0, @BB0_22;
	// BB#8:
	cmp_eq_b1_s32	$c0, $s4, 0;
	cmp_eq_b1_s32	$c1, $s3, 0;
	or_b1	$c1, $c0, $c1;
	not_b1	$c1, $c1;
	cbr_b1	$c1, @BB0_10;
	// BB#9:
	cmov_b32	$s5, $c0, $s2, 2143289344;
	br	@BB0_22;

@BB0_10:
	bitextract_u32	$s2, $s1, 23, 8;
	sub_u32	$s5, 48, $s2;
	cvt_near_f32_s32	$s5, $s5;
	cmp_gt_b1_u32	$c0, $s2, 47;
	cmov_b32	$s6, $c0, 0, $s5;
	mov_b32	$s2, $s3;
	cmp_eq_ftz_b1_f32	$c0, $s6, 0F00000000;
	mov_b32	$s5, $s2;
	cbr_b1	$c0, @BB0_12;
	// BB#11:
	abs_f32	$s5, $s6;
	cvt_ftz_s32_f32	$s7, $s5;
	cmp_gt_ftz_b1_f32	$c1, $s5, 0F44800000;
	cmov_b32	$s5, $c1, 1024, $s7;
	neg_s32	$s7, $s5;
	cmp_lt_ftz_b1_f32	$c1, $s6, 0F00000000;
	cmov_b32	$s5, $c1, $s7, $s5;
	add_u32	$s6, $s5, 4294967147;
	and_b32	$s7, $s1, 2139095040;
	cmp_eq_b1_s32	$c1, $s7, 0;
	cmov_b32	$s7, $c1, $s6, $s5;
	and_b32	$s6, $s1, 8388607;
	cvt_near_f32_s32	$s6, $s6;
	cmov_b32	$s6, $c1, $s6, $s2;
	shl_u32	$s8, $s7, 23;
	add_u32	$s8, $s8, $s6;
	bitextract_u32	$s9, $s6, 23, 8;
	add_u32	$s9, $s9, $s7;
	add_u32	$s7, $s9, 4294967169;
	cmp_gt_b1_s32	$c1, $s7, 127;
	cmov_b32	$s7, $c1, 2139095040, $s8;
	sub_u32	$s8, 1, $s9;
	and_b32	$s9, $s8, 31;
	cmp_lt_b1_s32	$c1, $s8, 24;
	cmov_b32	$s9, $c1, $s9, 24;
	cmp_lt_b1_s32	$c1, $s8, 0;
	cmov_b32	$s9, $c1, 0, $s9;
	and_b32	$s6, $s6, 8388607;
	or_b32	$s6, $s6, 8388608;
	shr_u32	$s6, $s6, $s9;
	cmp_gt_b1_s32	$c1, $s8, 0;
	cmov_b32	$s6, $c1, $s6, $s7;
	cvt_near_f32_s32	$s5, $s5;
	cmp_gt_ftz_b1_f32	$c1, $s5, 0F437e0000;
	cmov_b32	$s5, $c1, 2139095040, $s6;

@BB0_12:
	bitextract_u32	$s6, $s0, 23, 8;
	mov_b32	$s7, $s5;
	bitextract_u32	$s7, $s7, 23, 8;
	sub_u32	$s8, $s6, $s7;
	cvt_s64_s32	$d0, $s8;
	mul_u64	$d0, $d0, 715827883;
	shr_u64	$d1, $d0, 63;
	cvt_u32_u64	$s8, $d1;
	shr_s64	$d0, $d0, 33;
	cvt_u32_u64	$s9, $d0;
	add_u32	$s8, $s9, $s8;
	cmp_le_b1_u32	$c1, $s6, $s7;
	cmov_b32	$s6, $c1, 0, $s8;
	mul_u32	$s8, $s6, 12;
	shr_s32	$s7, $s8, 1;
	sub_u32	$s8, $s8, $s7;
	shl_u32	$s8, $s8, 23;
	add_u32	$s8, $s8, 1065353216;
	shl_u32	$s7, $s7, 23;
	add_u32	$s7, $s7, 1065353216;
	mul_ftz_f32	$s7, $s5, $s7;
	mul_ftz_f32	$s7, $s7, $s8;
	cmp_eq_b1_s32	$c2, $s6, 0;
	cmov_b32	$s5, $c2, $s5, $s7;
	mov_b32	$s7, $s5;
	bitextract_u32	$s7, $s7, 23, 8;
	add_u32	$s7, $s7, 4294967063;
	cmp_gt_b1_s32	$c3, $s6, 0;
	cmp_lt_b1_u32	$c1, $s7, 22;
	and_b1	$c3, $c1, $c3;
	mul_ftz_f32	$s7, $s5, 0F38800000;
	cmov_b32	$s8, $c3, $s7, $s5;
	cmp_lt_b1_s32	$c3, $s6, 1;
	cbr_b1	$c3, @BB0_13;
	// BB#14:
	cmov_b32	$s7, $c2, 1065353216, 964689920;

@BB0_15:
	// %.lr.ph19
	nrcp_f32	$s8, $s8;
	mul_ftz_f32	$s8, $s4, $s8;
	mul_ftz_f32	$s9, $s8, 0F38800000;
	cmov_b32	$s8, $c1, $s9, $s8;
	floor_ftz_f32	$s9, $s8;
	mul_ftz_f32	$s8, $s5, $s9;
	mov_b32	$s10, $s9;
	and_b32	$s10, $s10, 4294963200;
	mov_b32	$s11, $s5;
	and_b32	$s11, $s11, 4294963200;
	mul_ftz_f32	$s12, $s11, $s10;
	sub_ftz_f32	$s12, $s12, $s8;
	sub_ftz_f32	$s9, $s9, $s10;
	mul_ftz_f32	$s13, $s11, $s9;
	sub_ftz_f32	$s11, $s5, $s11;
	add_ftz_f32	$s12, $s13, $s12;
	mul_ftz_f32	$s10, $s11, $s10;
	add_ftz_f32	$s10, $s10, $s12;
	mul_ftz_f32	$s9, $s11, $s9;
	add_ftz_f32	$s9, $s9, $s10;
	sub_ftz_f32	$s10, $s4, $s8;
	sub_ftz_f32	$s4, $s4, $s10;
	sub_ftz_f32	$s4, $s4, $s8;
	sub_ftz_f32	$s4, $s4, $s9;
	add_ftz_f32	$s4, $s10, $s4;
	add_ftz_f32	$s8, $s5, $s4;
	cmp_lt_ftz_b1_f32	$c1, $s4, 0F00000000;
	cmov_b32	$s8, $c1, $s8, $s4;
	sub_ftz_f32	$s4, $s4, $s5;
	cmp_ge_ftz_b1_f32	$c1, $s8, $s5;
	cmov_b32	$s4, $c1, $s4, $s8;
	mov_b1	$c1, 0;
	mul_ftz_f32	$s5, $s7, $s5;
	add_u32	$s6, $s6, 4294967295;
	cmp_ne_b1_s32	$c2, $s6, 0;
	mov_b32	$s8, $s5;
	cbr_b1	$c2, @BB0_15;
	br	@BB0_16;

@BB0_13:
	mov_b32	$s5, $s8;

@BB0_16:
	// %._crit_edge20
	mul_ftz_f32	$s7, $s5, 0F38800000;
	mov_b32	$s6, $s5;
	bitextract_u32	$s8, $s6, 23, 8;
	add_u32	$s8, $s8, 4294967063;
	cmp_lt_b1_u32	$c1, $s8, 22;
	cmov_b32	$s7, $c1, $s7, $s5;
	nrcp_f32	$s7, $s7;
	mul_ftz_f32	$s7, $s4, $s7;
	mul_ftz_f32	$s8, $s7, 0F38800000;
	cmov_b32	$s7, $c1, $s8, $s7;
	and_b32	$s6, $s6, 4294963200;
	mov_b32	$s8, $s6;
	floor_ftz_f32	$s9, $s7;
	sub_ftz_f32	$s7, $s5, $s8;
	mul_ftz_f32	$s6, $s5, $s9;
	mov_b32	$s10, $s9;
	and_b32	$s10, $s10, 4294963200;
	mul_ftz_f32	$s11, $s8, $s10;
	sub_ftz_f32	$s11, $s11, $s6;
	sub_ftz_f32	$s9, $s9, $s10;
	mul_ftz_f32	$s8, $s8, $s9;
	add_ftz_f32	$s8, $s8, $s11;
	mul_ftz_f32	$s10, $s7, $s10;
	add_ftz_f32	$s8, $s10, $s8;
	mul_ftz_f32	$s7, $s7, $s9;
	add_ftz_f32	$s7, $s7, $s8;
	sub_ftz_f32	$s8, $s4, $s6;
	sub_ftz_f32	$s9, $s4, $s8;
	sub_ftz_f32	$s6, $s9, $s6;
	sub_ftz_f32	$s6, $s6, $s7;
	add_ftz_f32	$s6, $s8, $s6;
	add_ftz_f32	$s7, $s5, $s6;
	cmp_lt_ftz_b1_f32	$c1, $s6, 0F00000000;
	cmov_b32	$s6, $c1, $s7, $s6;
	sub_ftz_f32	$s7, $s6, $s5;
	cmp_ltu_ftz_b1_f32	$c1, $s6, $s5;
	cmov_b32	$s5, $c1, $s6, $s7;
	mov_b32	$s6, $s4;
	bitextract_u32	$s6, $s6, 23, 8;
	cvt_near_f32_s32	$s6, $s6;
	cmp_eq_ftz_b1_f32	$c1, $s6, 0F00000000;
	cmov_b32	$s4, $c1, $s4, $s5;
	mov_b32	$s5, $s4;
	cmp_eq_b1_s32	$c1, $s5, 0;
	or_b1	$c0, $c1, $c0;
	cbr_b1	$c0, @BB0_21;
	// BB#17:
	and_b32	$s7, $s5, 8388607;
	firstbit_u32_u32	$s6, $s7;
	sub_u32	$s6, 4294967178, $s6;
	cmp_eq_b1_s32	$c0, $s7, 0;
	cmov_b32	$s6, $c0, 4294967146, $s6;
	and_b32	$s10, $s5, 2147483647;
	shr_u32	$s8, $s10, 23;
	add_u32	$s8, $s8, 4294967169;
	cmp_lt_b1_u32	$c0, $s10, 8388608;
	cmov_b32	$s6, $c0, $s6, $s8;
	cmp_eq_b1_s32	$c0, $s10, 0;
	cmp_gt_b1_u32	$c1, $s10, 2139095040;
	or_b1	$c0, $c1, $c0;
	cmov_b32	$s6, $c0, 2147483648, $s6;
	cmp_eq_b1_s32	$c0, $s10, 2139095040;
	cmov_b32	$s6, $c0, 2147483647, $s6;
	and_b32	$s9, $s1, 8388607;
	firstbit_u32_u32	$s8, $s9;
	sub_u32	$s8, 4294967178, $s8;
	cmp_eq_b1_s32	$c0, $s9, 0;
	cmov_b32	$s8, $c0, 4294967146, $s8;
	shr_u32	$s11, $s3, 23;
	add_u32	$s11, $s11, 4294967169;
	cmp_lt_b1_u32	$c0, $s3, 8388608;
	cmov_b32	$s3, $c0, $s8, $s11;
	neg_s32	$s8, $s6;
	cvt_near_f32_s32	$s8, $s8;
	abs_f32	$s11, $s8;
	cvt_ftz_s32_f32	$s12, $s11;
	cmp_gt_ftz_b1_f32	$c0, $s11, 0F44800000;
	cmov_b32	$s11, $c0, 1024, $s12;
	neg_s32	$s12, $s11;
	cmp_lt_ftz_b1_f32	$c0, $s8, 0F00000000;
	cmov_b32	$s8, $c0, $s12, $s11;
	cvt_near_f32_s32	$s7, $s7;
	and_b32	$s11, $s5, 2139095040;
	cmp_eq_b1_s32	$c0, $s11, 0;
	cmov_b32	$s10, $c0, $s7, $s10;
	add_u32	$s7, $s8, 4294967147;
	cmov_b32	$s11, $c0, $s7, $s8;
	neg_s32	$s7, $s3;
	cvt_near_f32_s32	$s7, $s7;
	abs_f32	$s12, $s7;
	cvt_ftz_s32_f32	$s13, $s12;
	cmp_gt_ftz_b1_f32	$c0, $s12, 0F44800000;
	cmov_b32	$s12, $c0, 1024, $s13;
	neg_s32	$s13, $s12;
	cmp_lt_ftz_b1_f32	$c0, $s7, 0F00000000;
	cmov_b32	$s7, $c0, $s13, $s12;
	bitextract_u32	$s12, $s10, 23, 8;
	shl_u32	$s13, $s11, 23;
	add_u32	$s13, $s13, $s10;
	add_u32	$s12, $s12, $s11;
	add_u32	$s11, $s12, 4294967169;
	cmp_gt_b1_s32	$c0, $s11, 127;
	cmov_b32	$s11, $c0, 2139095040, $s13;
	sub_u32	$s12, 1, $s12;
	and_b32	$s13, $s12, 31;
	cmp_lt_b1_s32	$c0, $s12, 24;
	cmov_b32	$s13, $c0, $s13, 24;
	cvt_near_f32_s32	$s9, $s9;
	and_b32	$s1, $s1, 2139095040;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b32	$s1, $c0, $s9, $s2;
	add_u32	$s2, $s7, 4294967147;
	cmov_b32	$s9, $c0, $s2, $s7;
	cmp_lt_b1_s32	$c0, $s12, 0;
	cmov_b32	$s2, $c0, 0, $s13;
	and_b32	$s10, $s10, 8388607;
	or_b32	$s10, $s10, 8388608;
	shr_u32	$s2, $s10, $s2;
	cmp_gt_b1_s32	$c0, $s12, 0;
	cmov_b32	$s2, $c0, $s2, $s11;
	bitextract_u32	$s10, $s1, 23, 8;
	shl_u32	$s11, $s9, 23;
	add_u32	$s11, $s11, $s1;
	add_u32	$s10, $s10, $s9;
	add_u32	$s9, $s10, 4294967169;
	cmp_gt_b1_s32	$c0, $s9, 127;
	cmov_b32	$s9, $c0, 2139095040, $s11;
	sub_u32	$s10, 1, $s10;
	and_b32	$s11, $s10, 31;
	cmp_lt_b1_s32	$c0, $s10, 24;
	cmov_b32	$s11, $c0, $s11, 24;
	cvt_near_f32_s32	$s8, $s8;
	cmp_gt_ftz_b1_f32	$c0, $s8, 0F437e0000;
	cmov_b32	$s2, $c0, 2139095040, $s2;
	cmp_lt_b1_s32	$c0, $s10, 0;
	cmov_b32	$s8, $c0, 0, $s11;
	and_b32	$s1, $s1, 8388607;
	or_b32	$s1, $s1, 8388608;
	shr_u32	$s1, $s1, $s8;
	cmp_gt_b1_s32	$c0, $s10, 0;
	cmov_b32	$s1, $c0, $s1, $s9;
	and_b32	$s8, $s5, 2147483648;
	mov_b32	$s5, $s2;
	or_b32	$s8, $s5, $s8;
	cmp_lt_b1_s32	$c0, $s5, 2139095041;
	cmov_b32	$s2, $c0, $s8, $s2;
	cvt_near_f32_s32	$s5, $s7;
	cmp_gt_ftz_b1_f32	$c0, $s5, 0F437e0000;
	cmov_b32	$s5, $c0, 2139095040, $s1;
	sub_ftz_f32	$s1, $s2, $s5;
	cmp_ge_ftz_b1_f32	$c0, $s2, $s5;
	cmov_b32	$s2, $c0, $s1, $s2;
	sub_u32	$s1, $s6, $s3;
	cmp_lt_b1_s32	$c0, $s1, 1;
	cbr_b1	$c0, @BB0_20;
	// BB#18:
	mov_b32	$s6, $s1;

@BB0_19:
	// %.lr.ph
	add_ftz_f32	$s2, $s2, $s2;
	sub_ftz_f32	$s7, $s2, $s5;
	cmp_ge_ftz_b1_f32	$c0, $s2, $s5;
	cmov_b32	$s2, $c0, $s7, $s2;
	add_u32	$s6, $s6, 4294967295;
	cmp_gt_b1_s32	$c0, $s6, 0;
	cbr_b1	$c0, @BB0_19;

@BB0_20:
	// %._crit_edge
	cvt_near_f32_s32	$s3, $s3;
	abs_f32	$s5, $s3;
	cvt_ftz_s32_f32	$s6, $s5;
	cmp_gt_ftz_b1_f32	$c0, $s5, 0F44800000;
	cmov_b32	$s5, $c0, 1024, $s6;
	neg_s32	$s6, $s5;
	cmp_lt_ftz_b1_f32	$c0, $s3, 0F00000000;
	cmov_b32	$s3, $c0, $s6, $s5;
	add_u32	$s5, $s3, 4294967147;
	and_b32	$s6, $s2, 2139095040;
	cmp_eq_b1_s32	$c0, $s6, 0;
	cmov_b32	$s6, $c0, $s5, $s3;
	and_b32	$s5, $s2, 2147483647;
	and_b32	$s7, $s2, 8388607;
	cvt_near_f32_s32	$s7, $s7;
	cmov_b32	$s5, $c0, $s7, $s5;
	shl_u32	$s7, $s6, 23;
	add_u32	$s7, $s7, $s5;
	bitextract_u32	$s8, $s5, 23, 8;
	add_u32	$s8, $s8, $s6;
	add_u32	$s6, $s8, 4294967169;
	cmp_gt_b1_s32	$c0, $s6, 127;
	cmov_b32	$s6, $c0, 2139095040, $s7;
	sub_u32	$s7, 1, $s8;
	and_b32	$s8, $s7, 31;
	cmp_lt_b1_s32	$c0, $s7, 24;
	cmov_b32	$s8, $c0, $s8, 24;
	cmp_lt_b1_s32	$c0, $s7, 0;
	cmov_b32	$s8, $c0, 0, $s8;
	and_b32	$s5, $s5, 8388607;
	or_b32	$s5, $s5, 8388608;
	shr_u32	$s5, $s5, $s8;
	cmp_gt_b1_s32	$c0, $s7, 0;
	cmov_b32	$s5, $c0, $s5, $s6;
	cvt_near_f32_s32	$s3, $s3;
	cmp_gt_ftz_b1_f32	$c0, $s3, 0F437e0000;
	cmov_b32	$s3, $c0, 2139095040, $s5;
	and_b32	$s5, $s2, 2147483648;
	mov_b32	$s2, $s3;
	or_b32	$s5, $s2, $s5;
	cmp_lt_b1_s32	$c0, $s2, 2139095041;
	cmov_b32	$s2, $c0, $s5, $s3;
	cmp_gt_b1_s32	$c0, $s1, -1;
	cmov_b32	$s4, $c0, $s2, $s4;

@BB0_21:
	mov_b32	$s1, $s4;
	xor_b32	$s1, $s1, 2147483648;
	cmp_lt_b1_s32	$c0, $s0, 0;
	cmov_b32	$s5, $c0, $s1, $s4;

@BB0_22:
	st_arg_align(4)_f32	$s5, [%_gcc_fmod];
	ret;
};


decl function &_gcc_half_rsqrt(arg_f32 %ret)(arg_f32 %x);


function &_gcc_half_rsqrt(arg_f32 %_gcc_half_rsqrt)(arg_f32 %x)
{

@_gcc_half_rsqrt_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	nrsqrt_f32	$s0, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_half_rsqrt];
	ret;
};

align(8) readonly_f32 &__math32_LOGE_TBL[258] = f32[](0F00000000, 0F00000000, 0F3bff0000, 0F3429ac41, 0F3c7e0000, 0F35a8b0fc, 0F3cbdc000, 0F368d83ea, 0F3cfc1000, 0F361b0e78, 0F3d1cf000, 0F3687b9fe, 0F3d3ba000, 0F3631ec65, 0F3d5a1000, 0F36dd7119, 0F3d785000, 0F35c30045, 0F3d8b2000, 0F379b7751, 0F3d9a0000, 0F37ebcb0d, 0F3da8d000, 0F37839f83, 0F3db78000, 0F37528ae5, 0F3dc61000, 0F37a2eb18, 0F3dd49000, 0F36da7495, 0F3de2f000, 0F36a91eb7, 0F3df13000, 0F3783b715, 0F3dff6000, 0F371131db, 0F3e06b000, 0F383f3e68, 0F3e0db000, 0F38156a97, 0F3e14a000, 0F38297c0f, 0F3e1b8000, 0F387e100f, 0F3e226000, 0F3815b665, 0F3e293000, 0F37e5e3a1, 0F3e2ff000, 0F38183853, 0F3e36b000, 0F35fe719d, 0F3e3d5000, 0F38448108, 0F3e43f000, 0F38503290, 0F3e4a9000, 0F373539e8, 0F3e511000, 0F385e0ff1, 0F3e579000, 0F3864a740, 0F3e5e1000, 0F3786742d, 0F3e647000, 0F387be3cd, 0F3e6ae000, 0F3685ad3e, 0F3e713000, 0F3803b715, 0F3e778000, 0F37adcbdc, 0F3e7dc000, 0F380c36af, 0F3e820000, 0F371652d3, 0F3e851000, 0F38927139, 0F3e882000, 0F38c5fcd7, 0F3e8b3000, 0F38ae55d5, 0F3e8e4000, 0F3818c169, 0F3e914000, 0F38a0fde7, 0F3e944000, 0F38ad09ef, 0F3e974000, 0F3862bae1, 0F3e9a3000, 0F38eecd4c, 0F3e9d3000, 0F3798aad2, 0F3ea02000, 0F37421a1a, 0F3ea30000, 0F38c5e10e, 0F3ea5f000, 0F37bf2aee, 0F3ea8d000, 0F382d872d, 0F3eabb000, 0F37ee2e8a, 0F3eae8000, 0F38dedfac, 0F3eb16000, 0F3802f2b9, 0F3eb43000, 0F38481e9b, 0F3eb70000, 0F380eaa2b, 0F3eb9c000, 0F38ebfb5d, 0F3ebc9000, 0F38255fdd, 0F3ebf5000, 0F38783b82, 0F3ec21000, 0F3851da1e, 0F3ec4d000, 0F374e1b05, 0F3ec78000, 0F388f439b, 0F3eca3000, 0F38ca0e10, 0F3ecce000, 0F38cac08b, 0F3ecf9000, 0F3891f65f, 0F3ed24000, 0F378121cb, 0F3ed4e000, 0F386c9a9a, 0F3ed78000, 0F38949923, 0F3eda2000, 0F38777bcc, 0F3edcc000, 0F37b12d26, 0F3edf5000, 0F38a6ced3, 0F3ee1e000, 0F38ebd3e6, 0F3ee47000, 0F38fbe3cd, 0F3ee70000, 0F38d785c2, 0F3ee99000, 0F387e7e00, 0F3eec1000, 0F38f392c5, 0F3eeea000, 0F37d40983, 0F3ef12000, 0F38081a7c, 0F3ef3a000, 0F3784c3ad, 0F3ef61000, 0F38cce923, 0F3ef89000, 0F380f5faf, 0F3efb0000, 0F3891fd38, 0F3efd7000, 0F38ac47bc, 0F3effe000, 0F3897042b, 0F3f012000, 0F392952d2, 0F3f025000, 0F396fced4, 0F3f039000, 0F37f97073, 0F3f04c000, 0F385e9eae, 0F3f05f000, 0F3865c84a, 0F3f072000, 0F38130ba3, 0F3f084000, 0F3979cf16, 0F3f097000, 0F3938cac9, 0F3f0aa000, 0F38c3d2f4, 0F3f0bc000, 0F39755dec, 0F3f0cf000, 0F38e6b467, 0F3f0e1000, 0F395c0fb8, 0F3f0f4000, 0F383ebce0, 0F3f106000, 0F38dcd192, 0F3f118000, 0F39186bdf, 0F3f12a000, 0F392de74c, 0F3f13c000, 0F392f0944, 0F3f14e000, 0F391bff61, 0F3f160000, 0F38e9ed44, 0F3f172000, 0F38686dc8, 0F3f183000, 0F396b99a7, 0F3f195000, 0F39099c89, 0F3f1a7000, 0F37a27673, 0F3f1b8000, 0F390bdaa3, 0F3f1c9000, 0F397069ab, 0F3f1db000, 0F388449ff, 0F3f1ec000, 0F39013538, 0F3f1fd000, 0F392dc268, 0F3f20e000, 0F3947f423, 0F3f21f000, 0F394ff17c, 0F3f230000, 0F3945e10e, 0F3f241000, 0F3929e8f5, 0F3f252000, 0F38f85db0, 0F3f263000, 0F38735f99, 0F3f273000, 0F396c08db, 0F3f284000, 0F3909e600, 0F3f295000, 0F37b4996f, 0F3f2a5000, 0F391233cc, 0F3f2b5000, 0F397cead9, 0F3f2c6000, 0F38adb5cd, 0F3f2d6000, 0F3920261a, 0F3f2e6000, 0F3958ee36, 0F3f2f7000, 0F35aa4905, 0F3f307000, 0F37cbd11e, 0F3f317000, 0F3805fdf4);
readonly_f32 &__math32_LOG_INV_TBL[129] = f32[](0F40000000, 0F3ffe03f8, 0F3ffc0fc1, 0F3ffa232d, 0F3ff83e10, 0F3ff6603e, 0F3ff4898d, 0F3ff2b9d6, 0F3ff0f0f1, 0F3fef2eb7, 0F3fed7304, 0F3febbdb3, 0F3fea0ea1, 0F3fe865ac, 0F3fe6c2b4, 0F3fe52598, 0F3fe38e39, 0F3fe1fc78, 0F3fe07038, 0F3fdee95c, 0F3fdd67c9, 0F3fdbeb62, 0F3fda740e, 0F3fd901b2, 0F3fd79436, 0F3fd62b81, 0F3fd4c77b, 0F3fd3680d, 0F3fd20d21, 0F3fd0b6a0, 0F3fcf6475, 0F3fce168a, 0F3fcccccd, 0F3fcb8728, 0F3fca4588, 0F3fc907da, 0F3fc7ce0c, 0F3fc6980c, 0F3fc565c8, 0F3fc43730, 0F3fc30c31, 0F3fc1e4bc, 0F3fc0c0c1, 0F3fbfa030, 0F3fbe82fa, 0F3fbd6910, 0F3fbc5264, 0F3fbb3ee7, 0F3fba2e8c, 0F3fb92144, 0F3fb81703, 0F3fb70fbb, 0F3fb60b61, 0F3fb509e7, 0F3fb40b41, 0F3fb30f63, 0F3fb21643, 0F3fb11fd4, 0F3fb02c0b, 0F3faf3ade, 0F3fae4c41, 0F3fad602b, 0F3fac7692, 0F3fab8f6a, 0F3faaaaab, 0F3fa9c84a, 0F3fa8e83f, 0F3fa80a81, 0F3fa72f05, 0F3fa655c4, 0F3fa57eb5, 0F3fa4a9cf, 0F3fa3d70a, 0F3fa3065e, 0F3fa237c3, 0F3fa16b31, 0F3fa0a0a1, 0F3f9fd80a, 0F3f9f1166, 0F3f9e4cad, 0F3f9d89d9, 0F3f9cc8e1, 0F3f9c09c1, 0F3f9b4c70, 0F3f9a90e8, 0F3f99d723, 0F3f991f1a, 0F3f9868c8, 0F3f97b426, 0F3f97012e, 0F3f964fda, 0F3f95a025, 0F3f94f209, 0F3f944581, 0F3f939a86, 0F3f92f114, 0F3f924925, 0F3f91a2b4, 0F3f90fdbc, 0F3f905a38, 0F3f8fb824, 0F3f8f177a, 0F3f8e7835, 0F3f8dda52, 0F3f8d3dcb, 0F3f8ca29c, 0F3f8c08c1, 0F3f8b7034, 0F3f8ad8f3, 0F3f8a42f8, 0F3f89ae41, 0F3f891ac7, 0F3f888889, 0F3f87f781, 0F3f8767ab, 0F3f86d905, 0F3f864b8a, 0F3f85bf37, 0F3f853408, 0F3f84a9fa, 0F3f842108, 0F3f839930, 0F3f83126f, 0F3f828cc0, 0F3f820821, 0F3f81848e, 0F3f810204, 0F3f808081, 0F3f800000);

decl function &_gcc_atanh(arg_f32 %ret)(arg_f32 %x);


function &_gcc_atanh(arg_f32 %_gcc_atanh)(arg_f32 %x)
{

@_gcc_atanh_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s2, $s0;
	and_b32	$s1, $s2, 2147483647;
	xor_b32	$s2, $s1, $s2;
	or_b32	$s3, $s2, 2139095040;
	cmp_eq_b1_s32	$c0, $s1, 1065353216;
	cmov_b32	$s3, $c0, $s3, 2143289344;
	mov_b32	$s5, $s1;
	add_ftz_f32	$s4, $s5, $s5;
	sub_ftz_f32	$s5, 0F3f800000, $s5;
	nrcp_f32	$s5, $s5;
	mul_ftz_f32	$s4, $s4, $s5;
	add_ftz_f32	$s5, $s4, 0F3f800000;
	mov_b32	$s6, $s5;
	and_b32	$s5, $s6, 8323072;
	shl_u32	$s7, $s6, 1;
	and_b32	$s7, $s7, 65536;
	add_u32	$s5, $s7, $s5;
	or_b32	$s7, $s5, 1056964608;
	and_b32	$s8, $s6, 4294934528;
	sub_ftz_f32	$s9, 0F3f800000, $s8;
	and_b32	$s8, $s6, 8355840;
	or_b32	$s8, $s8, 1056964608;
	sub_ftz_f32	$s8, $s7, $s8;
	add_ftz_f32	$s9, $s4, $s9;
	or_b32	$s10, $s6, 8388607;
	xor_b32	$s10, $s10, 2139095040;
	add_u32	$s10, $s10, 2139095040;
	and_b32	$s10, $s10, 2139095040;
	mul_ftz_f32	$s9, $s9, $s10;
	mul_ftz_f32	$s9, $s9, 0F3f000000;
	and_b32	$s10, $s6, 8388607;
	sub_ftz_f32	$s8, $s8, $s9;
	or_b32	$s9, $s10, 1056964608;
	sub_ftz_f32	$s7, $s7, $s9;
	bitextract_u32	$s6, $s6, 23, 8;
	add_u32	$s6, $s6, 4294967169;
	cvt_near_f32_s32	$s6, $s6;
	cmp_gt_ftz_b1_f32	$c0, $s6, 0F41c00000;
	cmov_b32	$s7, $c0, $s7, $s8;
	add_ftz_f32	$s8, $s4, 0F40000000;
	nrcp_f32	$s8, $s8;
	mul_ftz_f32	$s9, $s8, $s4;
	add_ftz_f32	$s8, $s9, $s9;
	mul_ftz_f32	$s10, $s8, $s8;
	nfma_f32	$s11, $s10, 0F3c4ccccd, 0F3daaaaab;
	mul_ftz_f32	$s10, $s11, $s10;
	shr_u32	$s5, $s5, 16;
	cvt_u64_u32	$d0, $s5;
	mov_b32	$s5, $s4;
	mul_ftz_f32	$s8, $s8, $s10;
	neg_f32	$s9, $s9;
	shl_u64	$d1, $d0, 2;
	and_b32	$s5, $s5, 2147483647;
	ld_readonly_align(4)_f32	$s10, [&__math32_LOG_INV_TBL][$d1];
	mul_ftz_f32	$s7, $s10, $s7;
	mul_ftz_f32	$s10, $s7, $s7;
	nfma_f32	$s11, $s7, 0F3eaaaaab, 0F3f000000;
	nfma_f32	$s7, $s11, $s10, $s7;
	neg_f32	$s7, $s7;
	nfma_f32	$s9, $s9, $s4, $s8;
	nfma_f32	$s8, $s6, 0F3805fdf4, $s7;
	add_ftz_f32	$s7, $s4, $s9;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s10, $s9), [&__math32_LOGE_TBL][$d0];
	nfma_f32	$s6, $s6, 0F3f317000, $s10;
	add_ftz_f32	$s8, $s9, $s8;
	add_ftz_f32	$s6, $s6, $s8;
	cmp_lt_b1_u32	$c0, $s5, 1031798784;
	cmov_b32	$s6, $c0, $s7, $s6;
	cmp_gt_b1_u32	$c0, $s5, 2139095039;
	cmov_b32	$s6, $c0, $s4, $s6;
	cmp_lt_ftz_b1_f32	$c0, $s4, 0Fbf800000;
	cmov_b32	$s6, $c0, 2143289344, $s6;
	cmp_eq_ftz_b1_f32	$c0, $s4, 0Fbf800000;
	cmov_b32	$s6, $c0, 4286578688, $s6;
	cmp_lt_b1_u32	$c0, $s5, 864026624;
	cmov_b32	$s4, $c0, $s4, $s6;
	mul_ftz_f32	$s4, $s4, 0F3f000000;
	or_b32	$s2, $s4, $s2;
	cmp_lt_b1_u32	$c0, $s1, 1065353216;
	cmov_b32	$s2, $c0, $s2, $s3;
	mul_ftz_f32	$s3, $s0, $s0;
	nfma_f32	$s4, 0F3c18197e, $s3, 0Fbe8ff9e7;
	nfma_f32	$s4, $s4, $s3, 0F3eca00a9;
	nfma_f32	$s5, 0F3ee7d7e1, $s3, 0Fbfc6e215;
	nfma_f32	$s5, $s5, $s3, 0F3f97807f;
	nrcp_f32	$s5, $s5;
	mul_ftz_f32	$s4, $s4, $s5;
	mul_ftz_f32	$s3, $s3, $s0;
	nfma_f32	$s3, $s3, $s4, $s0;
	cmp_lt_b1_u32	$c0, $s1, 1056964608;
	cmov_b32	$s2, $c0, $s3, $s2;
	cmp_lt_b1_u32	$c0, $s1, 956301312;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_atanh];
	ret;
};


decl function &_gcc_asinpi(arg_f32 %ret)(arg_f32 %x);


function &_gcc_asinpi(arg_f32 %_gcc_asinpi)(arg_f32 %x)
{

@_gcc_asinpi_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s3, $s0;
	and_b32	$s1, $s3, 2147483647;
	mov_b32	$s4, $s1;
	mul_ftz_f32	$s5, $s4, $s4;
	sub_ftz_f32	$s2, 0F3f800000, $s4;
	mul_ftz_f32	$s6, $s2, 0F3f000000;
	shr_u32	$s2, $s1, 23;
	add_u32	$s2, $s2, 4294967169;
	cmp_gt_b1_s32	$c0, $s2, -2;
	cmov_b32	$s5, $c0, $s6, $s5;
	nsqrt_f32	$s6, $s5;
	mov_b32	$s7, $s6;
	and_b32	$s7, $s7, 4294901760;
	neg_f32	$s8, $s7;
	nfma_f32	$s8, $s8, $s7, $s5;
	add_ftz_f32	$s9, $s6, $s7;
	nrcp_f32	$s9, $s9;
	mul_ftz_f32	$s8, $s8, $s9;
	nfma_f32	$s9, $s5, 0Fbb81ce6b, 0Fbc5b3fe1;
	nfma_f32	$s8, $s8, 0Fc0000000, 0F33a22168;
	nfma_f32	$s9, $s5, $s9, 0Fbd678bdd;
	nfma_f32	$s9, $s5, $s9, 0F3e3c94dc;
	nfma_f32	$s10, $s5, 0Fbf561f0d, 0F3f8d6fa5;
	nrcp_f32	$s10, $s10;
	mul_ftz_f32	$s9, $s9, $s10;
	mul_ftz_f32	$s5, $s5, $s9;
	add_ftz_f32	$s6, $s6, $s6;
	neg_f32	$s8, $s8;
	nfma_f32	$s6, $s6, $s5, $s8;
	nfma_f32	$s7, $s7, 0Fc0000000, 0F3f490fda;
	sub_ftz_f32	$s6, $s6, $s7;
	sub_ftz_f32	$s6, 0F3f490fda, $s6;
	nfma_f32	$s4, $s4, $s5, $s4;
	cmov_b32	$s4, $c0, $s6, $s4;
	xor_b32	$s3, $s1, $s3;
	mul_ftz_f32	$s4, $s4, 0F3ea2f983;
	or_b32	$s4, $s4, $s3;
	cmp_gt_b1_u32	$c0, $s1, 1065353216;
	cmov_b32	$s4, $c0, 2143289344, $s4;
	or_b32	$s3, $s3, 1056964608;
	cmp_eq_b1_s32	$c0, $s1, 1065353216;
	cmov_b32	$s1, $c0, $s3, $s4;
	mul_ftz_f32	$s0, $s0, 0F3ea2f983;
	cmp_lt_b1_s32	$c0, $s2, -14;
	cmov_b32	$s0, $c0, $s0, $s1;
	st_arg_align(4)_f32	$s0, [%_gcc_asinpi];
	ret;
};


decl function &_gcc_remainder(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y);


function &_gcc_remainder(arg_f32 %_gcc_remainder)(
	arg_f32 %x,
	arg_f32 %y)
{

@_gcc_remainder_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s1, [%x];
	mov_b32	$s0, $s1;
	and_b32	$s4, $s0, 2147483647;
	cmp_le_b1_u32	$c0, $s4, 2139095040;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	mov_b32	$s3, $s1;
	br	@BB0_31;

@BB0_2:
	mov_b32	$s5, 2143289344;
	cmp_ne_b1_s32	$c0, $s4, 2139095040;
	cbr_b1	$c0, @BB0_4;
	// BB#3:
	mov_b32	$s3, $s5;
	br	@BB0_31;

@BB0_4:
	ld_arg_align(4)_f32	$s3, [%y];
	mov_b32	$s2, $s3;
	and_b32	$s6, $s2, 2147483647;
	cmp_gt_b1_u32	$c0, $s6, 2139095040;
	cbr_b1	$c0, @BB0_31;
	// BB#5:
	cmp_ne_b1_s32	$c0, $s6, 2139095040;
	cbr_b1	$c0, @BB0_7;
	// BB#6:
	mov_b32	$s3, $s1;
	br	@BB0_31;

@BB0_7:
	or_b32	$s3, $s2, $s0;
	and_b32	$s3, $s3, 2147483647;
	cmp_eq_b1_s32	$c0, $s3, 0;
	mov_b32	$s3, $s5;
	cbr_b1	$c0, @BB0_31;
	// BB#8:
	cmp_eq_b1_s32	$c0, $s4, 0;
	cmp_eq_b1_s32	$c1, $s6, 0;
	or_b1	$c1, $c0, $c1;
	not_b1	$c1, $c1;
	cbr_b1	$c1, @BB0_10;
	// BB#9:
	cmov_b32	$s3, $c0, $s1, 2143289344;
	br	@BB0_31;

@BB0_10:
	bitextract_u32	$s1, $s2, 23, 8;
	sub_u32	$s3, 48, $s1;
	cvt_near_f32_s32	$s3, $s3;
	cmp_gt_b1_u32	$c0, $s1, 47;
	cmov_b32	$s3, $c0, 0, $s3;
	mov_b32	$s1, $s6;
	cmp_eq_ftz_b1_f32	$c0, $s3, 0F00000000;
	mov_b32	$s7, $s1;
	cbr_b1	$c0, @BB0_12;
	// BB#11:
	abs_f32	$s5, $s3;
	cvt_ftz_s32_f32	$s7, $s5;
	cmp_gt_ftz_b1_f32	$c1, $s5, 0F44800000;
	cmov_b32	$s5, $c1, 1024, $s7;
	neg_s32	$s7, $s5;
	cmp_lt_ftz_b1_f32	$c1, $s3, 0F00000000;
	cmov_b32	$s5, $c1, $s7, $s5;
	add_u32	$s7, $s5, 4294967147;
	and_b32	$s8, $s2, 2139095040;
	cmp_eq_b1_s32	$c1, $s8, 0;
	cmov_b32	$s8, $c1, $s7, $s5;
	and_b32	$s7, $s2, 8388607;
	cvt_near_f32_s32	$s7, $s7;
	cmov_b32	$s7, $c1, $s7, $s1;
	shl_u32	$s9, $s8, 23;
	add_u32	$s9, $s9, $s7;
	bitextract_u32	$s10, $s7, 23, 8;
	add_u32	$s10, $s10, $s8;
	add_u32	$s8, $s10, 4294967169;
	cmp_gt_b1_s32	$c1, $s8, 127;
	cmov_b32	$s8, $c1, 2139095040, $s9;
	sub_u32	$s9, 1, $s10;
	and_b32	$s10, $s9, 31;
	cmp_lt_b1_s32	$c1, $s9, 24;
	cmov_b32	$s10, $c1, $s10, 24;
	cmp_lt_b1_s32	$c1, $s9, 0;
	cmov_b32	$s10, $c1, 0, $s10;
	and_b32	$s7, $s7, 8388607;
	or_b32	$s7, $s7, 8388608;
	shr_u32	$s7, $s7, $s10;
	cmp_gt_b1_s32	$c1, $s9, 0;
	cmov_b32	$s7, $c1, $s7, $s8;
	cvt_near_f32_s32	$s5, $s5;
	cmp_gt_ftz_b1_f32	$c1, $s5, 0F437e0000;
	cmov_b32	$s7, $c1, 2139095040, $s7;

@BB0_12:
	bitextract_u32	$s5, $s0, 23, 8;
	mov_b32	$s8, $s7;
	bitextract_u32	$s8, $s8, 23, 8;
	sub_u32	$s9, $s5, $s8;
	cvt_s64_s32	$d0, $s9;
	mul_u64	$d0, $d0, 715827883;
	shr_u64	$d1, $d0, 63;
	cvt_u32_u64	$s9, $d1;
	shr_s64	$d0, $d0, 33;
	cvt_u32_u64	$s10, $d0;
	add_u32	$s9, $s10, $s9;
	cmp_le_b1_u32	$c1, $s5, $s8;
	cmov_b32	$s5, $c1, 0, $s9;
	mul_u32	$s9, $s5, 12;
	shr_s32	$s8, $s9, 1;
	sub_u32	$s9, $s9, $s8;
	shl_u32	$s9, $s9, 23;
	add_u32	$s9, $s9, 1065353216;
	shl_u32	$s8, $s8, 23;
	add_u32	$s8, $s8, 1065353216;
	mul_ftz_f32	$s8, $s7, $s8;
	mul_ftz_f32	$s8, $s8, $s9;
	cmp_eq_b1_s32	$c2, $s5, 0;
	cmov_b32	$s7, $c2, $s7, $s8;
	mov_b32	$s8, $s7;
	bitextract_u32	$s8, $s8, 23, 8;
	add_u32	$s8, $s8, 4294967063;
	cmp_gt_b1_s32	$c3, $s5, 0;
	cmp_lt_b1_u32	$c1, $s8, 22;
	and_b1	$c3, $c1, $c3;
	mul_ftz_f32	$s8, $s7, 0F38800000;
	cmov_b32	$s9, $c3, $s8, $s7;
	cmp_lt_b1_s32	$c3, $s5, 1;
	cbr_b1	$c3, @BB0_13;
	// BB#14:
	cmov_b32	$s8, $c2, 1065353216, 964689920;

@BB0_15:
	// %.lr.ph26
	nrcp_f32	$s9, $s9;
	mul_ftz_f32	$s9, $s4, $s9;
	mul_ftz_f32	$s10, $s9, 0F38800000;
	cmov_b32	$s9, $c1, $s10, $s9;
	floor_ftz_f32	$s10, $s9;
	mul_ftz_f32	$s9, $s7, $s10;
	mov_b32	$s11, $s10;
	and_b32	$s11, $s11, 4294963200;
	mov_b32	$s12, $s7;
	and_b32	$s12, $s12, 4294963200;
	mul_ftz_f32	$s13, $s12, $s11;
	sub_ftz_f32	$s13, $s13, $s9;
	sub_ftz_f32	$s10, $s10, $s11;
	mul_ftz_f32	$s14, $s12, $s10;
	sub_ftz_f32	$s12, $s7, $s12;
	add_ftz_f32	$s13, $s14, $s13;
	mul_ftz_f32	$s11, $s12, $s11;
	add_ftz_f32	$s11, $s11, $s13;
	mul_ftz_f32	$s10, $s12, $s10;
	add_ftz_f32	$s10, $s10, $s11;
	sub_ftz_f32	$s11, $s4, $s9;
	sub_ftz_f32	$s4, $s4, $s11;
	sub_ftz_f32	$s4, $s4, $s9;
	sub_ftz_f32	$s4, $s4, $s10;
	add_ftz_f32	$s4, $s11, $s4;
	add_ftz_f32	$s9, $s7, $s4;
	cmp_lt_ftz_b1_f32	$c1, $s4, 0F00000000;
	cmov_b32	$s9, $c1, $s9, $s4;
	sub_ftz_f32	$s4, $s4, $s7;
	cmp_ge_ftz_b1_f32	$c1, $s9, $s7;
	cmov_b32	$s4, $c1, $s4, $s9;
	mov_b1	$c1, 0;
	mul_ftz_f32	$s7, $s8, $s7;
	add_u32	$s5, $s5, 4294967295;
	cmp_ne_b1_s32	$c2, $s5, 0;
	mov_b32	$s9, $s7;
	cbr_b1	$c2, @BB0_15;
	br	@BB0_16;

@BB0_13:
	mov_b32	$s7, $s9;

@BB0_16:
	// %._crit_edge27
	mul_ftz_f32	$s5, $s7, 0F38800000;
	mov_b32	$s8, $s7;
	bitextract_u32	$s9, $s8, 23, 8;
	add_u32	$s9, $s9, 4294967063;
	cmp_lt_b1_u32	$c1, $s9, 22;
	cmov_b32	$s5, $c1, $s5, $s7;
	nrcp_f32	$s5, $s5;
	mul_ftz_f32	$s5, $s4, $s5;
	mul_ftz_f32	$s9, $s5, 0F38800000;
	cmov_b32	$s5, $c1, $s9, $s5;
	and_b32	$s8, $s8, 4294963200;
	mov_b32	$s10, $s8;
	floor_ftz_f32	$s11, $s5;
	sub_ftz_f32	$s9, $s7, $s10;
	mul_ftz_f32	$s8, $s7, $s11;
	mov_b32	$s12, $s11;
	and_b32	$s12, $s12, 4294963200;
	mul_ftz_f32	$s13, $s10, $s12;
	sub_ftz_f32	$s13, $s13, $s8;
	sub_ftz_f32	$s11, $s11, $s12;
	mul_ftz_f32	$s10, $s10, $s11;
	add_ftz_f32	$s10, $s10, $s13;
	mul_ftz_f32	$s12, $s9, $s12;
	add_ftz_f32	$s10, $s12, $s10;
	mul_ftz_f32	$s9, $s9, $s11;
	add_ftz_f32	$s9, $s9, $s10;
	sub_ftz_f32	$s10, $s4, $s8;
	sub_ftz_f32	$s11, $s4, $s10;
	sub_ftz_f32	$s8, $s11, $s8;
	sub_ftz_f32	$s8, $s8, $s9;
	add_ftz_f32	$s8, $s10, $s8;
	add_ftz_f32	$s9, $s7, $s8;
	cmp_lt_ftz_b1_f32	$c1, $s8, 0F00000000;
	cmov_b32	$s8, $c1, $s9, $s8;
	sub_ftz_f32	$s9, $s8, $s7;
	cmp_ltu_ftz_b1_f32	$c2, $s8, $s7;
	cmov_b32	$s10, $c2, $s8, $s9;
	cmov_b32	$s9, $c1, 4294967295, 0;
	mov_b32	$s11, $s4;
	bitextract_u32	$s11, $s11, 23, 8;
	cvt_near_f32_s32	$s11, $s11;
	cmp_eq_ftz_b1_f32	$c1, $s11, 0F00000000;
	cmov_b32	$s4, $c1, $s4, $s10;
	cmp_ge_ftz_b1_f32	$c1, $s8, $s7;
	cvt_u32_b1	$s8, $c1;
	cvt_ftz_s32_f32	$s10, $s3;
	cvt_ftz_downi_s32_f32	$s5, $s5;
	add_u32	$s5, $s9, $s5;
	add_u32	$s5, $s5, $s8;
	shl_u32	$s5, $s5, $s10;
	cmp_gt_ftz_b1_f32	$c1, $s3, 0F41f00000;
	cmov_b32	$s3, $c1, 0, $s5;
	mov_b32	$s5, 0;
	mov_b32	$s9, $s4;
	cmp_eq_b1_s32	$c1, $s9, 0;
	cbr_b1	$c1, @BB0_24;
	// BB#17:
	cbr_b1	$c0, @BB0_24;
	// BB#18:
	and_b32	$s11, $s9, 8388607;
	firstbit_u32_u32	$s7, $s11;
	sub_u32	$s7, 4294967178, $s7;
	cmp_eq_b1_s32	$c0, $s11, 0;
	cmov_b32	$s7, $c0, 4294967146, $s7;
	and_b32	$s13, $s9, 2147483647;
	shr_u32	$s8, $s13, 23;
	add_u32	$s8, $s8, 4294967169;
	cmp_lt_b1_u32	$c0, $s13, 8388608;
	cmov_b32	$s7, $c0, $s7, $s8;
	cmp_eq_b1_s32	$c0, $s13, 0;
	cmp_gt_b1_u32	$c1, $s13, 2139095040;
	or_b1	$c0, $c1, $c0;
	cmov_b32	$s7, $c0, 2147483648, $s7;
	cmp_eq_b1_s32	$c0, $s13, 2139095040;
	cmov_b32	$s10, $c0, 2147483647, $s7;
	and_b32	$s12, $s2, 8388607;
	firstbit_u32_u32	$s7, $s12;
	sub_u32	$s7, 4294967178, $s7;
	cmp_eq_b1_s32	$c0, $s12, 0;
	cmov_b32	$s7, $c0, 4294967146, $s7;
	shr_u32	$s8, $s6, 23;
	add_u32	$s8, $s8, 4294967169;
	cmp_lt_b1_u32	$c0, $s6, 8388608;
	cmov_b32	$s8, $c0, $s7, $s8;
	neg_s32	$s6, $s10;
	cvt_near_f32_s32	$s6, $s6;
	abs_f32	$s7, $s6;
	cvt_ftz_s32_f32	$s14, $s7;
	cmp_gt_ftz_b1_f32	$c0, $s7, 0F44800000;
	cmov_b32	$s7, $c0, 1024, $s14;
	neg_s32	$s14, $s7;
	cmp_lt_ftz_b1_f32	$c0, $s6, 0F00000000;
	cmov_b32	$s7, $c0, $s14, $s7;
	mov_b32	$s6, $s13;
	cvt_near_f32_s32	$s11, $s11;
	and_b32	$s13, $s9, 2139095040;
	cmp_eq_b1_s32	$c0, $s13, 0;
	cmov_b32	$s6, $c0, $s11, $s6;
	add_u32	$s11, $s7, 4294967147;
	cmov_b32	$s13, $c0, $s11, $s7;
	neg_s32	$s11, $s8;
	cvt_near_f32_s32	$s11, $s11;
	abs_f32	$s14, $s11;
	cvt_ftz_s32_f32	$s15, $s14;
	cmp_gt_ftz_b1_f32	$c0, $s14, 0F44800000;
	cmov_b32	$s14, $c0, 1024, $s15;
	neg_s32	$s15, $s14;
	cmp_lt_ftz_b1_f32	$c0, $s11, 0F00000000;
	cmov_b32	$s11, $c0, $s15, $s14;
	bitextract_u32	$s14, $s6, 23, 8;
	shl_u32	$s15, $s13, 23;
	add_u32	$s15, $s15, $s6;
	add_u32	$s14, $s14, $s13;
	add_u32	$s13, $s14, 4294967169;
	cmp_gt_b1_s32	$c0, $s13, 127;
	cmov_b32	$s13, $c0, 2139095040, $s15;
	sub_u32	$s14, 1, $s14;
	and_b32	$s15, $s14, 31;
	cmp_lt_b1_s32	$c0, $s14, 24;
	cmov_b32	$s16, $c0, $s15, 24;
	cvt_near_f32_s32	$s12, $s12;
	and_b32	$s2, $s2, 2139095040;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmov_b32	$s2, $c0, $s12, $s1;
	add_u32	$s12, $s11, 4294967147;
	cmov_b32	$s15, $c0, $s12, $s11;
	cmp_lt_b1_s32	$c1, $s14, 0;
	cmov_b32	$s12, $c1, 0, $s16;
	and_b32	$s6, $s6, 8388607;
	or_b32	$s6, $s6, 8388608;
	shr_u32	$s6, $s6, $s12;
	cmp_gt_b1_s32	$c1, $s14, 0;
	cmov_b32	$s12, $c1, $s6, $s13;
	bitextract_u32	$s6, $s2, 23, 8;
	add_u32	$s6, $s6, 4294967169;
	shl_u32	$s13, $s15, 23;
	add_u32	$s13, $s13, $s2;
	add_u32	$s14, $s15, $s6;
	cmp_gt_b1_s32	$c1, $s14, 127;
	cmov_b32	$s13, $c1, 2139095040, $s13;
	sub_u32	$s14, 4294967170, $s14;
	and_b32	$s15, $s14, 31;
	cmp_lt_b1_s32	$c1, $s14, 24;
	cmov_b32	$s15, $c1, $s15, 24;
	cvt_near_f32_s32	$s7, $s7;
	cmp_gt_ftz_b1_f32	$c1, $s7, 0F437e0000;
	cmov_b32	$s12, $c1, 2139095040, $s12;
	cmp_lt_b1_s32	$c1, $s14, 0;
	cmov_b32	$s15, $c1, 0, $s15;
	and_b32	$s7, $s2, 8388607;
	or_b32	$s7, $s7, 8388608;
	shr_u32	$s15, $s7, $s15;
	cmp_gt_b1_s32	$c1, $s14, 0;
	cmov_b32	$s13, $c1, $s15, $s13;
	and_b32	$s14, $s9, 2147483648;
	mov_b32	$s9, $s12;
	or_b32	$s14, $s9, $s14;
	cmp_lt_b1_s32	$c1, $s9, 2139095041;
	cmov_b32	$s9, $c1, $s14, $s12;
	cvt_near_f32_s32	$s11, $s11;
	cmp_gt_ftz_b1_f32	$c1, $s11, 0F437e0000;
	cmov_b32	$s12, $c1, 2139095040, $s13;
	sub_ftz_f32	$s11, $s9, $s12;
	cmp_ge_ftz_b1_f32	$c1, $s9, $s12;
	cmov_b32	$s11, $c1, $s11, $s9;
	cvt_u32_b1	$s9, $c1;
	sub_u32	$s10, $s10, $s8;
	cmp_ge_b1_s32	$c1, $s10, 1;
	cbr_b1	$c1, @BB0_19;
	br	@BB0_21;

@BB0_19:
	mov_b32	$s13, $s10;

@BB0_20:
	// %.lr.ph
	add_ftz_f32	$s11, $s11, $s11;
	sub_ftz_f32	$s14, $s11, $s12;
	cmp_ge_ftz_b1_f32	$c1, $s11, $s12;
	cmov_b32	$s11, $c1, $s14, $s11;
	cvt_u32_b1	$s14, $c1;
	shl_u32	$s9, $s9, 1;
	or_b32	$s9, $s14, $s9;
	add_u32	$s13, $s13, 4294967295;
	cmp_gt_b1_s32	$c1, $s13, 0;
	cbr_b1	$c1, @BB0_20;

@BB0_21:
	// %._crit_edge
	cvt_near_f32_s32	$s8, $s8;
	abs_f32	$s12, $s8;
	cvt_ftz_s32_f32	$s13, $s12;
	cmp_gt_ftz_b1_f32	$c1, $s12, 0F44800000;
	cmov_b32	$s12, $c1, 1024, $s13;
	neg_s32	$s13, $s12;
	cmp_lt_ftz_b1_f32	$c1, $s8, 0F00000000;
	cmov_b32	$s12, $c1, $s13, $s12;
	add_u32	$s13, $s12, 4294967147;
	mov_b32	$s8, $s11;
	and_b32	$s11, $s8, 2139095040;
	cmp_eq_b1_s32	$c1, $s11, 0;
	cmov_b32	$s13, $c1, $s13, $s12;
	and_b32	$s11, $s8, 2147483647;
	and_b32	$s14, $s8, 8388607;
	cvt_near_f32_s32	$s14, $s14;
	cmov_b32	$s11, $c1, $s14, $s11;
	shl_u32	$s14, $s13, 23;
	add_u32	$s14, $s14, $s11;
	bitextract_u32	$s15, $s11, 23, 8;
	add_u32	$s15, $s15, $s13;
	add_u32	$s13, $s15, 4294967169;
	cmp_gt_b1_s32	$c1, $s13, 127;
	cmov_b32	$s13, $c1, 2139095040, $s14;
	sub_u32	$s14, 1, $s15;
	and_b32	$s15, $s14, 31;
	cmp_lt_b1_s32	$c1, $s14, 24;
	cmov_b32	$s15, $c1, $s15, 24;
	cmp_lt_b1_s32	$c1, $s14, 0;
	cmov_b32	$s15, $c1, 0, $s15;
	and_b32	$s11, $s11, 8388607;
	or_b32	$s11, $s11, 8388608;
	shr_u32	$s11, $s11, $s15;
	cmp_gt_b1_s32	$c1, $s14, 0;
	cmov_b32	$s11, $c1, $s11, $s13;
	cvt_near_f32_s32	$s12, $s12;
	cmp_gt_ftz_b1_f32	$c1, $s12, 0F437e0000;
	cmov_b32	$s11, $c1, 2139095040, $s11;
	and_b32	$s12, $s8, 2147483648;
	mov_b32	$s8, $s11;
	or_b32	$s12, $s8, $s12;
	cmp_lt_b1_s32	$c1, $s8, 2139095041;
	cmov_b32	$s8, $c1, $s12, $s11;
	cmp_gt_b1_s32	$c1, $s10, -1;
	cmov_b32	$s9, $c1, $s9, 0;
	cmov_b32	$s4, $c1, $s8, $s4;
	add_u32	$s3, $s9, $s3;
	mov_b32	$s8, $s4;
	and_b32	$s9, $s8, 2080374784;
	cmp_gt_b1_u32	$c1, $s9, 201326591;
	cbr_b1	$c1, @BB0_22;
	// BB#23:
	and_b32	$s1, $s8, 2147483647;
	and_b32	$s4, $s8, 8388607;
	cvt_near_f32_s32	$s4, $s4;
	and_b32	$s5, $s8, 2139095040;
	cmp_eq_b1_s32	$c1, $s5, 0;
	cmov_b32	$s1, $c1, $s4, $s1;
	cmov_b32	$s9, $c1, 4294967195, 48;
	cmov_b32	$s5, $c0, 4294967195, 48;
	mov_b32	$s4, $s1;
	bitextract_u32	$s1, $s4, 23, 8;
	add_u32	$s10, $s9, $s1;
	sub_u32	$s1, 1, $s10;
	and_b32	$s11, $s1, 31;
	cmp_lt_b1_s32	$c0, $s1, 24;
	cmov_b32	$s11, $c0, $s11, 24;
	shl_u32	$s9, $s9, 23;
	add_u32	$s9, $s4, $s9;
	add_u32	$s10, $s10, 4294967169;
	cmp_gt_b1_s32	$c0, $s10, 127;
	cmov_b32	$s9, $c0, 2139095040, $s9;
	cmp_lt_b1_s32	$c0, $s1, 0;
	cmov_b32	$s10, $c0, 0, $s11;
	shl_u32	$s11, $s5, 23;
	add_u32	$s2, $s2, $s11;
	add_u32	$s5, $s6, $s5;
	cmp_gt_b1_s32	$c0, $s5, 127;
	cmov_b32	$s2, $c0, 2139095040, $s2;
	sub_u32	$s5, 4294967170, $s5;
	and_b32	$s6, $s5, 31;
	cmp_lt_b1_s32	$c0, $s5, 24;
	cmov_b32	$s6, $c0, $s6, 24;
	and_b32	$s4, $s4, 8388607;
	or_b32	$s4, $s4, 8388608;
	shr_u32	$s4, $s4, $s10;
	cmp_gt_b1_s32	$c0, $s1, 0;
	cmov_b32	$s1, $c0, $s4, $s9;
	cmp_lt_b1_s32	$c0, $s5, 0;
	cmov_b32	$s4, $c0, 0, $s6;
	shr_u32	$s4, $s7, $s4;
	cmp_gt_b1_s32	$c0, $s5, 0;
	cmov_b32	$s7, $c0, $s4, $s2;
	and_b32	$s4, $s8, 2147483648;
	mov_b32	$s2, $s1;
	or_b32	$s4, $s2, $s4;
	cmp_lt_b1_s32	$c0, $s2, 2139095041;
	cmov_b32	$s4, $c0, $s4, $s1;
	mov_b32	$s5, 3258974208;
	br	@BB0_24;

@BB0_22:
	mov_b32	$s7, $s1;

@BB0_24:
	add_ftz_f32	$s1, $s4, $s4;
	cmp_gt_ftz_b1_f32	$c0, $s1, $s7;
	cbr_b1	$c0, @BB0_27;
	// BB#25:
	cmp_neu_ftz_b1_f32	$c0, $s1, $s7;
	cbr_b1	$c0, @BB0_28;
	// BB#26:
	and_b32	$s1, $s3, 1;
	cvt_b1_u32	$c0, $s1;
	cmp_ne_b1_b1	$c0, $c0, 1;
	cbr_b1	$c0, @BB0_28;

@BB0_27:
	sub_ftz_f32	$s4, $s4, $s7;

@BB0_28:
	cmp_eq_ftz_b1_f32	$c0, $s5, 0F00000000;
	cbr_b1	$c0, @BB0_30;
	// BB#29:
	abs_f32	$s1, $s5;
	cvt_ftz_s32_f32	$s2, $s1;
	cmp_gt_ftz_b1_f32	$c0, $s1, 0F44800000;
	cmov_b32	$s1, $c0, 1024, $s2;
	neg_s32	$s2, $s1;
	cmp_lt_ftz_b1_f32	$c0, $s5, 0F00000000;
	cmov_b32	$s2, $c0, $s2, $s1;
	add_u32	$s3, $s2, 4294967147;
	mov_b32	$s1, $s4;
	and_b32	$s4, $s1, 2139095040;
	cmp_eq_b1_s32	$c0, $s4, 0;
	cmov_b32	$s4, $c0, $s3, $s2;
	and_b32	$s3, $s1, 2147483647;
	and_b32	$s5, $s1, 8388607;
	cvt_near_f32_s32	$s5, $s5;
	cmov_b32	$s3, $c0, $s5, $s3;
	shl_u32	$s5, $s4, 23;
	add_u32	$s5, $s5, $s3;
	bitextract_u32	$s6, $s3, 23, 8;
	add_u32	$s6, $s6, $s4;
	add_u32	$s4, $s6, 4294967169;
	cmp_gt_b1_s32	$c0, $s4, 127;
	cmov_b32	$s4, $c0, 2139095040, $s5;
	sub_u32	$s5, 1, $s6;
	and_b32	$s6, $s5, 31;
	cmp_lt_b1_s32	$c0, $s5, 24;
	cmov_b32	$s6, $c0, $s6, 24;
	cmp_lt_b1_s32	$c0, $s5, 0;
	cmov_b32	$s6, $c0, 0, $s6;
	and_b32	$s3, $s3, 8388607;
	or_b32	$s3, $s3, 8388608;
	shr_u32	$s3, $s3, $s6;
	cmp_gt_b1_s32	$c0, $s5, 0;
	cmov_b32	$s3, $c0, $s3, $s4;
	cvt_near_f32_s32	$s2, $s2;
	cmp_gt_ftz_b1_f32	$c0, $s2, 0F437e0000;
	cmov_b32	$s2, $c0, 2139095040, $s3;
	and_b32	$s3, $s1, 2147483648;
	mov_b32	$s1, $s2;
	or_b32	$s3, $s1, $s3;
	cmp_lt_b1_s32	$c0, $s1, 2139095041;
	cmov_b32	$s4, $c0, $s3, $s2;

@BB0_30:
	mov_b32	$s1, $s4;
	xor_b32	$s1, $s1, 2147483648;
	cmp_lt_b1_s32	$c0, $s0, 0;
	cmov_b32	$s3, $c0, $s1, $s4;

@BB0_31:
	st_arg_align(4)_f32	$s3, [%_gcc_remainder];
	ret;
};


decl function &_gcc_asin(arg_f32 %ret)(arg_f32 %x);


function &_gcc_asin(arg_f32 %_gcc_asin)(arg_f32 %x)
{

@_gcc_asin_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s3, $s0;
	and_b32	$s1, $s3, 2147483647;
	mov_b32	$s4, $s1;
	mul_ftz_f32	$s5, $s4, $s4;
	sub_ftz_f32	$s2, 0F3f800000, $s4;
	mul_ftz_f32	$s6, $s2, 0F3f000000;
	shr_u32	$s2, $s1, 23;
	add_u32	$s2, $s2, 4294967169;
	cmp_gt_b1_s32	$c0, $s2, -2;
	cmov_b32	$s5, $c0, $s6, $s5;
	nsqrt_f32	$s6, $s5;
	mov_b32	$s7, $s6;
	and_b32	$s7, $s7, 4294901760;
	neg_f32	$s8, $s7;
	nfma_f32	$s8, $s8, $s7, $s5;
	add_ftz_f32	$s9, $s6, $s7;
	nrcp_f32	$s9, $s9;
	mul_ftz_f32	$s8, $s8, $s9;
	nfma_f32	$s9, $s5, 0Fbb81ce6b, 0Fbc5b3fe1;
	nfma_f32	$s8, $s8, 0Fc0000000, 0F33a22168;
	nfma_f32	$s9, $s5, $s9, 0Fbd678bdd;
	nfma_f32	$s9, $s5, $s9, 0F3e3c94dc;
	nfma_f32	$s10, $s5, 0Fbf561f0d, 0F3f8d6fa5;
	nrcp_f32	$s10, $s10;
	mul_ftz_f32	$s9, $s9, $s10;
	mul_ftz_f32	$s5, $s5, $s9;
	add_ftz_f32	$s6, $s6, $s6;
	neg_f32	$s8, $s8;
	nfma_f32	$s6, $s6, $s5, $s8;
	nfma_f32	$s7, $s7, 0Fc0000000, 0F3f490fda;
	sub_ftz_f32	$s6, $s6, $s7;
	sub_ftz_f32	$s6, 0F3f490fda, $s6;
	nfma_f32	$s4, $s4, $s5, $s4;
	cmov_b32	$s4, $c0, $s6, $s4;
	xor_b32	$s3, $s1, $s3;
	or_b32	$s4, $s4, $s3;
	cmp_gt_b1_u32	$c0, $s1, 1065353216;
	cmov_b32	$s4, $c0, 2143289344, $s4;
	or_b32	$s3, $s3, 1070141403;
	cmp_eq_b1_s32	$c0, $s1, 1065353216;
	cmov_b32	$s1, $c0, $s3, $s4;
	cmp_lt_b1_s32	$c0, $s2, -14;
	cmov_b32	$s0, $c0, $s0, $s1;
	st_arg_align(4)_f32	$s0, [%_gcc_asin];
	ret;
};


decl function &_gcc_minmag(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y);


function &_gcc_minmag(arg_f32 %_gcc_minmag)(
	arg_f32 %x,
	arg_f32 %y)
{

@_gcc_minmag_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%y];
	and_b32	$s3, $s0, 2147483647;
	ld_arg_align(4)_f32	$s1, [%x];
	and_b32	$s5, $s1, 2147483647;
	cmp_lt_b1_u32	$c0, $s5, $s3;
	cvt_u32_b1	$s2, $c0;
	cmp_lt_b1_u32	$c0, $s3, $s5;
	cvt_u32_b1	$s4, $c0;
	cmp_eq_b1_s32	$c0, $s5, $s3;
	cvt_u32_b1	$s3, $c0;
	or_b32	$s5, $s0, $s1;
	neg_s32	$s3, $s3;
	and_b32	$s3, $s5, $s3;
	neg_s32	$s4, $s4;
	and_b32	$s0, $s0, $s4;
	neg_s32	$s2, $s2;
	and_b32	$s1, $s1, $s2;
	or_b32	$s0, $s1, $s0;
	or_b32	$s0, $s0, $s3;
	st_arg_align(4)_f32	$s0, [%_gcc_minmag];
	ret;
};

align(8) readonly_f32 &__math32_LOG2_TBL[258] = f32[](0F00000000, 0F00000000, 0F3c37c000, 0F374a16dd, 0F3cb70000, 0F37f2d0b8, 0F3d08c000, 0F381a3aa2, 0F3d35c000, 0F37b4dd63, 0F3d624000, 0F383f5721, 0F3d874000, 0F384e27e8, 0F3d9d4000, 0F380bf749, 0F3db30000, 0F387dbeb2, 0F3dc8c000, 0F37216e46, 0F3dde4000, 0F3684815b, 0F3df38000, 0F383b045f, 0F3e044000, 0F390b119b, 0F3e0ec000, 0F391a32ea, 0F3e194000, 0F38ba789e, 0F3e238000, 0F39553f30, 0F3e2e0000, 0F3651cfde, 0F3e380000, 0F39685a9d, 0F3e424000, 0F39057a05, 0F3e4c4000, 0F395ba0ef, 0F3e564000, 0F396bc5b6, 0F3e604000, 0F3936d9bb, 0F3e6a4000, 0F38772619, 0F3e740000, 0F39017ce9, 0F3e7dc000, 0F3902d720, 0F3e83c000, 0F38856dd8, 0F3e888000, 0F3941f6b4, 0F3e8d4000, 0F3980b652, 0F3e920000, 0F3980f561, 0F3e96c000, 0F39443f13, 0F3e9b8000, 0F38926752, 0F3ea00000, 0F39c8c763, 0F3ea4c000, 0F391e12f3, 0F3ea94000, 0F39b7bf89, 0F3eae0000, 0F36d1cfde, 0F3eb28000, 0F38c7f233, 0F3eb70000, 0F39087367, 0F3ebb8000, 0F38e95d3f, 0F3ec00000, 0F38256316, 0F3ec44000, 0F39d38e5c, 0F3ec8c000, 0F396ea247, 0F3ecd4000, 0F350e4788, 0F3ed18000, 0F395d829f, 0F3ed5c000, 0F39c30f2f, 0F3eda0000, 0F39fd7ee7, 0F3ede8000, 0F3872e9e7, 0F3ee2c000, 0F3897d694, 0F3ee70000, 0F3824923a, 0F3eeb0000, 0F39ea7c06, 0F3eef4000, 0F39a7fa88, 0F3ef38000, 0F391aa879, 0F3ef78000, 0F39dace65, 0F3efbc000, 0F39215a32, 0F3effc000, 0F39af3350, 0F3f01c000, 0F3a7b5172, 0F3f040000, 0F389cf27f, 0F3f060000, 0F3902806b, 0F3f080000, 0F3909d8a9, 0F3f0a0000, 0F38c9faa1, 0F3f0c0000, 0F37a33dca, 0F3f0dc000, 0F3a6623d2, 0F3f0fc000, 0F3a3c7a61, 0F3f11c000, 0F3a083a84, 0F3f13c000, 0F39930161, 0F3f15c000, 0F35d1cfde, 0F3f178000, 0F3a2d0ebd, 0F3f198000, 0F399f1aad, 0F3f1b4000, 0F3a67ff6d, 0F3f1d4000, 0F39ecfea8, 0F3f1f0000, 0F3a7b26f3, 0F3f210000, 0F39ec1fa6, 0F3f22c000, 0F3a675314, 0F3f24c000, 0F399e12f3, 0F3f268000, 0F3a2d4b66, 0F3f288000, 0F370c3845, 0F3f2a4000, 0F399ba329, 0F3f2c0000, 0F3a1044d3, 0F3f2dc000, 0F3a49a196, 0F3f2f8000, 0F3a79fe83, 0F3f318000, 0F3905c7aa, 0F3f334000, 0F39802391, 0F3f350000, 0F39abe796, 0F3f36c000, 0F39c65a9d, 0F3f388000, 0F39cfa6c5, 0F3f3a4000, 0F39c7f593, 0F3f3c0000, 0F39af6ff7, 0F3f3dc000, 0F39863e4d, 0F3f3f8000, 0F391910c1, 0F3f414000, 0F369d5be7, 0F3f42c000, 0F3a541616, 0F3f448000, 0F3a1ee960, 0F3f464000, 0F39c38ed2, 0F3f480000, 0F38e61600, 0F3f498000, 0F3a4fedb4, 0F3f4b4000, 0F39f6b4ab, 0F3f4d0000, 0F38f8d3b0, 0F3f4e8000, 0F3a3b3faa, 0F3f504000, 0F399fb693, 0F3f51c000, 0F3a5cfe71, 0F3f538000, 0F39c5740b, 0F3f550000, 0F3a611eb0, 0F3f56c000, 0F39b079c4, 0F3f584000, 0F3a4824d7, 0F3f5a0000, 0F39439a54, 0F3f5b8000, 0F3a1291ea, 0F3f5d0000, 0F3a6d3673, 0F3f5ec000, 0F3981c731, 0F3f604000, 0F3a0da88f, 0F3f61c000, 0F3a53945c, 0F3f638000, 0F3895ae91, 0F3f650000, 0F3996372a, 0F3f668000, 0F39f9a832, 0F3f680000, 0F3a27eda4, 0F3f698000, 0F3a4c764f, 0F3f6b0000, 0F3a6a7c06, 0F3f6cc000, 0F370321eb, 0F3f6e4000, 0F3899ab3f, 0F3f6fc000, 0F38f02086, 0F3f714000, 0F390a1707, 0F3f72c000, 0F39031e44, 0F3f744000, 0F38c6b362, 0F3f75c000, 0F382bf195, 0F3f770000, 0F3a768e36, 0F3f788000, 0F3a5c503b, 0F3f7a0000, 0F3a3c1179, 0F3f7b8000, 0F3a15de1d, 0F3f7d0000, 0F39d3845d, 0F3f7e8000, 0F395f263f, 0F3f800000, 0F00000000);
//readonly_f32 &__math32_LOG_INV_TBL[129] = f32[](0F40000000, 0F3ffe03f8, 0F3ffc0fc1, 0F3ffa232d, 0F3ff83e10, 0F3ff6603e, 0F3ff4898d, 0F3ff2b9d6, 0F3ff0f0f1, 0F3fef2eb7, 0F3fed7304, 0F3febbdb3, 0F3fea0ea1, 0F3fe865ac, 0F3fe6c2b4, 0F3fe52598, 0F3fe38e39, 0F3fe1fc78, 0F3fe07038, 0F3fdee95c, 0F3fdd67c9, 0F3fdbeb62, 0F3fda740e, 0F3fd901b2, 0F3fd79436, 0F3fd62b81, 0F3fd4c77b, 0F3fd3680d, 0F3fd20d21, 0F3fd0b6a0, 0F3fcf6475, 0F3fce168a, 0F3fcccccd, 0F3fcb8728, 0F3fca4588, 0F3fc907da, 0F3fc7ce0c, 0F3fc6980c, 0F3fc565c8, 0F3fc43730, 0F3fc30c31, 0F3fc1e4bc, 0F3fc0c0c1, 0F3fbfa030, 0F3fbe82fa, 0F3fbd6910, 0F3fbc5264, 0F3fbb3ee7, 0F3fba2e8c, 0F3fb92144, 0F3fb81703, 0F3fb70fbb, 0F3fb60b61, 0F3fb509e7, 0F3fb40b41, 0F3fb30f63, 0F3fb21643, 0F3fb11fd4, 0F3fb02c0b, 0F3faf3ade, 0F3fae4c41, 0F3fad602b, 0F3fac7692, 0F3fab8f6a, 0F3faaaaab, 0F3fa9c84a, 0F3fa8e83f, 0F3fa80a81, 0F3fa72f05, 0F3fa655c4, 0F3fa57eb5, 0F3fa4a9cf, 0F3fa3d70a, 0F3fa3065e, 0F3fa237c3, 0F3fa16b31, 0F3fa0a0a1, 0F3f9fd80a, 0F3f9f1166, 0F3f9e4cad, 0F3f9d89d9, 0F3f9cc8e1, 0F3f9c09c1, 0F3f9b4c70, 0F3f9a90e8, 0F3f99d723, 0F3f991f1a, 0F3f9868c8, 0F3f97b426, 0F3f97012e, 0F3f964fda, 0F3f95a025, 0F3f94f209, 0F3f944581, 0F3f939a86, 0F3f92f114, 0F3f924925, 0F3f91a2b4, 0F3f90fdbc, 0F3f905a38, 0F3f8fb824, 0F3f8f177a, 0F3f8e7835, 0F3f8dda52, 0F3f8d3dcb, 0F3f8ca29c, 0F3f8c08c1, 0F3f8b7034, 0F3f8ad8f3, 0F3f8a42f8, 0F3f89ae41, 0F3f891ac7, 0F3f888889, 0F3f87f781, 0F3f8767ab, 0F3f86d905, 0F3f864b8a, 0F3f85bf37, 0F3f853408, 0F3f84a9fa, 0F3f842108, 0F3f839930, 0F3f83126f, 0F3f828cc0, 0F3f820821, 0F3f81848e, 0F3f810204, 0F3f808081, 0F3f800000);

decl function &_gcc_log2(arg_f32 %ret)(arg_f32 %x);


function &_gcc_log2(arg_f32 %_gcc_log2)(arg_f32 %x)
{

@_gcc_log2_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s1, $s0;
	or_b32	$s2, $s1, 1065353216;
	add_ftz_f32	$s2, $s2, 0Fbf800000;
	shr_u32	$s3, $s1, 23;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cmov_b32	$s9, $c0, $s2, $s1;
	add_u32	$s3, $s3, 4294967169;
	shr_u32	$s2, $s2, 23;
	add_u32	$s2, $s2, 4294967043;
	cmov_b32	$s10, $c0, $s2, $s3;
	shl_u32	$s3, $s9, 1;
	add_ftz_f32	$s2, $s0, 0Fbf800000;
	add_ftz_f32	$s4, $s2, 0F40000000;
	nrcp_f32	$s4, $s4;
	mul_ftz_f32	$s4, $s2, $s4;
	and_b32	$s11, $s9, 8323072;
	and_b32	$s12, $s3, 65536;
	add_ftz_f32	$s6, $s4, $s4;
	mul_ftz_f32	$s7, $s6, $s6;
	mov_b32	$s3, $s2;
	and_b32	$s3, $s3, 4294901760;
	nfma_f32	$s8, $s7, 0F3c4ccccd, 0F3daaaaab;
	abs_f32	$s5, $s2;
	add_u32	$s11, $s12, $s11;
	or_b32	$s12, $s11, 1056964608;
	and_b32	$s9, $s9, 8388607;
	or_b32	$s9, $s9, 1056964608;
	mov_b32	$s13, $s9;
	cvt_near_f32_s32	$s10, $s10;
	sub_ftz_f32	$s9, $s2, $s3;
	sub_ftz_f32	$s12, $s12, $s13;
	shr_u32	$s11, $s11, 16;
	cvt_u64_u32	$d0, $s11;
	shl_u64	$d1, $d0, 2;
	ld_readonly_align(4)_f32	$s11, [&__math32_LOG_INV_TBL][$d1];
	mul_ftz_f32	$s11, $s12, $s11;
	mul_ftz_f32	$s12, $s11, $s11;
	nfma_f32	$s13, $s11, 0F3eaaaaab, 0F3f000000;
	nfma_f32	$s11, $s13, $s12, $s11;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s12, $s13), [&__math32_LOG2_TBL][$d0];
	nfma_f32	$s11, $s11, 0Fbfb8aa3b, $s13;
	add_ftz_f32	$s10, $s10, $s12;
	mul_ftz_f32	$s7, $s8, $s7;
	mul_ftz_f32	$s2, $s2, $s4;
	neg_f32	$s2, $s2;
	nfma_f32	$s2, $s6, $s7, $s2;
	add_ftz_f32	$s4, $s9, $s2;
	mul_ftz_f32	$s6, $s4, 0F3baa3b29;
	add_ftz_f32	$s2, $s11, $s10;
	nfma_f32	$s6, $s3, 0F3baa3b29, $s6;
	nfma_f32	$s4, $s4, 0F3fb80000, $s6;
	nfma_f32	$s3, $s3, 0F3fb80000, $s4;
	cmp_lt_ftz_b1_f32	$c0, $s5, 0F3d800000;
	cmov_b32	$s3, $c0, $s3, $s2;
	and_b32	$s2, $s1, 2147483647;
	cmp_gt_b1_u32	$c0, $s2, 2139095039;
	cmov_b32	$s0, $c0, $s0, $s3;
	cmp_ne_b1_s32	$c0, $s1, $s2;
	cmov_b32	$s0, $c0, 2143289344, $s0;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmov_b32	$s0, $c0, 4286578688, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_log2];
	ret;
};


decl function &_gcc_fmin(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y);


function &_gcc_fmin(arg_f32 %_gcc_fmin)(
	arg_f32 %x,
	arg_f32 %y)
{

@_gcc_fmin_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%y];
	mul_ftz_f32	$s0, $s0, 0F3f800000;
	ld_arg_align(4)_f32	$s1, [%x];
	mul_ftz_f32	$s1, $s1, 0F3f800000;
	min_ftz_f32	$s0, $s1, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_fmin];
	ret;
};


decl function &_gcc_rsqrt(arg_f32 %ret)(arg_f32 %x);


function &_gcc_rsqrt(arg_f32 %_gcc_rsqrt)(arg_f32 %x)
{

@_gcc_rsqrt_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s1, $s0;
	and_b32	$s2, $s1, 2147483647;
	cmp_lt_b1_u32	$c0, $s2, 8388608;
	cmp_ne_b1_s32	$c1, $s2, 0;
	and_b1	$c0, $c1, $c0;
	cmov_b32	$s2, $c0, 1174405120, 1065353216;
	or_b32	$s1, $s1, 226492416;
	add_ftz_f32	$s1, $s1, 0F8d800000;
	cmov_b32	$s0, $c0, $s1, $s0;
	nrsqrt_f32	$s0, $s0;
	mul_ftz_f32	$s0, $s2, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_rsqrt];
	ret;
};


decl function &_gcc_ceil(arg_f32 %ret)(arg_f32 %x);


function &_gcc_ceil(arg_f32 %_gcc_ceil)(arg_f32 %x)
{

@_gcc_ceil_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	ceil_ftz_f32	$s0, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_ceil];
	ret;
};


decl function &_gcc_half_log2(arg_f32 %ret)(arg_f32 %x);


function &_gcc_half_log2(arg_f32 %_gcc_half_log2)(arg_f32 %x)
{

@_gcc_half_log2_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	nlog2_f32	$s0, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_half_log2];
	ret;
};


decl function &_gcc_fmax(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y);


function &_gcc_fmax(arg_f32 %_gcc_fmax)(
	arg_f32 %x,
	arg_f32 %y)
{

@_gcc_fmax_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%y];
	mul_ftz_f32	$s0, $s0, 0F3f800000;
	ld_arg_align(4)_f32	$s1, [%x];
	mul_ftz_f32	$s1, $s1, 0F3f800000;
	max_ftz_f32	$s0, $s1, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_fmax];
	ret;
};


decl function &_gcc_sin(arg_f32 %ret)(arg_f32 %x);


function &_gcc_sin(arg_f32 %_gcc_sin)(arg_f32 %x)
{

@_gcc_sin_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s2, $s0;
	and_b32	$s1, $s2, 2147483647;
	mov_b32	$s4, $s1;
	cmp_geu_ftz_b1_f32	$c0, $s4, 0F4b000000;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	nfma_f32	$s3, $s4, 0F3f22f983, 0F3f000000;
	trunc_ftz_f32	$s5, $s3;
	mul_ftz_f32	$s6, $s5, 0Fbfc90fda;
	fma_ftz_f32	$s6, $s5, 0F3fc90fda, $s6;
	mul_ftz_f32	$s8, $s5, 0F3fc90fda;
	sub_ftz_f32	$s7, $s4, $s8;
	sub_ftz_f32	$s4, $s4, $s7;
	sub_ftz_f32	$s4, $s4, $s8;
	sub_ftz_f32	$s4, $s4, $s6;
	add_ftz_f32	$s6, $s7, $s4;
	mul_ftz_f32	$s4, $s5, 0Fa7c234c4;
	mul_ftz_f32	$s8, $s5, 0F33a22168;
	sub_ftz_f32	$s7, $s6, $s8;
	fma_ftz_f32	$s4, $s5, 0F27c234c4, $s4;
	mul_ftz_f32	$s9, $s5, 0Fb3a22168;
	neg_f32	$s4, $s4;
	fma_ftz_f32	$s9, $s5, 0F33a22168, $s9;
	cvt_ftz_s32_f32	$s3, $s3;
	mul_ftz_f32	$s5, $s5, 0F27c234c4;
	sub_ftz_f32	$s6, $s6, $s7;
	sub_ftz_f32	$s6, $s6, $s8;
	sub_ftz_f32	$s6, $s6, $s9;
	add_ftz_f32	$s7, $s7, $s6;
	sub_ftz_f32	$s6, $s7, $s5;
	sub_ftz_f32	$s7, $s7, $s6;
	sub_ftz_f32	$s5, $s7, $s5;
	add_ftz_f32	$s5, $s6, $s5;
	br	@BB0_3;

@BB0_2:
	and_b32	$s3, $s2, 8388607;
	or_b32	$s5, $s3, 8388608;
	mulhi_u32	$s4, $s5, 4266746795;
	mad_u32	$s3, $s5, 1011060801, $s4;
	cmp_lt_b1_u32	$c0, $s3, $s4;
	cvt_u32_b1	$s4, $c0;
	mulhi_u32	$s6, $s5, 1011060801;
	add_u32	$s6, $s4, $s6;
	mad_u32	$s4, $s5, 3680671129, $s6;
	cmp_lt_b1_u32	$c0, $s4, $s6;
	cvt_u32_b1	$s6, $c0;
	mulhi_u32	$s7, $s5, 3680671129;
	add_u32	$s7, $s6, $s7;
	mad_u32	$s6, $s5, 4113882560, $s7;
	cmp_lt_b1_u32	$c0, $s6, $s7;
	cvt_u32_b1	$s7, $c0;
	mulhi_u32	$s8, $s5, 4113882560;
	add_u32	$s8, $s7, $s8;
	mad_u32	$s7, $s5, 4230436817, $s8;
	cmp_lt_b1_u32	$c0, $s7, $s8;
	cvt_u32_b1	$s8, $c0;
	mulhi_u32	$s9, $s5, 4230436817;
	add_u32	$s9, $s8, $s9;
	mad_u32	$s8, $s5, 1313084713, $s9;
	cmp_lt_b1_u32	$c0, $s8, $s9;
	cvt_u32_b1	$s9, $c0;
	mulhi_u32	$s10, $s5, 1313084713;
	add_u32	$s10, $s9, $s10;
	mad_u32	$s9, $s5, 2734261102, $s10;
	cmp_lt_b1_u32	$c0, $s9, $s10;
	cvt_u32_b1	$s12, $c0;
	mulhi_u32	$s13, $s5, 2734261102;
	mul_u32	$s11, $s5, 4266746795;
	shr_u32	$s5, $s1, 23;
	add_u32	$s10, $s5, 4294967176;
	cmp_gt_b1_u32	$c0, $s10, 31;
	cmov_b32	$s5, $c0, $s3, $s4;
	cmov_b32	$s11, $c0, $s11, $s3;
	cvt_u32_b1	$s14, $c0;
	cmov_b32	$s3, $c0, $s7, $s8;
	cmov_b32	$s7, $c0, $s6, $s7;
	cmov_b32	$s4, $c0, $s4, $s6;
	add_u32	$s6, $s12, $s13;
	cmov_b32	$s6, $c0, $s9, $s6;
	cmov_b32	$s9, $c0, $s8, $s9;
	neg_s32	$s8, $s14;
	and_b32	$s8, $s8, 32;
	sub_u32	$s10, $s10, $s8;
	cmp_gt_b1_u32	$c0, $s10, 31;
	cmov_b32	$s8, $c0, $s5, $s4;
	cmov_b32	$s11, $c0, $s11, $s5;
	cvt_u32_b1	$s12, $c0;
	cmov_b32	$s5, $c0, $s3, $s9;
	cmov_b32	$s3, $c0, $s7, $s3;
	cmov_b32	$s4, $c0, $s4, $s7;
	cmov_b32	$s9, $c0, $s9, $s6;
	neg_s32	$s6, $s12;
	and_b32	$s6, $s6, 32;
	sub_u32	$s6, $s10, $s6;
	cmp_gt_b1_u32	$c0, $s6, 31;
	cmov_b32	$s7, $c0, $s8, $s4;
	cmov_b32	$s8, $c0, $s11, $s8;
	cvt_u32_b1	$s12, $c0;
	cmov_b32	$s9, $c0, $s5, $s9;
	cmov_b32	$s10, $c0, $s3, $s5;
	cmov_b32	$s11, $c0, $s4, $s3;
	neg_s32	$s3, $s12;
	and_b32	$s3, $s3, 32;
	sub_u32	$s6, $s6, $s3;
	cmp_gt_b1_u32	$c0, $s6, 31;
	cmov_b32	$s3, $c0, $s7, $s11;
	cmov_b32	$s5, $c0, $s8, $s7;
	cvt_u32_b1	$s7, $c0;
	cmov_b32	$s4, $c0, $s10, $s9;
	cmov_b32	$s8, $c0, $s11, $s10;
	neg_s32	$s7, $s7;
	and_b32	$s7, $s7, 32;
	sub_u32	$s9, $s7, $s6;
	shr_u32	$s10, $s5, $s9;
	shr_u32	$s12, $s3, $s9;
	neg_s32	$s11, $s9;
	shl_u32	$s13, $s8, $s11;
	or_b32	$s12, $s13, $s12;
	shl_u32	$s13, $s3, $s11;
	cmp_ne_b1_s32	$c0, $s6, $s7;
	cmov_b32	$s7, $c0, $s12, $s8;
	or_b32	$s6, $s13, $s10;
	shl_u32	$s10, $s4, $s11;
	shr_u32	$s8, $s8, $s9;
	or_b32	$s8, $s10, $s8;
	cmov_b32	$s9, $c0, $s6, $s3;
	cmov_b32	$s3, $c0, $s8, $s4;
	shl_u32	$s4, $s3, 2;
	shr_u32	$s6, $s7, 30;
	or_b32	$s6, $s4, $s6;
	shr_u32	$s4, $s3, 29;
	shl_u32	$s4, $s4, 31;
	shr_s32	$s10, $s4, 31;
	xor_b32	$s8, $s10, $s6;
	firstbit_u32_u32	$s11, $s8;
	cmp_eq_b1_s32	$c0, $s6, $s10;
	cmov_b32	$s6, $c0, 32, $s11;
	shr_u32	$s5, $s5, 30;
	shr_u32	$s11, $s9, 30;
	shl_u32	$s7, $s7, 2;
	or_b32	$s7, $s7, $s11;
	shl_u32	$s9, $s9, 2;
	or_b32	$s9, $s9, $s5;
	sub_u32	$s5, 31, $s6;
	xor_b32	$s9, $s10, $s9;
	shr_u32	$s11, $s9, $s5;
	neg_s32	$s9, $s5;
	xor_b32	$s12, $s10, $s7;
	shl_u32	$s7, $s12, $s9;
	or_b32	$s7, $s7, $s11;
	shr_u32	$s10, $s7, 9;
	shr_u32	$s5, $s12, $s5;
	shl_u32	$s8, $s8, $s9;
	or_b32	$s5, $s8, $s5;
	shl_u32	$s8, $s5, 23;
	or_b32	$s8, $s8, $s10;
	firstbit_u32_u32	$s9, $s8;
	cmp_eq_b1_s32	$c0, $s8, 0;
	cmov_b32	$s9, $c0, 32, $s9;
	sub_u32	$s10, 126, $s6;
	shr_u32	$s11, $s3, 30;
	bitextract_u32	$s3, $s3, 29, 1;
	shl_u32	$s10, $s10, 23;
	add_u32	$s3, $s3, $s11;
	or_b32	$s10, $s10, $s4;
	sub_u32	$s6, 102, $s6;
	sub_u32	$s11, 31, $s9;
	shr_u32	$s7, $s7, $s11;
	neg_s32	$s11, $s11;
	shl_u32	$s8, $s8, $s11;
	or_b32	$s7, $s8, $s7;
	shr_u32	$s7, $s7, 9;
	sub_u32	$s6, $s6, $s9;
	shl_u32	$s6, $s6, 23;
	or_b32	$s4, $s6, $s4;
	shr_u32	$s5, $s5, 9;
	or_b32	$s5, $s10, $s5;
	or_b32	$s6, $s4, $s7;
	mul_ftz_f32	$s4, $s5, 0F3fc90fda;
	mul_ftz_f32	$s7, $s5, 0Fbfc90fda;
	fma_ftz_f32	$s7, $s5, 0F3fc90fda, $s7;
	fma_ftz_f32	$s5, $s5, 0F33a22168, $s7;
	fma_ftz_f32	$s6, $s6, 0F3fc90fda, $s5;
	add_ftz_f32	$s5, $s6, $s4;
	sub_ftz_f32	$s4, $s5, $s4;
	sub_ftz_f32	$s4, $s6, $s4;

@BB0_3:
	// %argReductionS.exit
	mov_b32	$s6, $s5;
	and_b32	$s6, $s6, 2147483647;
	add_u32	$s7, $s6, 4278190080;
	add_u32	$s8, $s6, 3244713574;
	cmp_lt_b1_u32	$c0, $s8, 11429479;
	cmov_b32	$s7, $c0, $s7, 0;
	cmp_gt_b1_u32	$c0, $s6, 1061683200;
	cmov_b32	$s7, $c0, 1049624576, $s7;
	and_b32	$s6, $s3, 2;
	cmp_gt_b1_u32	$c0, $s6, 1;
	cvt_u32_b1	$s6, $c0;
	mul_ftz_f32	$s8, $s5, $s5;
	nfma_f32	$s9, $s8, 0F2f2ec9d3, 0Fb2d72f34;
	nfma_f32	$s9, $s8, $s9, 0F3636df25;
	nfma_f32	$s9, $s8, $s9, 0Fb95009d4;
	nfma_f32	$s10, $s8, $s9, 0F3c088887;
	mul_ftz_f32	$s9, $s5, $s8;
	neg_f32	$s11, $s9;
	mul_ftz_f32	$s10, $s10, $s11;
	nfma_f32	$s11, $s8, 0Fad47d74e, 0F310f74f6;
	nfma_f32	$s11, $s8, $s11, 0Fb492923a;
	nfma_f32	$s11, $s8, $s11, 0F37d00ae2;
	nfma_f32	$s10, $s4, 0F3f000000, $s10;
	nfma_f32	$s12, $s8, $s11, 0Fbab60b60;
	neg_f32	$s11, $s5;
	mul_ftz_f32	$s11, $s4, $s11;
	nfma_f32	$s12, $s8, $s12, 0F3d2aaaab;
	mul_ftz_f32	$s12, $s8, $s12;
	neg_f32	$s4, $s4;
	and_b32	$s3, $s3, 1;
	nfma_f32	$s4, $s8, $s10, $s4;
	nfma_f32	$s4, $s9, 0F3e2aaaab, $s4;
	sub_ftz_f32	$s4, $s5, $s4;
	nfma_f32	$s5, $s8, $s12, $s11;
	neg_f32	$s9, $s7;
	nfma_f32	$s8, $s8, 0F3f000000, $s9;
	sub_ftz_f32	$s5, $s8, $s5;
	sub_ftz_f32	$s7, 0F3f800000, $s7;
	sub_ftz_f32	$s5, $s7, $s5;
	cvt_b1_u32	$c0, $s3;
	cmov_b32	$s3, $c0, $s5, $s4;
	xor_b32	$s2, $s1, $s2;
	shl_u32	$s4, $s6, 31;
	xor_b32	$s2, $s2, $s4;
	xor_b32	$s2, $s2, $s3;
	cmp_gt_b1_u32	$c0, $s1, 2139095039;
	cmov_b32	$s1, $c0, 2143289344, $s2;
	cmp_eq_ftz_b1_f32	$c0, $s0, 0F00000000;
	cmov_b32	$s0, $c0, $s0, $s1;
	st_arg_align(4)_f32	$s0, [%_gcc_sin];
	ret;
};


decl function &_gcc_native_cos(arg_f32 %ret)(arg_f32 %x);


function &_gcc_native_cos(arg_f32 %_gcc_native_cos)(arg_f32 %x)
{

@_gcc_native_cos_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	ncos_f32	$s0, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_native_cos];
	ret;
};


decl function &_gcc_floor(arg_f32 %ret)(arg_f32 %x);


function &_gcc_floor(arg_f32 %_gcc_floor)(arg_f32 %x)
{

@_gcc_floor_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	floor_ftz_f32	$s0, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_floor];
	ret;
};

align(8) readonly_f32 &__math32_EXP_TBL_EP[130] = f32[](0F3f800000, 0F00000000, 0F3f816000, 0F391a3e77, 0F3f82c000, 0F39d8698a, 0F3f842000, 0F3a51461d, 0F3f85a000, 0F39ac367c, 0F3f870000, 0F3a7b0cb4, 0F3f888000, 0F3a407404, 0F3f8a0000, 0F3a26abaa, 0F3f8b8000, 0F3a2e0f1f, 0F3f8d0000, 0F3a56fadb, 0F3f8ea000, 0F39073168, 0F3f902000, 0F3a0ee218, 0F3f91c000, 0F38f4dcea, 0F3f934000, 0F3a515978, 0F3f94e000, 0F3a277d47, 0F3f968000, 0F3a2169b9, 0F3f982000, 0F3a3f828c, 0F3f99e000, 0F370b2641, 0F3f9b8000, 0F39d39b9d, 0F3f9d2000, 0F3a76cd39, 0F3f9ee000, 0F3a299304, 0F3fa0a000, 0F3a02887d, 0F3fa26000, 0F3a021818, 0F3fa42000, 0F3a28ad70, 0F3fa5e000, 0F3a76b54d, 0F3fa7c000, 0F39d93b4e, 0F3fa9a000, 0F382d5a75, 0F3fab6000, 0F3a51cdad, 0F3fad4000, 0F3a41f752, 0F3faf2000, 0F3a5bc56b, 0F3fb12000, 0F38fd6074, 0F3fb30000, 0F3a0e2095, 0F3fb50000, 0F391e667f, 0F3fb6e000, 0F3a6c8f19, 0F3fb8e000, 0F3a5d7a3b, 0F3fbae000, 0F3a7ad590, 0F3fbd0000, 0F398a39f5, 0F3fbf0000, 0F3a3ccdb3, 0F3fc12000, 0F39c4cca6, 0F3fc34000, 0F39599b44, 0F3fc56000, 0F3965422a, 0F3fc78000, 0F39d74c8a, 0F3fc9a000, 0F3a4dec33, 0F3fcbe000, 0F39c14fef, 0F3fce2000, 0F391182a3, 0F3fd06000, 0F38ccf6bb, 0F3fd2a000, 0F3981d91f, 0F3fd4e000, 0F3a1ad55e, 0F3fd74000, 0F391f995a, 0F3fd98000, 0F3a68ae13, 0F3fdbe000, 0F3a5dbcbe, 0F3fde6000, 0F37f4825e, 0F3fe0c000, 0F39cdeec2, 0F3fe32000, 0F3a7c4b95, 0F3fe5a000, 0F3a48373b, 0F3fe82000, 0F3a4b5281, 0F3feac000, 0F37c6e7dd, 0F3fed4000, 0F39f301ed, 0F3fefe000, 0F3917337b, 0F3ff28000, 0F383b9e2c, 0F3ff52000, 0F392fa2a4, 0F3ff7c000, 0F3a06fb98, 0F3ffa8000, 0F38ecb6dc, 0F3ffd2000, 0F3a706067, 0F40000000, 0F00000000);

decl function &_gcc_expm1(arg_f32 %ret)(arg_f32 %x);


function &_gcc_expm1(arg_f32 %_gcc_expm1)(arg_f32 %x)
{

@_gcc_expm1_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mul_ftz_f32	$s1, $s0, 0F42b8aa3b;
	cvt_ftz_s32_f32	$s3, $s1;
	shr_s32	$s2, $s3, 6;
	cmp_lt_ftz_b1_f32	$c0, $s0, 0Fc2ce8ed0;
	cmp_lt_b1_s32	$c1, $s2, -24;
	or_b1	$c0, $c0, $c1;
	class_b1_f32	$c1, $s0, 3;
	cvt_u32_b1	$s1, $c1;
	and_b32	$s1, $s1, 1;
	cvt_near_f32_s32	$s4, $s3;
	nfma_f32	$s5, $s4, 0Fbc310000, $s0;
	nfma_f32	$s4, $s4, 0Fb7e42fef, $s5;
	nfma_f32	$s5, $s4, 0F3d2aaaab, 0F3e2aaaab;
	nfma_f32	$s5, $s4, $s5, 0F3f000000;
	mul_ftz_f32	$s6, $s4, $s4;
	and_b32	$s3, $s3, 63;
	cvt_u64_u32	$d0, $s3;
	shl_u64	$d0, $d0, 3;
	nfma_f32	$s3, $s6, $s5, $s4;
	ld_v2_readonly_align(8)_f32	($s4, $s5), [&__math32_EXP_TBL_EP][$d0];
	shl_u32	$s2, $s2, 23;
	add_u32	$s2, $s2, 1065353216;
	mov_b32	$s6, $s2;
	mul_ftz_f32	$s2, $s6, $s5;
	mul_ftz_f32	$s4, $s6, $s4;
	add_ftz_f32	$s5, $s4, $s2;
	nfma_f32	$s2, $s3, $s5, $s2;
	add_ftz_f32	$s3, $s4, 0Fbf800000;
	add_ftz_f32	$s2, $s2, $s3;
	cmp_eq_ftz_b1_f32	$c1, $s0, 0F00000000;
	cmov_b32	$s2, $c1, $s0, $s2;
	cmov_b32	$s2, $c0, 3212836864, $s2;
	cmp_gt_ftz_b1_f32	$c0, $s0, 0F42b17217;
	cmov_b32	$s2, $c0, 2139095040, $s2;
	cvt_b1_u32	$c0, $s1;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_expm1];
	ret;
};


decl function &_gcc_fdim(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y);


function &_gcc_fdim(arg_f32 %_gcc_fdim)(
	arg_f32 %x,
	arg_f32 %y)
{

@_gcc_fdim_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%y];
	ld_arg_align(4)_f32	$s1, [%x];
	class_b1_f32	$c0, $s1, 3;
	cvt_u32_b1	$s2, $c0;
	class_b1_f32	$c0, $s0, 3;
	cvt_u32_b1	$s3, $c0;
	or_b32	$s2, $s3, $s2;
	cmp_gt_ftz_b1_f32	$c0, $s1, $s0;
	cvt_u32_b1	$s3, $c0;
	sub_ftz_f32	$s0, $s1, $s0;
	neg_s32	$s1, $s3;
	and_b32	$s0, $s0, $s1;
	and_b32	$s1, $s2, 1;
	neg_s32	$s1, $s1;
	and_b32	$s1, $s1, 2143289344;
	or_b32	$s0, $s1, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_fdim];
	ret;
};


decl function &_gcc_acos(arg_f32 %ret)(arg_f32 %x);


function &_gcc_acos(arg_f32 %_gcc_acos)(arg_f32 %x)
{

@_gcc_acos_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s3, [%x];
	mov_b32	$s0, $s3;
	and_b32	$s1, $s0, 2147483647;
	mov_b32	$s2, $s1;
	mul_ftz_f32	$s4, $s2, $s2;
	sub_ftz_f32	$s2, 0F3f800000, $s2;
	mul_ftz_f32	$s5, $s2, 0F3f000000;
	shr_u32	$s2, $s1, 23;
	add_u32	$s2, $s2, 4294967169;
	cmp_gt_b1_s32	$c0, $s2, -2;
	cmov_b32	$s5, $c0, $s5, $s4;
	nsqrt_f32	$s4, $s5;
	mov_b32	$s6, $s4;
	and_b32	$s6, $s6, 4294901760;
	neg_f32	$s7, $s6;
	nfma_f32	$s7, $s6, $s7, $s5;
	add_ftz_f32	$s8, $s4, $s6;
	nrcp_f32	$s8, $s8;
	mul_ftz_f32	$s7, $s7, $s8;
	nfma_f32	$s8, $s5, 0Fbb81ce6b, 0Fbc5b3fe1;
	nfma_f32	$s8, $s5, $s8, 0Fbd678bdd;
	nfma_f32	$s8, $s5, $s8, 0F3e3c94dc;
	nfma_f32	$s9, $s5, 0Fbf561f0d, 0F3f8d6fa5;
	nrcp_f32	$s9, $s9;
	mul_ftz_f32	$s8, $s8, $s9;
	mul_ftz_f32	$s5, $s5, $s8;
	nfma_f32	$s7, $s4, $s5, $s7;
	add_ftz_f32	$s6, $s6, $s7;
	add_ftz_f32	$s6, $s6, $s6;
	nfma_f32	$s7, $s4, $s5, 0Fa48d3132;
	add_ftz_f32	$s4, $s4, $s7;
	nfma_f32	$s4, $s4, 0Fc0000000, 0F40490fdb;
	cmp_ne_b1_s32	$c1, $s0, $s1;
	cmov_b32	$s4, $c1, $s4, $s6;
	neg_f32	$s5, $s5;
	nfma_f32	$s5, $s3, $s5, 0F248d3132;
	sub_ftz_f32	$s3, $s3, $s5;
	sub_ftz_f32	$s3, 0F3fc90fdb, $s3;
	cmov_b32	$s3, $c0, $s4, $s3;
	cmp_gt_b1_u32	$c0, $s1, 1065353216;
	cmov_b32	$s1, $c0, 2143289344, $s3;
	cmp_eq_b1_s32	$c0, $s0, 1065353216;
	cmov_b32	$s1, $c0, 0, $s1;
	cmp_eq_b1_s32	$c0, $s0, -1082130432;
	cmov_b32	$s0, $c0, 1078530011, $s1;
	cmp_lt_b1_s32	$c0, $s2, -26;
	cmov_b32	$s0, $c0, 1070141403, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_acos];
	ret;
};


decl function &_gcc_asinh(arg_f32 %ret)(arg_f32 %x);


function &_gcc_asinh(arg_f32 %_gcc_asinh)(arg_f32 %x)
{

@_gcc_asinh_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s2, $s0;
	and_b32	$s1, $s2, 2147483647;
	mov_b32	$s3, $s1;
	mul_ftz_f32	$s4, $s3, $s3;
	add_ftz_f32	$s4, $s4, 0F3f800000;
	nsqrt_f32	$s4, $s4;
	add_ftz_f32	$s4, $s3, $s4;
	cmp_gt_b1_u32	$c0, $s1, 1174405120;
	cmov_b32	$s4, $c0, $s3, $s4;
	cmov_b32	$s3, $c0, 1060205080, 0;
	nlog2_f32	$s4, $s4;
	mov_b32	$s5, $s4;
	and_b32	$s5, $s5, 4294963200;
	sub_ftz_f32	$s6, $s4, $s5;
	mul_ftz_f32	$s7, $s6, 0F3805fdf4;
	nfma_f32	$s7, $s5, 0F3805fdf4, $s7;
	nfma_f32	$s6, $s6, 0F3f317000, $s7;
	nfma_f32	$s5, $s5, 0F3f317000, $s6;
	class_b1_f32	$c0, $s4, 519;
	cvt_u32_b1	$s6, $c0;
	cmp_ne_b1_s32	$c0, $s6, 0;
	cmov_b32	$s4, $c0, $s4, $s5;
	mul_ftz_f32	$s5, $s0, $s0;
	nfma_f32	$s6, $s5, 0Fb8f6e063, 0Fbd2a815d;
	nfma_f32	$s6, $s5, $s6, 0Fbf019e32;
	nfma_f32	$s6, $s5, $s6, 0Fbfbd7755;
	nfma_f32	$s6, $s5, $s6, 0Fbf939462;
	nfma_f32	$s7, $s5, 0F3d80b442, 0F3fa14880;
	nfma_f32	$s7, $s5, $s7, 0F40d2a2b7;
	nfma_f32	$s7, $s5, $s7, 0F413fe860;
	nfma_f32	$s7, $s5, $s7, 0F40dd5e94;
	nrcp_f32	$s7, $s7;
	mul_ftz_f32	$s6, $s6, $s7;
	mul_ftz_f32	$s5, $s5, $s0;
	nfma_f32	$s5, $s5, $s6, $s0;
	xor_b32	$s2, $s1, $s2;
	add_ftz_f32	$s3, $s3, $s4;
	or_b32	$s2, $s3, $s2;
	cmp_lt_b1_u32	$c0, $s1, 1073741825;
	cmov_b32	$s2, $c0, $s5, $s2;
	add_u32	$s1, $s1, 3330277376;
	cmp_gt_b1_u32	$c0, $s1, 1174405119;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_asinh];
	ret;
};


decl function &_gcc_sqrt(arg_f32 %ret)(arg_f32 %x);


function &_gcc_sqrt(arg_f32 %_gcc_sqrt)(arg_f32 %x)
{

@_gcc_sqrt_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s1, $s0;
	and_b32	$s2, $s1, 2147483647;
	cmp_lt_b1_u32	$c0, $s2, 8388608;
	cmp_ne_b1_s32	$c1, $s2, 0;
	and_b1	$c0, $c1, $c0;
	cmov_b32	$s2, $c0, 956301312, 1065353216;
	or_b32	$s1, $s1, 226492416;
	add_ftz_f32	$s1, $s1, 0F8d800000;
	cmov_b32	$s0, $c0, $s1, $s0;
	nsqrt_f32	$s0, $s0;
	mul_ftz_f32	$s0, $s2, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_sqrt];
	ret;
};


decl function &_gcc_sincos(arg_f32 %ret)(
	arg_f32 %x,
	arg_u64 %result_cos);


function &_gcc_sincos(arg_f32 %_gcc_sincos)(
	arg_f32 %x,
	arg_u64 %result_cos)
{

@_gcc_sincos_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s1, $s0;
	and_b32	$s0, $s1, 2147483647;
	mov_b32	$s3, $s0;
	ld_arg_align(8)_u64	$d0, [%result_cos];
	cmp_geu_ftz_b1_f32	$c0, $s3, 0F4b000000;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	nfma_f32	$s2, $s3, 0F3f22f983, 0F3f000000;
	trunc_ftz_f32	$s4, $s2;
	mul_ftz_f32	$s5, $s4, 0Fbfc90fda;
	fma_ftz_f32	$s5, $s4, 0F3fc90fda, $s5;
	mul_ftz_f32	$s7, $s4, 0F3fc90fda;
	sub_ftz_f32	$s6, $s3, $s7;
	sub_ftz_f32	$s3, $s3, $s6;
	sub_ftz_f32	$s3, $s3, $s7;
	sub_ftz_f32	$s3, $s3, $s5;
	add_ftz_f32	$s5, $s6, $s3;
	mul_ftz_f32	$s3, $s4, 0Fa7c234c4;
	mul_ftz_f32	$s7, $s4, 0F33a22168;
	sub_ftz_f32	$s6, $s5, $s7;
	fma_ftz_f32	$s3, $s4, 0F27c234c4, $s3;
	mul_ftz_f32	$s8, $s4, 0Fb3a22168;
	neg_f32	$s3, $s3;
	fma_ftz_f32	$s8, $s4, 0F33a22168, $s8;
	cvt_ftz_s32_f32	$s2, $s2;
	mul_ftz_f32	$s4, $s4, 0F27c234c4;
	sub_ftz_f32	$s5, $s5, $s6;
	sub_ftz_f32	$s5, $s5, $s7;
	sub_ftz_f32	$s5, $s5, $s8;
	add_ftz_f32	$s6, $s6, $s5;
	sub_ftz_f32	$s5, $s6, $s4;
	sub_ftz_f32	$s6, $s6, $s5;
	sub_ftz_f32	$s4, $s6, $s4;
	add_ftz_f32	$s4, $s5, $s4;
	br	@BB0_3;

@BB0_2:
	and_b32	$s2, $s1, 8388607;
	or_b32	$s4, $s2, 8388608;
	mulhi_u32	$s3, $s4, 4266746795;
	mad_u32	$s2, $s4, 1011060801, $s3;
	cmp_lt_b1_u32	$c0, $s2, $s3;
	cvt_u32_b1	$s3, $c0;
	mulhi_u32	$s5, $s4, 1011060801;
	add_u32	$s5, $s3, $s5;
	mad_u32	$s3, $s4, 3680671129, $s5;
	cmp_lt_b1_u32	$c0, $s3, $s5;
	cvt_u32_b1	$s5, $c0;
	mulhi_u32	$s6, $s4, 3680671129;
	add_u32	$s6, $s5, $s6;
	mad_u32	$s5, $s4, 4113882560, $s6;
	cmp_lt_b1_u32	$c0, $s5, $s6;
	cvt_u32_b1	$s6, $c0;
	mulhi_u32	$s7, $s4, 4113882560;
	add_u32	$s7, $s6, $s7;
	mad_u32	$s6, $s4, 4230436817, $s7;
	cmp_lt_b1_u32	$c0, $s6, $s7;
	cvt_u32_b1	$s7, $c0;
	mulhi_u32	$s8, $s4, 4230436817;
	add_u32	$s8, $s7, $s8;
	mad_u32	$s7, $s4, 1313084713, $s8;
	cmp_lt_b1_u32	$c0, $s7, $s8;
	cvt_u32_b1	$s8, $c0;
	mulhi_u32	$s9, $s4, 1313084713;
	add_u32	$s9, $s8, $s9;
	mad_u32	$s8, $s4, 2734261102, $s9;
	cmp_lt_b1_u32	$c0, $s8, $s9;
	cvt_u32_b1	$s11, $c0;
	mulhi_u32	$s12, $s4, 2734261102;
	mul_u32	$s10, $s4, 4266746795;
	shr_u32	$s4, $s0, 23;
	add_u32	$s9, $s4, 4294967176;
	cmp_gt_b1_u32	$c0, $s9, 31;
	cmov_b32	$s4, $c0, $s2, $s3;
	cmov_b32	$s10, $c0, $s10, $s2;
	cvt_u32_b1	$s13, $c0;
	cmov_b32	$s2, $c0, $s6, $s7;
	cmov_b32	$s6, $c0, $s5, $s6;
	cmov_b32	$s3, $c0, $s3, $s5;
	add_u32	$s5, $s11, $s12;
	cmov_b32	$s5, $c0, $s8, $s5;
	cmov_b32	$s8, $c0, $s7, $s8;
	neg_s32	$s7, $s13;
	and_b32	$s7, $s7, 32;
	sub_u32	$s9, $s9, $s7;
	cmp_gt_b1_u32	$c0, $s9, 31;
	cmov_b32	$s7, $c0, $s4, $s3;
	cmov_b32	$s10, $c0, $s10, $s4;
	cvt_u32_b1	$s11, $c0;
	cmov_b32	$s4, $c0, $s2, $s8;
	cmov_b32	$s2, $c0, $s6, $s2;
	cmov_b32	$s3, $c0, $s3, $s6;
	cmov_b32	$s8, $c0, $s8, $s5;
	neg_s32	$s5, $s11;
	and_b32	$s5, $s5, 32;
	sub_u32	$s5, $s9, $s5;
	cmp_gt_b1_u32	$c0, $s5, 31;
	cmov_b32	$s6, $c0, $s7, $s3;
	cmov_b32	$s7, $c0, $s10, $s7;
	cvt_u32_b1	$s11, $c0;
	cmov_b32	$s8, $c0, $s4, $s8;
	cmov_b32	$s9, $c0, $s2, $s4;
	cmov_b32	$s10, $c0, $s3, $s2;
	neg_s32	$s2, $s11;
	and_b32	$s2, $s2, 32;
	sub_u32	$s5, $s5, $s2;
	cmp_gt_b1_u32	$c0, $s5, 31;
	cmov_b32	$s2, $c0, $s6, $s10;
	cmov_b32	$s4, $c0, $s7, $s6;
	cvt_u32_b1	$s6, $c0;
	cmov_b32	$s3, $c0, $s9, $s8;
	cmov_b32	$s7, $c0, $s10, $s9;
	neg_s32	$s6, $s6;
	and_b32	$s6, $s6, 32;
	sub_u32	$s8, $s6, $s5;
	shr_u32	$s9, $s4, $s8;
	shr_u32	$s11, $s2, $s8;
	neg_s32	$s10, $s8;
	shl_u32	$s12, $s7, $s10;
	or_b32	$s11, $s12, $s11;
	shl_u32	$s12, $s2, $s10;
	cmp_ne_b1_s32	$c0, $s5, $s6;
	cmov_b32	$s6, $c0, $s11, $s7;
	or_b32	$s5, $s12, $s9;
	shl_u32	$s9, $s3, $s10;
	shr_u32	$s7, $s7, $s8;
	or_b32	$s7, $s9, $s7;
	cmov_b32	$s8, $c0, $s5, $s2;
	cmov_b32	$s2, $c0, $s7, $s3;
	shl_u32	$s3, $s2, 2;
	shr_u32	$s5, $s6, 30;
	or_b32	$s5, $s3, $s5;
	shr_u32	$s3, $s2, 29;
	shl_u32	$s3, $s3, 31;
	shr_s32	$s9, $s3, 31;
	xor_b32	$s7, $s9, $s5;
	firstbit_u32_u32	$s10, $s7;
	cmp_eq_b1_s32	$c0, $s5, $s9;
	cmov_b32	$s5, $c0, 32, $s10;
	shr_u32	$s4, $s4, 30;
	shr_u32	$s10, $s8, 30;
	shl_u32	$s6, $s6, 2;
	or_b32	$s6, $s6, $s10;
	shl_u32	$s8, $s8, 2;
	or_b32	$s8, $s8, $s4;
	sub_u32	$s4, 31, $s5;
	xor_b32	$s8, $s9, $s8;
	shr_u32	$s10, $s8, $s4;
	neg_s32	$s8, $s4;
	xor_b32	$s11, $s9, $s6;
	shl_u32	$s6, $s11, $s8;
	or_b32	$s6, $s6, $s10;
	shr_u32	$s9, $s6, 9;
	shr_u32	$s4, $s11, $s4;
	shl_u32	$s7, $s7, $s8;
	or_b32	$s4, $s7, $s4;
	shl_u32	$s7, $s4, 23;
	or_b32	$s7, $s7, $s9;
	firstbit_u32_u32	$s8, $s7;
	cmp_eq_b1_s32	$c0, $s7, 0;
	cmov_b32	$s8, $c0, 32, $s8;
	sub_u32	$s9, 126, $s5;
	shr_u32	$s10, $s2, 30;
	bitextract_u32	$s2, $s2, 29, 1;
	shl_u32	$s9, $s9, 23;
	add_u32	$s2, $s2, $s10;
	or_b32	$s9, $s9, $s3;
	sub_u32	$s5, 102, $s5;
	sub_u32	$s10, 31, $s8;
	shr_u32	$s6, $s6, $s10;
	neg_s32	$s10, $s10;
	shl_u32	$s7, $s7, $s10;
	or_b32	$s6, $s7, $s6;
	shr_u32	$s6, $s6, 9;
	sub_u32	$s5, $s5, $s8;
	shl_u32	$s5, $s5, 23;
	or_b32	$s3, $s5, $s3;
	shr_u32	$s4, $s4, 9;
	or_b32	$s4, $s9, $s4;
	or_b32	$s5, $s3, $s6;
	mul_ftz_f32	$s3, $s4, 0F3fc90fda;
	mul_ftz_f32	$s6, $s4, 0Fbfc90fda;
	fma_ftz_f32	$s6, $s4, 0F3fc90fda, $s6;
	fma_ftz_f32	$s4, $s4, 0F33a22168, $s6;
	fma_ftz_f32	$s5, $s5, 0F3fc90fda, $s4;
	add_ftz_f32	$s4, $s5, $s3;
	sub_ftz_f32	$s3, $s4, $s3;
	sub_ftz_f32	$s3, $s5, $s3;

@BB0_3:
	// %argReductionS.exit
	mov_b32	$s5, $s4;
	and_b32	$s5, $s5, 2147483647;
	add_u32	$s6, $s5, 4278190080;
	add_u32	$s7, $s5, 3244713574;
	cmp_lt_b1_u32	$c0, $s7, 11429479;
	cmov_b32	$s6, $c0, $s6, 0;
	cmp_gt_b1_u32	$c0, $s5, 1061683200;
	cmov_b32	$s7, $c0, 1049624576, $s6;
	and_b32	$s5, $s2, 2;
	cmp_gt_b1_u32	$c0, $s5, 1;
	cvt_u32_b1	$s5, $c0;
	mul_ftz_f32	$s6, $s4, $s4;
	nfma_f32	$s8, $s6, 0F2f2ec9d3, 0Fb2d72f34;
	nfma_f32	$s8, $s6, $s8, 0F3636df25;
	nfma_f32	$s8, $s6, $s8, 0Fb95009d4;
	nfma_f32	$s9, $s6, $s8, 0F3c088887;
	mul_ftz_f32	$s8, $s4, $s6;
	neg_f32	$s10, $s8;
	neg_f32	$s11, $s4;
	mul_ftz_f32	$s9, $s9, $s10;
	sub_ftz_f32	$s10, 0F3f800000, $s7;
	mul_ftz_f32	$s11, $s3, $s11;
	nfma_f32	$s12, $s6, 0Fad47d74e, 0F310f74f6;
	nfma_f32	$s12, $s6, $s12, 0Fb492923a;
	nfma_f32	$s12, $s6, $s12, 0F37d00ae2;
	nfma_f32	$s12, $s6, $s12, 0Fbab60b60;
	nfma_f32	$s12, $s6, $s12, 0F3d2aaaab;
	mul_ftz_f32	$s12, $s6, $s12;
	and_b32	$s2, $s2, 1;
	nfma_f32	$s11, $s6, $s12, $s11;
	neg_f32	$s7, $s7;
	nfma_f32	$s7, $s6, 0F3f000000, $s7;
	sub_ftz_f32	$s7, $s7, $s11;
	sub_ftz_f32	$s7, $s10, $s7;
	nfma_f32	$s9, $s3, 0F3f000000, $s9;
	neg_f32	$s3, $s3;
	nfma_f32	$s3, $s6, $s9, $s3;
	nfma_f32	$s3, $s8, 0F3e2aaaab, $s3;
	sub_ftz_f32	$s3, $s4, $s3;
	neg_f32	$s4, $s3;
	cvt_b1_u32	$c0, $s2;
	cmov_b32	$s2, $c0, $s4, $s7;
	cmov_b32	$s3, $c0, $s7, $s3;
	xor_b32	$s4, $s0, $s1;
	shl_u32	$s1, $s5, 31;
	xor_b32	$s4, $s4, $s1;
	xor_b32	$s3, $s4, $s3;
	cmp_gt_b1_u32	$c0, $s0, 2139095039;
	cmov_b32	$s0, $c0, 2143289344, $s3;
	xor_b32	$s1, $s2, $s1;
	cmov_b32	$s1, $c0, 2143289344, $s1;
	st_align(4)_f32	$s1, [$d0];
	st_arg_align(4)_f32	$s0, [%_gcc_sincos];
	ret;
};


decl function &_gcc_half_recip(arg_f32 %ret)(arg_f32 %x);


function &_gcc_half_recip(arg_f32 %_gcc_half_recip)(arg_f32 %x)
{

@_gcc_half_recip_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	nrcp_f32	$s0, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_half_recip];
	ret;
};


decl function &_gcc_atanpi(arg_f32 %ret)(arg_f32 %x);


function &_gcc_atanpi(arg_f32 %_gcc_atanpi)(arg_f32 %x)
{

@_gcc_atanpi_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s3, $s0;
	and_b32	$s1, $s3, 2147483647;
	mov_b32	$s2, $s1;
	add_ftz_f32	$s4, $s2, 0Fbfc00000;
	nfma_f32	$s5, $s2, 0F3fc00000, 0F3f800000;
	nrcp_f32	$s5, $s5;
	mul_ftz_f32	$s4, $s4, $s5;
	nrcp_f32	$s5, $s2;
	neg_f32	$s5, $s5;
	cmp_lt_b1_u32	$c0, $s1, 1075576832;
	cmov_b32	$s4, $c0, $s4, $s5;
	cmov_b32	$s5, $c0, 1065064543, 1070141403;
	add_ftz_f32	$s6, $s2, 0Fbf800000;
	add_ftz_f32	$s7, $s2, 0F3f800000;
	nrcp_f32	$s7, $s7;
	mul_ftz_f32	$s6, $s6, $s7;
	cmp_lt_b1_u32	$c0, $s1, 1066926080;
	cmov_b32	$s4, $c0, $s6, $s4;
	cmov_b32	$s6, $c0, 1061752795, $s5;
	nfma_f32	$s5, $s2, 0F40000000, 0Fbf800000;
	add_ftz_f32	$s7, $s2, 0F40000000;
	nrcp_f32	$s7, $s7;
	mul_ftz_f32	$s5, $s5, $s7;
	cmp_lt_b1_u32	$c0, $s1, 1060110336;
	cmov_b32	$s5, $c0, $s5, $s4;
	cmov_b32	$s6, $c0, 1055744824, $s6;
	xor_b32	$s3, $s1, $s3;
	or_b32	$s4, $s3, 1056964608;
	cmp_lt_b1_u32	$c0, $s1, 2139095041;
	cmov_b32	$s4, $c0, $s4, $s0;
	cmp_lt_b1_u32	$c0, $s1, 1054867456;
	cmov_b32	$s2, $c0, $s2, $s5;
	cmov_b32	$s5, $c0, 0, $s6;
	mul_ftz_f32	$s6, $s2, $s2;
	nfma_f32	$s7, $s6, 0F3b9a3b54, 0F3e44f0ba;
	nfma_f32	$s7, $s6, $s7, 0F3e97d299;
	nfma_f32	$s8, $s6, 0F3e993f1f, 0F3f8e2c3d;
	nfma_f32	$s8, $s6, $s8, 0F3f63bbe5;
	nrcp_f32	$s8, $s8;
	mul_ftz_f32	$s7, $s7, $s8;
	mul_ftz_f32	$s6, $s2, $s6;
	mul_ftz_f32	$s6, $s6, $s7;
	sub_ftz_f32	$s2, $s6, $s2;
	sub_ftz_f32	$s2, $s5, $s2;
	mul_ftz_f32	$s2, $s2, 0F3ea2f983;
	or_b32	$s2, $s2, $s3;
	cmp_lt_b1_u32	$c0, $s1, 1283457024;
	cmov_b32	$s2, $c0, $s2, $s4;
	mul_ftz_f32	$s0, $s0, 0F3ea2f983;
	cmp_lt_b1_u32	$c0, $s1, 905969664;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_atanpi];
	ret;
};


decl function &_gcc_hypot(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y);


function &_gcc_hypot(arg_f32 %_gcc_hypot)(
	arg_f32 %x,
	arg_f32 %y)
{

@_gcc_hypot_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s2, [%y];
	mov_b32	$s3, $s2;
	and_b32	$s1, $s3, 2147483647;
	ld_arg_align(4)_f32	$s4, [%x];
	mov_b32	$s5, $s4;
	and_b32	$s7, $s5, 2147483647;
	min_u32	$s0, $s7, $s1;
	mov_b32	$s6, $s0;
	max_u32	$s1, $s7, $s1;
	cmp_lt_b1_u32	$c0, $s1, 2130706431;
	cmp_gt_ftz_b1_f32	$c1, $s6, 0F00000000;
	and_b1	$c0, $c1, $c0;
	cmp_ne_b1_b1	$c0, $c0, 1;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	shr_u32	$s3, $s1, 23;
	mov_b32	$s2, $s1;
	add_u32	$s3, $s3, 4294967169;
	max_s32	$s3, $s3, -126;
	min_s32	$s3, $s3, 126;
	sub_u32	$s4, 127, $s3;
	shl_u32	$s4, $s4, 23;
	mov_b32	$s5, $s4;
	mul_ftz_f32	$s4, $s2, $s5;
	mul_ftz_f32	$s5, $s6, $s5;
	mul_ftz_f32	$s5, $s5, $s5;
	nfma_f32	$s4, $s4, $s4, $s5;
	nsqrt_f32	$s4, $s4;
	shl_u32	$s3, $s3, 23;
	add_u32	$s3, $s3, 1065353216;
	mul_ftz_f32	$s3, $s4, $s3;
	br	@BB0_7;

@BB0_2:
	and_b32	$s6, $s5, 8388607;
	or_b32	$s7, $s6, 1065353216;
	add_ftz_f32	$s7, $s7, 0Fbf800000;
	cvt_ftz_f64_f32	$d0, $s7;
	add_u64	$d0, $d0, 17879290520660869120;
	cmp_ne_b1_s32	$c0, $s6, 0;
	cmov_b64	$d0, $c0, $d0, 0;
	neg_f64	$d1, $d0;
	cmp_lt_b1_s32	$c0, $s5, 0;
	cmov_b64	$d0, $c0, $d1, $d0;
	and_b32	$s5, $s3, 8388607;
	or_b32	$s6, $s5, 1065353216;
	add_ftz_f32	$s6, $s6, 0Fbf800000;
	cvt_ftz_f64_f32	$d1, $s6;
	add_u64	$d1, $d1, 17879290520660869120;
	cmp_ne_b1_s32	$c0, $s5, 0;
	cmov_b64	$d1, $c0, $d1, 0;
	cvt_ftz_f64_f32	$d2, $s4;
	cmp_neu_ftz_b1_f32	$c0, $s4, 0F00000000;
	cmov_b64	$d0, $c0, $d2, $d0;
	neg_f64	$d2, $d1;
	cmp_lt_b1_s32	$c0, $s3, 0;
	cmov_b64	$d1, $c0, $d2, $d1;
	cvt_ftz_f64_f32	$d2, $s2;
	cmp_neu_ftz_b1_f32	$c0, $s2, 0F00000000;
	cmov_b64	$d1, $c0, $d2, $d1;
	mul_f64	$d1, $d1, $d1;
	mul_f64	$d0, $d0, $d0;
	add_f64	$d0, $d0, $d1;
	sqrt_f64	$d1, $d0;
	neg_f64	$d0, $d1;
	cmp_lt_b1_f64	$c0, $d1, 0D0000000000000000;
	cmov_b64	$d0, $c0, $d0, $d1;
	mov_b64	$d2, $d1;
	cvt_u32_u64	$s3, $d2;
	shr_u32	$s2, $s3, 29;
	shr_u64	$d3, $d2, 29;
	cvt_u32_u64	$s4, $d3;
	and_b32	$s4, $s4, 8388600;
	or_b32	$s2, $s2, $s4;
	or_b32	$s2, $s2, 8388608;
	shl_u32	$s5, $s3, 3;
	shr_u64	$d3, $d2, 52;
	cvt_u32_u64	$s3, $d3;
	and_b32	$s3, $s3, 2047;
	sub_u32	$s6, 897, $s3;
	shr_u32	$s3, $s2, $s6;
	shr_u32	$s4, $s5, $s6;
	neg_s32	$s6, $s6;
	shl_u32	$s7, $s2, $s6;
	cvt_ftz_near_f32_f64	$s2, $d1;
	shr_u64	$d1, $d2, 32;
	or_b32	$s7, $s4, $s7;
	cvt_u32_u64	$s4, $d1;
	and_b32	$s4, $s4, 2147483648;
	cmp_gt_b1_u32	$c0, $s7, 2147483648;
	cbr_b1	$c0, @BB0_5;
	// BB#3:
	cmp_ne_b1_s32	$c0, $s7, -2147483648;
	cbr_b1	$c0, @BB0_6;
	// BB#4:
	shl_u32	$s5, $s5, $s6;
	and_b32	$s6, $s3, 1;
	or_b32	$s5, $s6, $s5;
	cmp_eq_b1_s32	$c0, $s5, 0;
	cbr_b1	$c0, @BB0_6;

@BB0_5:
	add_u32	$s3, $s3, 1;

@BB0_6:
	// %double_to_float_uint.exit
	or_b32	$s3, $s3, $s4;
	cmp_ge_b1_f64	$c0, $d0, 0D3690000000000001;
	cmov_b32	$s3, $c0, $s3, 0;
	mov_b32	$s4, $s2;
	cmp_neu_ftz_b1_f32	$c0, $s2, 0F00000000;
	cmov_b32	$s2, $c0, $s4, $s3;
	mov_b32	$s3, $s2;
	mov_b32	$s2, $s1;

@BB0_7:
	cmp_eq_b1_s32	$c0, $s0, 0;
	cmp_gt_b1_u32	$c1, $s1, 2139095040;
	or_b1	$c0, $c1, $c0;
	cmov_b32	$s2, $c0, $s2, $s3;
	cmp_eq_b1_s32	$c0, $s0, 2139095040;
	cmp_eq_b1_s32	$c1, $s1, 2139095040;
	or_b1	$c0, $c1, $c0;
	cmov_b32	$s0, $c0, 2139095040, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_hypot];
	ret;
};


decl function &_gcc_half_cos(arg_f32 %ret)(arg_f32 %x);


function &_gcc_half_cos(arg_f32 %_gcc_half_cos)(arg_f32 %x)
{

@_gcc_half_cos_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	and_b32	$s0, $s0, 2147483647;
	mov_b32	$s3, $s0;
	nfma_f32	$s4, $s3, 0F3f22f983, 0F3f000000;
	cvt_ftz_s32_f32	$s2, $s4;
	and_b32	$s1, $s2, 2;
	cmp_gt_b1_u32	$c0, $s1, 1;
	cvt_u32_b1	$s1, $c0;
	trunc_ftz_f32	$s4, $s4;
	mul_ftz_f32	$s5, $s4, 0Fbfc90fda;
	fma_ftz_f32	$s5, $s4, 0F3fc90fda, $s5;
	mul_ftz_f32	$s7, $s4, 0F3fc90fda;
	sub_ftz_f32	$s6, $s3, $s7;
	sub_ftz_f32	$s3, $s3, $s6;
	sub_ftz_f32	$s3, $s3, $s7;
	sub_ftz_f32	$s3, $s3, $s5;
	add_ftz_f32	$s6, $s6, $s3;
	mul_ftz_f32	$s7, $s4, 0F33a22168;
	sub_ftz_f32	$s3, $s6, $s7;
	mul_ftz_f32	$s5, $s4, 0Fb3a22168;
	fma_ftz_f32	$s8, $s4, 0F33a22168, $s5;
	mul_ftz_f32	$s5, $s4, 0F27c234c4;
	sub_ftz_f32	$s6, $s6, $s3;
	sub_ftz_f32	$s6, $s6, $s7;
	sub_ftz_f32	$s6, $s6, $s8;
	add_ftz_f32	$s6, $s3, $s6;
	sub_ftz_f32	$s3, $s6, $s5;
	sub_ftz_f32	$s6, $s6, $s3;
	sub_ftz_f32	$s5, $s6, $s5;
	add_ftz_f32	$s3, $s3, $s5;
	mov_b32	$s5, $s3;
	and_b32	$s5, $s5, 2147483647;
	add_u32	$s6, $s5, 4278190080;
	add_u32	$s7, $s5, 3244713574;
	cmp_lt_b1_u32	$c0, $s7, 11429479;
	cmov_b32	$s6, $c0, $s6, 0;
	cmp_gt_b1_u32	$c0, $s5, 1061683200;
	cmov_b32	$s5, $c0, 1049624576, $s6;
	mul_ftz_f32	$s6, $s4, 0Fa7c234c4;
	fma_ftz_f32	$s4, $s4, 0F27c234c4, $s6;
	neg_f32	$s6, $s4;
	and_b32	$s2, $s2, 1;
	mul_ftz_f32	$s7, $s3, $s3;
	nfma_f32	$s8, $s7, 0Fad47d74e, 0F310f74f6;
	nfma_f32	$s8, $s7, $s8, 0Fb492923a;
	nfma_f32	$s8, $s7, $s8, 0F37d00ae2;
	nfma_f32	$s8, $s7, $s8, 0Fbab60b60;
	nfma_f32	$s8, $s7, $s8, 0F3d2aaaab;
	mul_ftz_f32	$s8, $s8, $s7;
	mul_ftz_f32	$s9, $s4, $s3;
	nfma_f32	$s8, $s7, $s8, $s9;
	neg_f32	$s9, $s5;
	nfma_f32	$s9, $s7, 0F3f000000, $s9;
	nfma_f32	$s10, $s7, 0F2f2ec9d3, 0Fb2d72f34;
	sub_ftz_f32	$s8, $s9, $s8;
	nfma_f32	$s9, $s7, $s10, 0F3636df25;
	nfma_f32	$s9, $s7, $s9, 0Fb95009d4;
	nfma_f32	$s10, $s7, $s9, 0F3c088887;
	mul_ftz_f32	$s9, $s3, $s7;
	neg_f32	$s11, $s9;
	sub_ftz_f32	$s5, 0F3f800000, $s5;
	sub_ftz_f32	$s5, $s5, $s8;
	mul_ftz_f32	$s8, $s10, $s11;
	nfma_f32	$s6, $s6, 0F3f000000, $s8;
	nfma_f32	$s4, $s7, $s6, $s4;
	nfma_f32	$s4, $s9, 0F3e2aaaab, $s4;
	sub_ftz_f32	$s3, $s3, $s4;
	neg_f32	$s3, $s3;
	cvt_b1_u32	$c0, $s2;
	cmov_b32	$s2, $c0, $s3, $s5;
	shl_u32	$s1, $s1, 31;
	xor_b32	$s1, $s2, $s1;
	cmp_gt_b1_u32	$c0, $s0, 1199570944;
	cmov_b32	$s1, $c0, 1065353216, $s1;
	cmp_gt_b1_u32	$c0, $s0, 2139095039;
	cmov_b32	$s0, $c0, 2143289344, $s1;
	st_arg_align(4)_f32	$s0, [%_gcc_half_cos];
	ret;
};


decl function &_gcc_rint(arg_f32 %ret)(arg_f32 %x);


function &_gcc_rint(arg_f32 %_gcc_rint)(arg_f32 %x)
{

@_gcc_rint_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	rint_ftz_f32	$s0, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_rint];
	ret;
};


decl function &_gcc_acospi(arg_f32 %ret)(arg_f32 %x);


function &_gcc_acospi(arg_f32 %_gcc_acospi)(arg_f32 %x)
{

@_gcc_acospi_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s3, [%x];
	mov_b32	$s0, $s3;
	and_b32	$s1, $s0, 2147483647;
	mov_b32	$s2, $s1;
	mul_ftz_f32	$s4, $s2, $s2;
	sub_ftz_f32	$s2, 0F3f800000, $s2;
	mul_ftz_f32	$s5, $s2, 0F3f000000;
	shr_u32	$s2, $s1, 23;
	add_u32	$s2, $s2, 4294967169;
	cmp_gt_b1_s32	$c0, $s2, -2;
	cmov_b32	$s5, $c0, $s5, $s4;
	nsqrt_f32	$s4, $s5;
	mov_b32	$s6, $s4;
	and_b32	$s6, $s6, 4294901760;
	mul_ftz_f32	$s7, $s6, $s6;
	sub_ftz_f32	$s7, $s5, $s7;
	add_ftz_f32	$s8, $s4, $s6;
	nrcp_f32	$s8, $s8;
	mul_ftz_f32	$s7, $s7, $s8;
	nfma_f32	$s8, $s5, 0Fbb81ce6b, 0Fbc5b3fe1;
	nfma_f32	$s8, $s5, $s8, 0Fbd678bdd;
	nfma_f32	$s8, $s5, $s8, 0F3e3c94dc;
	nfma_f32	$s9, $s5, 0Fbf561f0d, 0F3f8d6fa5;
	nrcp_f32	$s9, $s9;
	mul_ftz_f32	$s8, $s8, $s9;
	mul_ftz_f32	$s5, $s5, $s8;
	nfma_f32	$s7, $s4, $s5, $s7;
	add_ftz_f32	$s6, $s6, $s7;
	add_ftz_f32	$s6, $s6, $s6;
	mul_ftz_f32	$s6, $s6, 0F3ea2f983;
	nfma_f32	$s7, $s4, $s5, 0Fa48d3132;
	add_ftz_f32	$s4, $s4, $s7;
	mul_ftz_f32	$s4, $s4, 0Fc0000000;
	mul_ftz_f32	$s4, $s4, 0F3ea2f983;
	add_ftz_f32	$s4, $s4, 0F3f800000;
	cmp_ne_b1_s32	$c1, $s0, $s1;
	cmov_b32	$s4, $c1, $s4, $s6;
	neg_f32	$s5, $s5;
	nfma_f32	$s5, $s3, $s5, 0F248d3132;
	sub_ftz_f32	$s3, $s3, $s5;
	sub_ftz_f32	$s3, 0F3fc90fdb, $s3;
	mul_ftz_f32	$s3, $s3, 0F3ea2f983;
	cmov_b32	$s3, $c0, $s4, $s3;
	cmp_gt_b1_u32	$c0, $s1, 1065353216;
	cmov_b32	$s1, $c0, 2143289344, $s3;
	cmp_eq_b1_s32	$c0, $s0, 1065353216;
	cmov_b32	$s1, $c0, 0, $s1;
	cmp_eq_b1_s32	$c0, $s0, -1082130432;
	cmov_b32	$s0, $c0, 1065353216, $s1;
	cmp_lt_b1_s32	$c0, $s2, -26;
	cmov_b32	$s0, $c0, 1056964608, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_acospi];
	ret;
};

align(8) readonly_f32 &__math32_LOG_INV_TBL_EP[258] = f32[](0F40000000, 0F00000000, 0F3ffe0000, 0F38fe03f8, 0F3ffc0000, 0F39fc0fc1, 0F3ffa0000, 0F3a8cb3c9, 0F3ff80000, 0F3af83e10, 0F3ff60000, 0F3b407b30, 0F3ff40000, 0F3b898d60, 0F3ff20000, 0F3bb9d648, 0F3ff00000, 0F3bf0f0f1, 0F3fef0000, 0F3abadc7f, 0F3fed0000, 0F3b66076c, 0F3feb0000, 0F3bbdb2a6, 0F3fea0000, 0F39ea0ea1, 0F3fe80000, 0F3b4b58f7, 0F3fe60000, 0F3bc2b448, 0F3fe50000, 0F3a9660ac, 0F3fe30000, 0F3b8e38e4, 0F3fe10000, 0F3bfc780e, 0F3fe00000, 0F3b607038, 0F3fde0000, 0F3be95c4d, 0F3fdd0000, 0F3b4f914c, 0F3fdb0000, 0F3beb61ef, 0F3fda0000, 0F3b681b4f, 0F3fd90000, 0F385901b2, 0F3fd70000, 0F3b9435e5, 0F3fd60000, 0F3aae0359, 0F3fd40000, 0F3bc77b03, 0F3fd30000, 0F3b501a6d, 0F3fd20000, 0F39d20d21, 0F3fd00000, 0F3bb69fcc, 0F3fcf0000, 0F3b48e951, 0F3fce0000, 0F3a3453b9, 0F3fcc0000, 0F3bcccccd, 0F3fcb0000, 0F3b8727c0, 0F3fca0000, 0F3b0b0fcd, 0F3fc90000, 0F397b49d1, 0F3fc70000, 0F3bce0c7d, 0F3fc60000, 0F3b980c6a, 0F3fc50000, 0F3b4b90f7, 0F3fc40000, 0F3adcbe15, 0F3fc30000, 0F39c30c31, 0F3fc10000, 0F3be4bbd6, 0F3fc00000, 0F3bc0c0c1, 0F3fbf0000, 0F3ba02fe8, 0F3fbe0000, 0F3b82fa0c, 0F3fbd0000, 0F3b52208e, 0F3fbc0000, 0F3b24c818, 0F3fbb0000, 0F3afb9c87, 0F3fba0000, 0F3aba2e8c, 0F3fb90000, 0F3a850fe9, 0F3fb80000, 0F3a381703, 0F3fb70000, 0F39fbb5a2, 0F3fb60000, 0F39b60b61, 0F3fb50000, 0F399e68aa, 0F3fb40000, 0F39b40b41, 0F3fb30000, 0F39f63529, 0F3fb20000, 0F3a321643, 0F3fb10000, 0F3a7e9dc0, 0F3fb00000, 0F3ab02c0b, 0F3faf0000, 0F3aeb771a, 0F3fae0000, 0F3b1882b9, 0F3fad0000, 0F3b4056b0, 0F3fac0000, 0F3b6d2308, 0F3fab0000, 0F3b8f69e3, 0F3faa0000, 0F3baaaaab, 0F3fa90000, 0F3bc84a48, 0F3fa80000, 0F3be83f57, 0F3fa80000, 0F39a80a81, 0F3fa70000, 0F3abc14e6, 0F3fa60000, 0F3b2b8872, 0F3fa50000, 0F3b7d6a05, 0F3fa40000, 0F3ba9cf1e, 0F3fa30000, 0F3bd70a3d, 0F3fa30000, 0F394bc7f6, 0F3fa20000, 0F3adf0cac, 0F3fa10000, 0F3b56625d, 0F3fa00000, 0F3ba0a0a1, 0F3f9f0000, 0F3bd809fe, 0F3f9f0000, 0F3a0b2f39, 0F3f9e0000, 0F3b195a48, 0F3f9d0000, 0F3b89d89e, 0F3f9c0000, 0F3bc8e161, 0F3f9c0000, 0F399c09c1, 0F3f9b0000, 0F3b18df3e, 0F3f9a0000, 0F3b90e7d9, 0F3f990000, 0F3bd722db, 0F3f990000, 0F3a78d28b, 0F3f980000, 0F3b519013, 0F3f970000, 0F3bb425ed, 0F3f970000, 0F3817012e, 0F3f960000, 0F3b1fb4d8, 0F3f950000, 0F3ba02568, 0F3f940000, 0F3bf2094f, 0F3f940000, 0F3b0b0129, 0F3f930000, 0F3b9a85c4, 0F3f920000, 0F3bf11384, 0F3f920000, 0F3b124925, 0F3f910000, 0F3ba2b3c5, 0F3f900000, 0F3bfdbc09, 0F3f900000, 0F3b3470c6, 0F3f8f0000, 0F3bb823ee, 0F3f8f0000, 0F3a3bced0, 0F3f8e0000, 0F3b706ada, 0F3f8d0000, 0F3bda5202, 0F3f8d0000, 0F3af72c23, 0F3f8c0000, 0F3ba29c04, 0F3f8c0000, 0F398c08c1, 0F3f8b0000, 0F3b606894, 0F3f8a0000, 0F3bd8f2fc, 0F3f8a0000, 0F3b05f0e1, 0F3f890000, 0F3bae408a, 0F3f890000, 0F3a5639d7, 0F3f880000, 0F3b888889, 0F3f870000, 0F3bf78088, 0F3f870000, 0F3b4f56be, 0F3f860000, 0F3bd90544, 0F3f860000, 0F3b1714fc, 0F3f850000, 0F3bbf3761, 0F3f850000, 0F3ad0214d, 0F3f840000, 0F3ba9f9c8, 0F3f840000, 0F3a842108, 0F3f830000, 0F3b993052, 0F3f830000, 0F3a1374bc, 0F3f820000, 0F3b8cbfbf, 0F3f820000, 0F39820821, 0F3f810000, 0F3b848da9, 0F3f810000, 0F38810204, 0F3f800000, 0F3b808081, 0F3f800000, 0F00000000);

decl function &_gcc_pow(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y);


function &_gcc_pow(arg_f32 %_gcc_pow)(
	arg_f32 %x,
	arg_f32 %y)
{
	align(4) spill_u8 %__spillStack[44];

@_gcc_pow_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s8, [%y];
	mov_b32	$s1, $s8;
	and_b32	$s0, $s1, 2147483647;
	shr_u32	$s2, $s0, 23;
	sub_u32	$s3, 150, $s2;
	shl_u32	$s3, 1, $s3;
	and_b32	$s4, $s3, $s1;
	cmp_ne_b1_s32	$c0, $s4, 0;
	cmov_b32	$s4, $c0, 1, 2;
	add_u32	$s3, $s3, 4294967295;
	and_b32	$s3, $s3, $s1;
	cmp_ne_b1_s32	$c0, $s3, 0;
	cmov_b32	$s3, $c0, 0, $s4;
	add_u32	$s7, $s2, 4294967170;
	cmp_lt_b1_s32	$c0, $s7, 1;
	cmov_b32	$s9, $c0, 0, $s3;
	ld_arg_align(4)_f32	$s2, [%x];
	and_b32	$s3, $s2, 2147483647;
	or_b32	$s6, $s3, 1065353216;
	shr_u32	$s5, $s3, 23;
	add_u32	$s4, $s5, 4294967169;
	add_ftz_f32	$s6, $s6, 0Fbf800000;
	shr_s32	$s10, $s6, 23;
	add_u32	$s11, $s10, 4294967043;
	cmp_eq_b1_s32	$c0, $s5, 0;
	cmov_b32	$s10, $c0, $s6, $s3;
	cmov_b32	$s11, $c0, $s11, $s4;
	cmp_ne_b1_s32	$c0, $s2, $s3;
	cvt_u32_b1	$s6, $c0;
	cmp_eq_b1_s32	$c0, $s2, -1082130432;
	cmp_eq_b1_s32	$c1, $s0, 2139095040;
	and_b1	$c0, $c0, $c1;
	cvt_u32_b1	$s4, $c0;
	st_spill_align(4)_u32	$s4, [%__spillStack];
	cmp_eq_b1_s32	$c0, $s2, $s3;
	cmov_b32	$s4, $c0, 0, 2147483648;
	cmov_b32	$s5, $c0, 2139095040, 4286578688;
	cmp_eq_b1_s32	$c1, $s1, $s0;
	cmp_ne_b1_s32	$c2, $s1, $s0;
	cmp_eq_b1_s32	$c0, $s2, -8388608;
	and_b1	$c3, $c2, $c0;
	and_b1	$c0, $c0, $c1;
	cmp_eq_b1_s32	$c5, $s2, 2139095040;
	cmp_eq_b1_s32	$c4, $s3, 0;
	and_b1	$c7, $c2, $c4;
	and_b1	$c2, $c2, $c5;
	cvt_u32_b1	$s12, $c2;
	st_spill_align(4)_u32	$s12, [%__spillStack][8];
	and_b1	$c2, $c5, $c1;
	cvt_u32_b1	$s12, $c2;
	st_spill_align(4)_u32	$s12, [%__spillStack][12];
	and_b1	$c5, $c4, $c1;
	cmp_eq_b1_s32	$c1, $s1, -8388608;
	and_b1	$c2, $c4, $c1;
	cvt_u32_b1	$s12, $c2;
	st_spill_align(4)_u32	$s12, [%__spillStack][16];
	cmp_eq_b1_s32	$c2, $s1, 2139095040;
	cmp_lt_b1_u32	$c4, $s3, 1065353216;
	and_b1	$c6, $c4, $c1;
	cvt_u32_b1	$s12, $c6;
	st_spill_align(4)_u32	$s12, [%__spillStack][28];
	and_b1	$c4, $c4, $c2;
	cvt_u32_b1	$s12, $c4;
	st_spill_align(4)_u32	$s12, [%__spillStack][20];
	cmp_gt_b1_u32	$c4, $s3, 1065353216;
	and_b1	$c2, $c4, $c2;
	cvt_u32_b1	$s12, $c2;
	st_spill_align(4)_u32	$s12, [%__spillStack][32];
	and_b1	$c1, $c4, $c1;
	cvt_u32_b1	$s12, $c1;
	st_spill_align(4)_u32	$s12, [%__spillStack][40];
	cmp_gt_b1_s32	$c1, $s7, 24;
	cmov_b32	$s12, $c1, 2, $s9;
	cmp_eq_b1_s32	$c1, $s12, 0;
	cvt_u32_b1	$s7, $c1;
	cmp_eq_b1_s32	$c1, $s12, 1;
	cvt_u32_b1	$s9, $c1;
	cmp_ne_b1_s32	$c6, $s12, 1;
	and_b1	$c2, $c0, $c6;
	cvt_u32_b1	$s12, $c2;
	st_spill_align(4)_u32	$s12, [%__spillStack][24];
	and_b1	$c0, $c0, $c1;
	cvt_u32_b1	$s12, $c0;
	st_spill_align(4)_u32	$s12, [%__spillStack][36];
	and_b1	$c2, $c6, $c3;
	and_b1	$c3, $c1, $c3;
	and_b1	$c4, $c5, $c6;
	and_b1	$c5, $c5, $c1;
	and_b1	$c6, $c6, $c7;
	and_b1	$c7, $c1, $c7;
	and_b32	$s12, $s10, 8323072;
	shl_u32	$s13, $s10, 1;
	and_b32	$s13, $s13, 65536;
	mov_b32	$s14, $s3;
	add_u32	$s12, $s13, $s12;
	sub_ftz_f32	$s19, 0F3f800000, $s14;
	mul_ftz_f32	$s13, $s19, $s19;
	shr_u32	$s14, $s12, 16;
	mul_ftz_f32	$s15, $s19, $s13;
	nfma_f32	$s16, $s19, 0F3e124925, 0F3e2aaaab;
	nfma_f32	$s16, $s19, $s16, 0F3e4ccccd;
	nfma_f32	$s16, $s19, $s16, 0F3e800000;
	nfma_f32	$s16, $s19, $s16, 0F3eaaaaab;
	mul_ftz_f32	$s17, $s15, $s16;
	mul_ftz_f32	$s13, $s13, 0Fbf000000;
	or_b32	$s20, $s12, 1056964608;
	sub_ftz_f32	$s12, $s13, $s17;
	cvt_near_f32_s32	$s18, $s11;
	abs_f32	$s16, $s19;
	cvt_u64_u32	$d0, $s14;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s11, $s15), [&__math32_LOGE_TBL][$d0];
	nfma_f32	$s14, $s18, 0F3f317000, $s11;
	neg_f32	$s11, $s17;
	sub_ftz_f32	$s17, $s12, $s19;
	neg_f32	$s19, $s19;
	and_b32	$s10, $s10, 8388607;
	or_b32	$s10, $s10, 1056964608;
	sub_ftz_f32	$s10, $s20, $s10;
	ld_v2_readonly_align(8)_f32	($s21, $s20), [&__math32_LOG_INV_TBL_EP][$d0];
	mul_ftz_f32	$s20, $s10, $s20;
	mul_ftz_f32	$s21, $s10, $s21;
	add_ftz_f32	$s10, $s21, $s20;
	nfma_f32	$s22, $s10, 0F3e800000, 0F3eaaaaab;
	nfma_f32	$s22, $s10, $s22, 0F3f000000;
	mul_ftz_f32	$s23, $s10, $s10;
	mul_ftz_f32	$s22, $s22, $s23;
	sub_ftz_f32	$s21, $s21, $s10;
	add_ftz_f32	$s20, $s20, $s21;
	add_ftz_f32	$s20, $s22, $s20;
	neg_f32	$s20, $s20;
	nfma_f32	$s20, $s18, 0F3805fdf4, $s20;
	neg_f32	$s18, $s10;
	cmp_lt_ftz_b1_f32	$c0, $s16, 0F3d800000;
	cmov_b32	$s18, $c0, $s13, $s18;
	cmov_b32	$s16, $c0, $s19, $s14;
	add_ftz_f32	$s15, $s20, $s15;
	sub_ftz_f32	$s10, $s15, $s10;
	add_ftz_f32	$s13, $s14, $s10;
	cmov_b32	$s13, $c0, $s17, $s13;
	cmov_b32	$s14, $c0, $s11, $s15;
	cmov_b32	$s11, $c0, $s12, $s10;
	and_b32	$s10, $s1, 4294963200;
	sub_ftz_f32	$s8, $s8, $s10;
	sub_ftz_f32	$s12, $s11, $s18;
	sub_ftz_f32	$s12, $s14, $s12;
	sub_ftz_f32	$s14, $s16, $s13;
	add_ftz_f32	$s11, $s11, $s14;
	add_ftz_f32	$s12, $s12, $s11;
	mov_b32	$s11, $s13;
	and_b32	$s11, $s11, 4294963200;
	sub_ftz_f32	$s13, $s13, $s11;
	add_ftz_f32	$s12, $s12, $s13;
	mul_ftz_f32	$s13, $s8, $s12;
	nfma_f32	$s8, $s11, $s8, $s13;
	nfma_f32	$s12, $s12, $s10, $s8;
	nfma_f32	$s8, $s10, $s11, $s12;
	neg_f32	$s13, $s8;
	nfma_f32	$s10, $s10, $s11, $s13;
	add_ftz_f32	$s12, $s12, $s10;
	cmp_gt_ftz_b1_f32	$c0, $s12, 0Fb482e308;
	cmp_eq_ftz_b1_f32	$c1, $s8, 0F42b17218;
	and_b1	$c0, $c1, $c0;
	mul_ftz_f32	$s10, $s8, 0F42b8aa3b;
	cvt_ftz_s32_f32	$s13, $s10;
	shr_s32	$s11, $s13, 6;
	cmp_eq_b1_s32	$c1, $s11, -126;
	cmov_b32	$s10, $c1, 1, $s11;
	cmp_gt_ftz_b1_f32	$c1, $s8, 0F42b17218;
	or_b1	$c0, $c1, $c0;
	cvt_near_f32_s32	$s14, $s13;
	nfma_f32	$s15, $s14, 0Fbc310000, $s8;
	nfma_f32	$s14, $s14, 0Fb7e42fef, $s15;
	add_ftz_f32	$s12, $s12, $s14;
	nfma_f32	$s14, $s12, 0F3d2aaaab, 0F3e2aaaab;
	nfma_f32	$s14, $s14, $s12, 0F3f000000;
	mul_ftz_f32	$s15, $s12, $s12;
	nfma_f32	$s12, $s14, $s15, $s12;
	and_b32	$s13, $s13, 63;
	cvt_u64_u32	$d0, $s13;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s14, $s13), [&__math32_EXP_TBL_EP][$d0];
	nfma_f32	$s15, $s13, $s12, $s13;
	sub_u32	$s13, 4294967170, $s10;
	shl_u32	$s11, $s11, 23;
	nfma_f32	$s12, $s14, $s12, $s15;
	add_ftz_f32	$s12, $s14, $s12;
	add_u32	$s11, $s12, $s11;
	and_b32	$s12, $s12, 8388607;
	or_b32	$s12, $s12, 8388608;
	shr_u32	$s12, $s12, $s13;
	cmp_lt_b1_s32	$c1, $s10, -125;
	cmov_b32	$s10, $c1, $s12, $s11;
	cmov_b32	$s10, $c0, 2139095040, $s10;
	cmp_lt_ftz_b1_f32	$c0, $s8, 0Fc2ce8ed0;
	cmov_b32	$s8, $c0, 0, $s10;
	and_b32	$s9, $s9, $s6;
	mov_b32	$s10, $s8;
	xor_b32	$s10, $s10, 2147483648;
	cmp_ne_b1_s32	$c0, $s9, 0;
	cmov_b32	$s8, $c0, $s10, $s8;
	and_b32	$s6, $s7, $s6;
	mov_b32	$s7, $s8;
	cmp_ne_b1_s32	$c0, $s6, 0;
	cmov_b32	$s6, $c0, 2143289344, $s7;
	ld_spill_align(4)_u32	$s7, [%__spillStack][28];
	cvt_b1_u32	$c0, $s7;
	cmov_b32	$s6, $c0, 2139095040, $s6;
	ld_spill_align(4)_u32	$s7, [%__spillStack][40];
	cvt_b1_u32	$c0, $s7;
	cmov_b32	$s6, $c0, 0, $s6;
	ld_spill_align(4)_u32	$s7, [%__spillStack][20];
	cvt_b1_u32	$c0, $s7;
	cmov_b32	$s6, $c0, 0, $s6;
	ld_spill_align(4)_u32	$s7, [%__spillStack][32];
	cvt_b1_u32	$c0, $s7;
	cmov_b32	$s6, $c0, 2139095040, $s6;
	cmov_b32	$s5, $c7, $s5, $s6;
	cmov_b32	$s5, $c6, 2139095040, $s5;
	cmov_b32	$s4, $c5, $s4, $s5;
	cmov_b32	$s4, $c4, 0, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][16];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 2139095040, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 1065353216, $s4;
	cmov_b32	$s4, $c3, 2147483648, $s4;
	cmov_b32	$s4, $c2, 0, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][36];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 4286578688, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][24];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 2139095040, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][8];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 0, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][12];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 2139095040, $s4;
	cmp_gt_b1_u32	$c0, $s3, 2139095040;
	cmov_b32	$s3, $c0, $s2, $s4;
	cmp_gt_b1_u32	$c0, $s0, 2139095040;
	cmov_b32	$s1, $c0, $s1, $s3;
	cmp_eq_b1_s32	$c0, $s0, 0;
	cmov_b32	$s0, $c0, 1065353216, $s1;
	cmp_eq_b1_s32	$c0, $s2, 1065353216;
	cmov_b32	$s0, $c0, 1065353216, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_pow];
	ret;
};


decl function &_gcc_remquo(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y,
	arg_u64 %quo);


function &_gcc_remquo(arg_f32 %_gcc_remquo)(
	arg_f32 %x,
	arg_f32 %y,
	arg_u64 %quo)
{

@_gcc_remquo_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s2, [%y];
	ld_arg_align(4)_f32	$s3, [%x];
	ld_arg_align(8)_u64	$d0, [%quo];
	st_align(4)_u32	0, [$d0];
	mov_b32	$s0, $s3;
	and_b32	$s4, $s0, 2147483647;
	cmp_le_b1_u32	$c0, $s4, 2139095040;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	mov_b32	$s2, $s3;
	br	@BB0_31;

@BB0_2:
	mov_b32	$s5, 2143289344;
	cmp_ne_b1_s32	$c0, $s4, 2139095040;
	cbr_b1	$c0, @BB0_4;
	// BB#3:
	mov_b32	$s2, $s5;
	br	@BB0_31;

@BB0_4:
	mov_b32	$s1, $s2;
	and_b32	$s6, $s1, 2147483647;
	cmp_gt_b1_u32	$c0, $s6, 2139095040;
	cbr_b1	$c0, @BB0_31;
	// BB#5:
	cmp_ne_b1_s32	$c0, $s6, 2139095040;
	cbr_b1	$c0, @BB0_7;
	// BB#6:
	mov_b32	$s2, $s3;
	br	@BB0_31;

@BB0_7:
	or_b32	$s2, $s1, $s0;
	and_b32	$s2, $s2, 2147483647;
	cmp_eq_b1_s32	$c0, $s2, 0;
	mov_b32	$s2, $s5;
	cbr_b1	$c0, @BB0_31;
	// BB#8:
	cmp_eq_b1_s32	$c0, $s4, 0;
	cmp_eq_b1_s32	$c1, $s6, 0;
	or_b1	$c1, $c0, $c1;
	not_b1	$c1, $c1;
	cbr_b1	$c1, @BB0_10;
	// BB#9:
	cmov_b32	$s2, $c0, $s3, 2143289344;
	br	@BB0_31;

@BB0_10:
	bitextract_u32	$s2, $s1, 23, 8;
	sub_u32	$s3, 48, $s2;
	cvt_near_f32_s32	$s3, $s3;
	cmp_gt_b1_u32	$c0, $s2, 47;
	cmov_b32	$s3, $c0, 0, $s3;
	mov_b32	$s2, $s6;
	cmp_eq_ftz_b1_f32	$c0, $s3, 0F00000000;
	mov_b32	$s7, $s2;
	cbr_b1	$c0, @BB0_12;
	// BB#11:
	abs_f32	$s5, $s3;
	cvt_ftz_s32_f32	$s7, $s5;
	cmp_gt_ftz_b1_f32	$c1, $s5, 0F44800000;
	cmov_b32	$s5, $c1, 1024, $s7;
	neg_s32	$s7, $s5;
	cmp_lt_ftz_b1_f32	$c1, $s3, 0F00000000;
	cmov_b32	$s5, $c1, $s7, $s5;
	add_u32	$s7, $s5, 4294967147;
	and_b32	$s8, $s1, 2139095040;
	cmp_eq_b1_s32	$c1, $s8, 0;
	cmov_b32	$s8, $c1, $s7, $s5;
	and_b32	$s7, $s1, 8388607;
	cvt_near_f32_s32	$s7, $s7;
	cmov_b32	$s7, $c1, $s7, $s2;
	shl_u32	$s9, $s8, 23;
	add_u32	$s9, $s9, $s7;
	bitextract_u32	$s10, $s7, 23, 8;
	add_u32	$s10, $s10, $s8;
	add_u32	$s8, $s10, 4294967169;
	cmp_gt_b1_s32	$c1, $s8, 127;
	cmov_b32	$s8, $c1, 2139095040, $s9;
	sub_u32	$s9, 1, $s10;
	and_b32	$s10, $s9, 31;
	cmp_lt_b1_s32	$c1, $s9, 24;
	cmov_b32	$s10, $c1, $s10, 24;
	cmp_lt_b1_s32	$c1, $s9, 0;
	cmov_b32	$s10, $c1, 0, $s10;
	and_b32	$s7, $s7, 8388607;
	or_b32	$s7, $s7, 8388608;
	shr_u32	$s7, $s7, $s10;
	cmp_gt_b1_s32	$c1, $s9, 0;
	cmov_b32	$s7, $c1, $s7, $s8;
	cvt_near_f32_s32	$s5, $s5;
	cmp_gt_ftz_b1_f32	$c1, $s5, 0F437e0000;
	cmov_b32	$s7, $c1, 2139095040, $s7;

@BB0_12:
	bitextract_u32	$s5, $s0, 23, 8;
	mov_b32	$s8, $s7;
	bitextract_u32	$s8, $s8, 23, 8;
	sub_u32	$s9, $s5, $s8;
	cvt_s64_s32	$d1, $s9;
	mul_u64	$d1, $d1, 715827883;
	shr_u64	$d2, $d1, 63;
	cvt_u32_u64	$s9, $d2;
	shr_s64	$d1, $d1, 33;
	cvt_u32_u64	$s10, $d1;
	add_u32	$s9, $s10, $s9;
	cmp_le_b1_u32	$c1, $s5, $s8;
	cmov_b32	$s5, $c1, 0, $s9;
	mul_u32	$s9, $s5, 12;
	shr_s32	$s8, $s9, 1;
	sub_u32	$s9, $s9, $s8;
	shl_u32	$s9, $s9, 23;
	add_u32	$s9, $s9, 1065353216;
	shl_u32	$s8, $s8, 23;
	add_u32	$s8, $s8, 1065353216;
	mul_ftz_f32	$s8, $s7, $s8;
	mul_ftz_f32	$s8, $s8, $s9;
	cmp_eq_b1_s32	$c2, $s5, 0;
	cmov_b32	$s7, $c2, $s7, $s8;
	mov_b32	$s8, $s7;
	bitextract_u32	$s8, $s8, 23, 8;
	add_u32	$s8, $s8, 4294967063;
	cmp_gt_b1_s32	$c3, $s5, 0;
	cmp_lt_b1_u32	$c1, $s8, 22;
	and_b1	$c3, $c1, $c3;
	mul_ftz_f32	$s8, $s7, 0F38800000;
	cmov_b32	$s9, $c3, $s8, $s7;
	cmp_lt_b1_s32	$c3, $s5, 1;
	cbr_b1	$c3, @BB0_13;
	// BB#14:
	cmov_b32	$s8, $c2, 1065353216, 964689920;

@BB0_15:
	// %.lr.ph26
	nrcp_f32	$s9, $s9;
	mul_ftz_f32	$s9, $s4, $s9;
	mul_ftz_f32	$s10, $s9, 0F38800000;
	cmov_b32	$s9, $c1, $s10, $s9;
	floor_ftz_f32	$s10, $s9;
	mul_ftz_f32	$s9, $s7, $s10;
	mov_b32	$s11, $s10;
	and_b32	$s11, $s11, 4294963200;
	mov_b32	$s12, $s7;
	and_b32	$s12, $s12, 4294963200;
	mul_ftz_f32	$s13, $s12, $s11;
	sub_ftz_f32	$s13, $s13, $s9;
	sub_ftz_f32	$s10, $s10, $s11;
	mul_ftz_f32	$s14, $s12, $s10;
	sub_ftz_f32	$s12, $s7, $s12;
	add_ftz_f32	$s13, $s14, $s13;
	mul_ftz_f32	$s11, $s12, $s11;
	add_ftz_f32	$s11, $s11, $s13;
	mul_ftz_f32	$s10, $s12, $s10;
	add_ftz_f32	$s10, $s10, $s11;
	sub_ftz_f32	$s11, $s4, $s9;
	sub_ftz_f32	$s4, $s4, $s11;
	sub_ftz_f32	$s4, $s4, $s9;
	sub_ftz_f32	$s4, $s4, $s10;
	add_ftz_f32	$s4, $s11, $s4;
	add_ftz_f32	$s9, $s7, $s4;
	cmp_lt_ftz_b1_f32	$c1, $s4, 0F00000000;
	cmov_b32	$s9, $c1, $s9, $s4;
	sub_ftz_f32	$s4, $s4, $s7;
	cmp_ge_ftz_b1_f32	$c1, $s9, $s7;
	cmov_b32	$s4, $c1, $s4, $s9;
	mov_b1	$c1, 0;
	mul_ftz_f32	$s7, $s8, $s7;
	add_u32	$s5, $s5, 4294967295;
	cmp_ne_b1_s32	$c2, $s5, 0;
	mov_b32	$s9, $s7;
	cbr_b1	$c2, @BB0_15;
	br	@BB0_16;

@BB0_13:
	mov_b32	$s7, $s9;

@BB0_16:
	// %._crit_edge27
	mul_ftz_f32	$s5, $s7, 0F38800000;
	mov_b32	$s8, $s7;
	bitextract_u32	$s9, $s8, 23, 8;
	add_u32	$s9, $s9, 4294967063;
	cmp_lt_b1_u32	$c1, $s9, 22;
	cmov_b32	$s5, $c1, $s5, $s7;
	nrcp_f32	$s5, $s5;
	mul_ftz_f32	$s5, $s4, $s5;
	mul_ftz_f32	$s9, $s5, 0F38800000;
	cmov_b32	$s5, $c1, $s9, $s5;
	and_b32	$s8, $s8, 4294963200;
	mov_b32	$s10, $s8;
	floor_ftz_f32	$s11, $s5;
	sub_ftz_f32	$s9, $s7, $s10;
	mul_ftz_f32	$s8, $s7, $s11;
	mov_b32	$s12, $s11;
	and_b32	$s12, $s12, 4294963200;
	mul_ftz_f32	$s13, $s10, $s12;
	sub_ftz_f32	$s13, $s13, $s8;
	sub_ftz_f32	$s11, $s11, $s12;
	mul_ftz_f32	$s10, $s10, $s11;
	add_ftz_f32	$s10, $s10, $s13;
	mul_ftz_f32	$s12, $s9, $s12;
	add_ftz_f32	$s10, $s12, $s10;
	mul_ftz_f32	$s9, $s9, $s11;
	add_ftz_f32	$s9, $s9, $s10;
	sub_ftz_f32	$s10, $s4, $s8;
	sub_ftz_f32	$s11, $s4, $s10;
	sub_ftz_f32	$s8, $s11, $s8;
	sub_ftz_f32	$s8, $s8, $s9;
	add_ftz_f32	$s8, $s10, $s8;
	add_ftz_f32	$s9, $s7, $s8;
	cmp_lt_ftz_b1_f32	$c1, $s8, 0F00000000;
	cmov_b32	$s8, $c1, $s9, $s8;
	sub_ftz_f32	$s9, $s8, $s7;
	cmp_ltu_ftz_b1_f32	$c2, $s8, $s7;
	cmov_b32	$s10, $c2, $s8, $s9;
	cmov_b32	$s9, $c1, 4294967295, 0;
	mov_b32	$s11, $s4;
	bitextract_u32	$s11, $s11, 23, 8;
	cvt_near_f32_s32	$s11, $s11;
	cmp_eq_ftz_b1_f32	$c1, $s11, 0F00000000;
	cmov_b32	$s4, $c1, $s4, $s10;
	cmp_ge_ftz_b1_f32	$c1, $s8, $s7;
	cvt_u32_b1	$s8, $c1;
	cvt_ftz_s32_f32	$s10, $s3;
	cvt_ftz_downi_s32_f32	$s5, $s5;
	add_u32	$s5, $s9, $s5;
	add_u32	$s5, $s5, $s8;
	shl_u32	$s5, $s5, $s10;
	cmp_gt_ftz_b1_f32	$c1, $s3, 0F41f00000;
	cmov_b32	$s3, $c1, 0, $s5;
	mov_b32	$s5, 0;
	mov_b32	$s10, $s4;
	cmp_eq_b1_s32	$c1, $s10, 0;
	cbr_b1	$c1, @BB0_24;
	// BB#17:
	cbr_b1	$c0, @BB0_24;
	// BB#18:
	and_b32	$s12, $s10, 8388607;
	firstbit_u32_u32	$s7, $s12;
	sub_u32	$s7, 4294967178, $s7;
	cmp_eq_b1_s32	$c0, $s12, 0;
	cmov_b32	$s7, $c0, 4294967146, $s7;
	and_b32	$s13, $s10, 2147483647;
	shr_u32	$s8, $s13, 23;
	add_u32	$s8, $s8, 4294967169;
	cmp_lt_b1_u32	$c0, $s13, 8388608;
	cmov_b32	$s7, $c0, $s7, $s8;
	cmp_eq_b1_s32	$c0, $s13, 0;
	cmp_gt_b1_u32	$c1, $s13, 2139095040;
	or_b1	$c0, $c1, $c0;
	cmov_b32	$s7, $c0, 2147483648, $s7;
	cmp_eq_b1_s32	$c0, $s13, 2139095040;
	cmov_b32	$s11, $c0, 2147483647, $s7;
	and_b32	$s7, $s1, 8388607;
	firstbit_u32_u32	$s8, $s7;
	sub_u32	$s8, 4294967178, $s8;
	cmp_eq_b1_s32	$c0, $s7, 0;
	cmov_b32	$s8, $c0, 4294967146, $s8;
	shr_u32	$s9, $s6, 23;
	add_u32	$s9, $s9, 4294967169;
	cmp_lt_b1_u32	$c0, $s6, 8388608;
	cmov_b32	$s9, $c0, $s8, $s9;
	neg_s32	$s6, $s11;
	cvt_near_f32_s32	$s6, $s6;
	abs_f32	$s8, $s6;
	cvt_ftz_s32_f32	$s14, $s8;
	cmp_gt_ftz_b1_f32	$c0, $s8, 0F44800000;
	cmov_b32	$s8, $c0, 1024, $s14;
	neg_s32	$s14, $s8;
	cmp_lt_ftz_b1_f32	$c0, $s6, 0F00000000;
	cmov_b32	$s8, $c0, $s14, $s8;
	mov_b32	$s6, $s13;
	cvt_near_f32_s32	$s12, $s12;
	and_b32	$s13, $s10, 2139095040;
	cmp_eq_b1_s32	$c0, $s13, 0;
	cmov_b32	$s6, $c0, $s12, $s6;
	add_u32	$s12, $s8, 4294967147;
	cmov_b32	$s13, $c0, $s12, $s8;
	neg_s32	$s12, $s9;
	cvt_near_f32_s32	$s12, $s12;
	abs_f32	$s14, $s12;
	cvt_ftz_s32_f32	$s15, $s14;
	cmp_gt_ftz_b1_f32	$c0, $s14, 0F44800000;
	cmov_b32	$s14, $c0, 1024, $s15;
	neg_s32	$s15, $s14;
	cmp_lt_ftz_b1_f32	$c0, $s12, 0F00000000;
	cmov_b32	$s12, $c0, $s15, $s14;
	bitextract_u32	$s14, $s6, 23, 8;
	shl_u32	$s15, $s13, 23;
	add_u32	$s15, $s15, $s6;
	add_u32	$s14, $s14, $s13;
	add_u32	$s13, $s14, 4294967169;
	cmp_gt_b1_s32	$c0, $s13, 127;
	cmov_b32	$s13, $c0, 2139095040, $s15;
	sub_u32	$s14, 1, $s14;
	and_b32	$s15, $s14, 31;
	cmp_lt_b1_s32	$c0, $s14, 24;
	cmov_b32	$s16, $c0, $s15, 24;
	cvt_near_f32_s32	$s7, $s7;
	and_b32	$s15, $s1, 2139095040;
	cmp_eq_b1_s32	$c0, $s15, 0;
	cmov_b32	$s7, $c0, $s7, $s2;
	add_u32	$s15, $s12, 4294967147;
	cmov_b32	$s15, $c0, $s15, $s12;
	cmp_lt_b1_s32	$c1, $s14, 0;
	cmov_b32	$s16, $c1, 0, $s16;
	and_b32	$s6, $s6, 8388607;
	or_b32	$s6, $s6, 8388608;
	shr_u32	$s6, $s6, $s16;
	cmp_gt_b1_s32	$c1, $s14, 0;
	cmov_b32	$s13, $c1, $s6, $s13;
	mov_b32	$s6, $s7;
	bitextract_u32	$s7, $s6, 23, 8;
	add_u32	$s7, $s7, 4294967169;
	shl_u32	$s14, $s15, 23;
	add_u32	$s14, $s14, $s6;
	add_u32	$s15, $s15, $s7;
	cmp_gt_b1_s32	$c1, $s15, 127;
	cmov_b32	$s14, $c1, 2139095040, $s14;
	sub_u32	$s15, 4294967170, $s15;
	and_b32	$s16, $s15, 31;
	cmp_lt_b1_s32	$c1, $s15, 24;
	cmov_b32	$s16, $c1, $s16, 24;
	cvt_near_f32_s32	$s8, $s8;
	cmp_gt_ftz_b1_f32	$c1, $s8, 0F437e0000;
	cmov_b32	$s13, $c1, 2139095040, $s13;
	cmp_lt_b1_s32	$c1, $s15, 0;
	cmov_b32	$s16, $c1, 0, $s16;
	and_b32	$s8, $s6, 8388607;
	or_b32	$s8, $s8, 8388608;
	shr_u32	$s16, $s8, $s16;
	cmp_gt_b1_s32	$c1, $s15, 0;
	cmov_b32	$s14, $c1, $s16, $s14;
	and_b32	$s15, $s10, 2147483648;
	mov_b32	$s10, $s13;
	or_b32	$s15, $s10, $s15;
	cmp_lt_b1_s32	$c1, $s10, 2139095041;
	cmov_b32	$s10, $c1, $s15, $s13;
	cvt_near_f32_s32	$s12, $s12;
	cmp_gt_ftz_b1_f32	$c1, $s12, 0F437e0000;
	cmov_b32	$s13, $c1, 2139095040, $s14;
	sub_ftz_f32	$s12, $s10, $s13;
	cmp_ge_ftz_b1_f32	$c1, $s10, $s13;
	cmov_b32	$s12, $c1, $s12, $s10;
	cvt_u32_b1	$s10, $c1;
	sub_u32	$s11, $s11, $s9;
	cmp_ge_b1_s32	$c1, $s11, 1;
	cbr_b1	$c1, @BB0_19;
	br	@BB0_21;

@BB0_19:
	mov_b32	$s14, $s11;

@BB0_20:
	// %.lr.ph
	add_ftz_f32	$s12, $s12, $s12;
	sub_ftz_f32	$s15, $s12, $s13;
	cmp_ge_ftz_b1_f32	$c1, $s12, $s13;
	cmov_b32	$s12, $c1, $s15, $s12;
	cvt_u32_b1	$s15, $c1;
	shl_u32	$s10, $s10, 1;
	or_b32	$s10, $s15, $s10;
	add_u32	$s14, $s14, 4294967295;
	cmp_gt_b1_s32	$c1, $s14, 0;
	cbr_b1	$c1, @BB0_20;

@BB0_21:
	// %._crit_edge
	cvt_near_f32_s32	$s9, $s9;
	abs_f32	$s13, $s9;
	cvt_ftz_s32_f32	$s14, $s13;
	cmp_gt_ftz_b1_f32	$c1, $s13, 0F44800000;
	cmov_b32	$s13, $c1, 1024, $s14;
	neg_s32	$s14, $s13;
	cmp_lt_ftz_b1_f32	$c1, $s9, 0F00000000;
	cmov_b32	$s13, $c1, $s14, $s13;
	add_u32	$s14, $s13, 4294967147;
	mov_b32	$s9, $s12;
	and_b32	$s12, $s9, 2139095040;
	cmp_eq_b1_s32	$c1, $s12, 0;
	cmov_b32	$s14, $c1, $s14, $s13;
	and_b32	$s12, $s9, 2147483647;
	and_b32	$s15, $s9, 8388607;
	cvt_near_f32_s32	$s15, $s15;
	cmov_b32	$s12, $c1, $s15, $s12;
	shl_u32	$s15, $s14, 23;
	add_u32	$s15, $s15, $s12;
	bitextract_u32	$s16, $s12, 23, 8;
	add_u32	$s16, $s16, $s14;
	add_u32	$s14, $s16, 4294967169;
	cmp_gt_b1_s32	$c1, $s14, 127;
	cmov_b32	$s14, $c1, 2139095040, $s15;
	sub_u32	$s15, 1, $s16;
	and_b32	$s16, $s15, 31;
	cmp_lt_b1_s32	$c1, $s15, 24;
	cmov_b32	$s16, $c1, $s16, 24;
	cmp_lt_b1_s32	$c1, $s15, 0;
	cmov_b32	$s16, $c1, 0, $s16;
	and_b32	$s12, $s12, 8388607;
	or_b32	$s12, $s12, 8388608;
	shr_u32	$s12, $s12, $s16;
	cmp_gt_b1_s32	$c1, $s15, 0;
	cmov_b32	$s12, $c1, $s12, $s14;
	cvt_near_f32_s32	$s13, $s13;
	cmp_gt_ftz_b1_f32	$c1, $s13, 0F437e0000;
	cmov_b32	$s12, $c1, 2139095040, $s12;
	and_b32	$s13, $s9, 2147483648;
	mov_b32	$s9, $s12;
	or_b32	$s13, $s9, $s13;
	cmp_lt_b1_s32	$c1, $s9, 2139095041;
	cmov_b32	$s9, $c1, $s13, $s12;
	cmp_gt_b1_s32	$c1, $s11, -1;
	cmov_b32	$s10, $c1, $s10, 0;
	cmov_b32	$s4, $c1, $s9, $s4;
	add_u32	$s3, $s10, $s3;
	mov_b32	$s9, $s4;
	and_b32	$s10, $s9, 2080374784;
	cmp_gt_b1_u32	$c1, $s10, 201326591;
	cbr_b1	$c1, @BB0_22;
	// BB#23:
	and_b32	$s2, $s9, 2147483647;
	and_b32	$s4, $s9, 8388607;
	cvt_near_f32_s32	$s4, $s4;
	and_b32	$s5, $s9, 2139095040;
	cmp_eq_b1_s32	$c1, $s5, 0;
	cmov_b32	$s2, $c1, $s4, $s2;
	cmov_b32	$s10, $c1, 4294967195, 48;
	cmov_b32	$s5, $c0, 4294967195, 48;
	mov_b32	$s4, $s2;
	bitextract_u32	$s2, $s4, 23, 8;
	add_u32	$s11, $s10, $s2;
	sub_u32	$s2, 1, $s11;
	and_b32	$s12, $s2, 31;
	cmp_lt_b1_s32	$c0, $s2, 24;
	cmov_b32	$s12, $c0, $s12, 24;
	shl_u32	$s10, $s10, 23;
	add_u32	$s10, $s4, $s10;
	add_u32	$s11, $s11, 4294967169;
	cmp_gt_b1_s32	$c0, $s11, 127;
	cmov_b32	$s10, $c0, 2139095040, $s10;
	cmp_lt_b1_s32	$c0, $s2, 0;
	cmov_b32	$s11, $c0, 0, $s12;
	shl_u32	$s12, $s5, 23;
	add_u32	$s6, $s6, $s12;
	add_u32	$s7, $s7, $s5;
	cmp_gt_b1_s32	$c0, $s7, 127;
	cmov_b32	$s5, $c0, 2139095040, $s6;
	sub_u32	$s6, 4294967170, $s7;
	and_b32	$s7, $s6, 31;
	cmp_lt_b1_s32	$c0, $s6, 24;
	cmov_b32	$s7, $c0, $s7, 24;
	and_b32	$s4, $s4, 8388607;
	or_b32	$s4, $s4, 8388608;
	shr_u32	$s4, $s4, $s11;
	cmp_gt_b1_s32	$c0, $s2, 0;
	cmov_b32	$s2, $c0, $s4, $s10;
	cmp_lt_b1_s32	$c0, $s6, 0;
	cmov_b32	$s4, $c0, 0, $s7;
	shr_u32	$s4, $s8, $s4;
	cmp_gt_b1_s32	$c0, $s6, 0;
	cmov_b32	$s7, $c0, $s4, $s5;
	and_b32	$s5, $s9, 2147483648;
	mov_b32	$s4, $s2;
	or_b32	$s5, $s4, $s5;
	cmp_lt_b1_s32	$c0, $s4, 2139095041;
	cmov_b32	$s4, $c0, $s5, $s2;
	mov_b32	$s5, 3258974208;
	br	@BB0_24;

@BB0_22:
	mov_b32	$s7, $s2;

@BB0_24:
	and_b32	$s1, $s1, 2147483648;
	and_b32	$s0, $s0, 2147483648;
	add_ftz_f32	$s2, $s4, $s4;
	cmp_gt_ftz_b1_f32	$c0, $s2, $s7;
	cbr_b1	$c0, @BB0_27;
	// BB#25:
	cmp_neu_ftz_b1_f32	$c0, $s2, $s7;
	cbr_b1	$c0, @BB0_28;
	// BB#26:
	and_b32	$s2, $s3, 1;
	cvt_b1_u32	$c0, $s2;
	cmp_ne_b1_b1	$c0, $c0, 1;
	cbr_b1	$c0, @BB0_28;

@BB0_27:
	sub_ftz_f32	$s4, $s4, $s7;
	add_u32	$s3, $s3, 1;

@BB0_28:
	cmp_eq_ftz_b1_f32	$c0, $s5, 0F00000000;
	cbr_b1	$c0, @BB0_30;
	// BB#29:
	abs_f32	$s2, $s5;
	cvt_ftz_s32_f32	$s6, $s2;
	cmp_gt_ftz_b1_f32	$c0, $s2, 0F44800000;
	cmov_b32	$s2, $c0, 1024, $s6;
	neg_s32	$s6, $s2;
	cmp_lt_ftz_b1_f32	$c0, $s5, 0F00000000;
	cmov_b32	$s5, $c0, $s6, $s2;
	add_u32	$s6, $s5, 4294967147;
	mov_b32	$s2, $s4;
	and_b32	$s4, $s2, 2139095040;
	cmp_eq_b1_s32	$c0, $s4, 0;
	cmov_b32	$s6, $c0, $s6, $s5;
	and_b32	$s4, $s2, 2147483647;
	and_b32	$s7, $s2, 8388607;
	cvt_near_f32_s32	$s7, $s7;
	cmov_b32	$s4, $c0, $s7, $s4;
	shl_u32	$s7, $s6, 23;
	add_u32	$s7, $s7, $s4;
	bitextract_u32	$s8, $s4, 23, 8;
	add_u32	$s8, $s8, $s6;
	add_u32	$s6, $s8, 4294967169;
	cmp_gt_b1_s32	$c0, $s6, 127;
	cmov_b32	$s6, $c0, 2139095040, $s7;
	sub_u32	$s7, 1, $s8;
	and_b32	$s8, $s7, 31;
	cmp_lt_b1_s32	$c0, $s7, 24;
	cmov_b32	$s8, $c0, $s8, 24;
	cmp_lt_b1_s32	$c0, $s7, 0;
	cmov_b32	$s8, $c0, 0, $s8;
	and_b32	$s4, $s4, 8388607;
	or_b32	$s4, $s4, 8388608;
	shr_u32	$s4, $s4, $s8;
	cmp_gt_b1_s32	$c0, $s7, 0;
	cmov_b32	$s4, $c0, $s4, $s6;
	cvt_near_f32_s32	$s5, $s5;
	cmp_gt_ftz_b1_f32	$c0, $s5, 0F437e0000;
	cmov_b32	$s4, $c0, 2139095040, $s4;
	and_b32	$s5, $s2, 2147483648;
	mov_b32	$s2, $s4;
	or_b32	$s5, $s2, $s5;
	cmp_lt_b1_s32	$c0, $s2, 2139095041;
	cmov_b32	$s4, $c0, $s5, $s4;

@BB0_30:
	mov_b32	$s2, $s4;
	xor_b32	$s2, $s2, 2147483648;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b32	$s2, $c0, $s2, $s4;
	neg_s32	$s4, $s3;
	cmp_ne_b1_s32	$c0, $s0, $s1;
	cmov_b32	$s0, $c0, $s4, $s3;
	st_align(4)_u32	$s0, [$d0];

@BB0_31:
	st_arg_align(4)_f32	$s2, [%_gcc_remquo];
	ret;
};


decl function &_gcc_nextafter(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y);


function &_gcc_nextafter(arg_f32 %_gcc_nextafter)(
	arg_f32 %x,
	arg_f32 %y)
{

@_gcc_nextafter_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%y];
	sub_u32	$s1, 2147483648, $s0;
	cmp_lt_b1_s32	$c0, $s0, 0;
	cmov_b32	$s2, $c0, $s1, $s0;
	ld_arg_align(4)_f32	$s1, [%x];
	sub_u32	$s3, 2147483648, $s1;
	cmp_lt_b1_s32	$c0, $s1, 0;
	cmov_b32	$s3, $c0, $s3, $s1;
	cmp_lt_b1_s32	$c0, $s3, $s2;
	cmov_b32	$s2, $c0, 1, 4294967295;
	add_u32	$s2, $s2, $s3;
	sub_u32	$s3, 2147483648, $s2;
	cmp_lt_b1_s32	$c0, $s2, 0;
	cmov_b32	$s2, $c0, $s3, $s2;
	and_b32	$s3, $s1, 2147483647;
	cmp_gt_b1_u32	$c0, $s3, 2139095040;
	cmov_b32	$s2, $c0, $s1, $s2;
	and_b32	$s3, $s0, 2147483647;
	cmp_gt_b1_u32	$c0, $s3, 2139095040;
	cmov_b32	$s2, $c0, $s0, $s2;
	or_b32	$s3, $s0, $s1;
	and_b32	$s3, $s3, 2147483647;
	cmp_eq_b1_s32	$c0, $s1, $s0;
	cmp_eq_b1_s32	$c1, $s3, 0;
	or_b1	$c0, $c1, $c0;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_nextafter];
	ret;
};


decl function &_gcc_fma(arg_f32 %ret)(
	arg_f32 %a,
	arg_f32 %b,
	arg_f32 %c);


function &_gcc_fma(arg_f32 %_gcc_fma)(
	arg_f32 %a,
	arg_f32 %b,
	arg_f32 %c)
{

@_gcc_fma_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%c];
	ld_arg_align(4)_f32	$s1, [%b];
	ld_arg_align(4)_f32	$s2, [%a];
	fma_ftz_f32	$s0, $s2, $s1, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_fma];
	ret;
};


decl function &_gcc_mad(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y,
	arg_f32 %z);


function &_gcc_mad(arg_f32 %_gcc_mad)(
	arg_f32 %x,
	arg_f32 %y,
	arg_f32 %z)
{

@_gcc_mad_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%z];
	ld_arg_align(4)_f32	$s1, [%y];
	ld_arg_align(4)_f32	$s2, [%x];
	nfma_f32	$s0, $s2, $s1, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_mad];
	ret;
};

//readonly_f32 &__math32_LOG_INV_TBL[129] = f32[](0F40000000, 0F3ffe03f8, 0F3ffc0fc1, 0F3ffa232d, 0F3ff83e10, 0F3ff6603e, 0F3ff4898d, 0F3ff2b9d6, 0F3ff0f0f1, 0F3fef2eb7, 0F3fed7304, 0F3febbdb3, 0F3fea0ea1, 0F3fe865ac, 0F3fe6c2b4, 0F3fe52598, 0F3fe38e39, 0F3fe1fc78, 0F3fe07038, 0F3fdee95c, 0F3fdd67c9, 0F3fdbeb62, 0F3fda740e, 0F3fd901b2, 0F3fd79436, 0F3fd62b81, 0F3fd4c77b, 0F3fd3680d, 0F3fd20d21, 0F3fd0b6a0, 0F3fcf6475, 0F3fce168a, 0F3fcccccd, 0F3fcb8728, 0F3fca4588, 0F3fc907da, 0F3fc7ce0c, 0F3fc6980c, 0F3fc565c8, 0F3fc43730, 0F3fc30c31, 0F3fc1e4bc, 0F3fc0c0c1, 0F3fbfa030, 0F3fbe82fa, 0F3fbd6910, 0F3fbc5264, 0F3fbb3ee7, 0F3fba2e8c, 0F3fb92144, 0F3fb81703, 0F3fb70fbb, 0F3fb60b61, 0F3fb509e7, 0F3fb40b41, 0F3fb30f63, 0F3fb21643, 0F3fb11fd4, 0F3fb02c0b, 0F3faf3ade, 0F3fae4c41, 0F3fad602b, 0F3fac7692, 0F3fab8f6a, 0F3faaaaab, 0F3fa9c84a, 0F3fa8e83f, 0F3fa80a81, 0F3fa72f05, 0F3fa655c4, 0F3fa57eb5, 0F3fa4a9cf, 0F3fa3d70a, 0F3fa3065e, 0F3fa237c3, 0F3fa16b31, 0F3fa0a0a1, 0F3f9fd80a, 0F3f9f1166, 0F3f9e4cad, 0F3f9d89d9, 0F3f9cc8e1, 0F3f9c09c1, 0F3f9b4c70, 0F3f9a90e8, 0F3f99d723, 0F3f991f1a, 0F3f9868c8, 0F3f97b426, 0F3f97012e, 0F3f964fda, 0F3f95a025, 0F3f94f209, 0F3f944581, 0F3f939a86, 0F3f92f114, 0F3f924925, 0F3f91a2b4, 0F3f90fdbc, 0F3f905a38, 0F3f8fb824, 0F3f8f177a, 0F3f8e7835, 0F3f8dda52, 0F3f8d3dcb, 0F3f8ca29c, 0F3f8c08c1, 0F3f8b7034, 0F3f8ad8f3, 0F3f8a42f8, 0F3f89ae41, 0F3f891ac7, 0F3f888889, 0F3f87f781, 0F3f8767ab, 0F3f86d905, 0F3f864b8a, 0F3f85bf37, 0F3f853408, 0F3f84a9fa, 0F3f842108, 0F3f839930, 0F3f83126f, 0F3f828cc0, 0F3f820821, 0F3f81848e, 0F3f810204, 0F3f808081, 0F3f800000);

decl function &_gcc_log(arg_f32 %ret)(arg_f32 %x);


function &_gcc_log(arg_f32 %_gcc_log)(arg_f32 %x)
{

@_gcc_log_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s1, $s0;
	or_b32	$s2, $s1, 1065353216;
	add_ftz_f32	$s2, $s2, 0Fbf800000;
	shr_u32	$s3, $s1, 23;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cmov_b32	$s5, $c0, $s2, $s1;
	add_u32	$s3, $s3, 4294967169;
	shr_u32	$s2, $s2, 23;
	add_u32	$s2, $s2, 4294967043;
	cmov_b32	$s4, $c0, $s2, $s3;
	and_b32	$s7, $s5, 8323072;
	shl_u32	$s2, $s5, 1;
	add_ftz_f32	$s3, $s0, 0Fbf800000;
	and_b32	$s8, $s2, 65536;
	add_ftz_f32	$s6, $s3, 0F40000000;
	abs_f32	$s2, $s3;
	add_u32	$s7, $s8, $s7;
	shr_u32	$s8, $s7, 16;
	or_b32	$s7, $s7, 1056964608;
	cvt_u64_u32	$d1, $s8;
	and_b32	$s5, $s5, 8388607;
	or_b32	$s5, $s5, 1056964608;
	mov_b32	$s8, $s5;
	nrcp_f32	$s5, $s6;
	mul_ftz_f32	$s6, $s3, $s5;
	add_ftz_f32	$s5, $s6, $s6;
	shl_u64	$d0, $d1, 3;
	sub_ftz_f32	$s7, $s7, $s8;
	shl_u64	$d1, $d1, 2;
	ld_readonly_align(4)_f32	$s8, [&__math32_LOG_INV_TBL][$d1];
	cvt_near_f32_s32	$s4, $s4;
	mul_ftz_f32	$s9, $s5, $s5;
	nfma_f32	$s11, $s9, 0F3c4ccccd, 0F3daaaaab;
	mul_ftz_f32	$s7, $s7, $s8;
	mul_ftz_f32	$s8, $s7, $s7;
	nfma_f32	$s10, $s7, 0F3eaaaaab, 0F3f000000;
	nfma_f32	$s10, $s10, $s8, $s7;
	ld_v2_readonly_align(8)_f32	($s8, $s7), [&__math32_LOGE_TBL][$d0];
	nfma_f32	$s8, $s4, 0F3f317000, $s8;
	mul_ftz_f32	$s9, $s11, $s9;
	mul_ftz_f32	$s6, $s3, $s6;
	neg_f32	$s6, $s6;
	nfma_f32	$s5, $s5, $s9, $s6;
	add_ftz_f32	$s3, $s3, $s5;
	neg_f32	$s5, $s10;
	nfma_f32	$s4, $s4, 0F3805fdf4, $s5;
	add_ftz_f32	$s4, $s7, $s4;
	add_ftz_f32	$s4, $s8, $s4;
	cmp_lt_ftz_b1_f32	$c0, $s2, 0F3d800000;
	cmov_b32	$s3, $c0, $s3, $s4;
	and_b32	$s2, $s1, 2147483647;
	cmp_gt_b1_u32	$c0, $s2, 2139095039;
	cmov_b32	$s0, $c0, $s0, $s3;
	cmp_ne_b1_s32	$c0, $s1, $s2;
	cmov_b32	$s0, $c0, 2143289344, $s0;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmov_b32	$s0, $c0, 4286578688, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_log];
	ret;
};


decl function &_gcc_tgamma(arg_f32 %ret)(arg_f32 %x);


function &_gcc_tgamma(arg_f32 %_gcc_tgamma)(arg_f32 %x)
{

@_gcc_tgamma_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s1, [%x];
	abs_f32	$s0, $s1;
	mov_b32	$s2, $s0;
	and_b32	$s4, $s2, 2147483647;
	cmp_gt_b1_u32	$c0, $s4, 2139095039;
	mov_b32	$s3, $s0;
	cbr_b1	$c0, @BB0_20;
	// BB#1:
	cmp_geu_ftz_b1_f32	$c0, $s4, 0F1c800000;
	cbr_b1	$c0, @BB0_3;
	// BB#2:
	nlog2_f32	$s2, $s4;
	mov_b32	$s3, $s2;
	and_b32	$s3, $s3, 4294963200;
	sub_ftz_f32	$s4, $s2, $s3;
	mul_ftz_f32	$s5, $s4, 0F3805fdf4;
	nfma_f32	$s5, $s3, 0F3805fdf4, $s5;
	nfma_f32	$s4, $s4, 0F3f317000, $s5;
	nfma_f32	$s3, $s3, 0F3f317000, $s4;
	class_b1_f32	$c0, $s2, 519;
	cvt_u32_b1	$s4, $c0;
	cmp_ne_b1_s32	$c0, $s4, 0;
	cmov_b32	$s2, $c0, $s2, $s3;
	neg_f32	$s3, $s2;
	br	@BB0_20;

@BB0_3:
	cmp_eq_ftz_b1_f32	$c0, $s4, 0F40000000;
	cmp_eq_ftz_b1_f32	$c1, $s4, 0F3f800000;
	or_b1	$c0, $c1, $c0;
	not_b1	$c0, $c0;
	cbr_b1	$c0, @BB0_5;
	// BB#4:
	mov_b32	$s3, 0;
	br	@BB0_18;

@BB0_5:
	cmp_geu_ftz_b1_f32	$c0, $s4, 0F40000000;
	cbr_b1	$c0, @BB0_13;
	// BB#6:
	sub_ftz_f32	$s3, 0F40000000, $s4;
	add_ftz_f32	$s5, $s4, 0Fbfbb16c3;
	cmp_lt_ftz_b1_f32	$c0, $s4, 0F3fdda618;
	cmov_b32	$s3, $c0, $s5, $s3;
	cvt_u32_b1	$s6, $c0;
	add_ftz_f32	$s5, $s4, 0Fbf800000;
	cmp_lt_ftz_b1_f32	$c0, $s4, 0F3f9da620;
	cmov_b32	$s5, $c0, $s5, $s3;
	cmov_b32	$s3, $c0, 2, $s6;
	nlog2_f32	$s6, $s4;
	mov_b32	$s7, $s6;
	and_b32	$s7, $s7, 4294963200;
	sub_ftz_f32	$s8, $s6, $s7;
	mul_ftz_f32	$s9, $s8, 0F3805fdf4;
	nfma_f32	$s9, $s7, 0F3805fdf4, $s9;
	nfma_f32	$s8, $s8, 0F3f317000, $s9;
	nfma_f32	$s7, $s7, 0F3f317000, $s8;
	class_b1_f32	$c0, $s6, 519;
	cvt_u32_b1	$s8, $c0;
	cmp_ne_b1_s32	$c0, $s8, 0;
	cmov_b32	$s6, $c0, $s6, $s7;
	sub_ftz_f32	$s7, 0F3f800000, $s4;
	cmp_le_ftz_b1_f32	$c0, $s4, 0F3f666666;
	cmov_b32	$s5, $c0, $s7, $s5;
	add_ftz_f32	$s7, $s4, 0Fbeec5b0c;
	cmp_lt_ftz_b1_f32	$c1, $s4, 0F3f3b4a20;
	cmov_b32	$s5, $c1, $s7, $s5;
	cmov_b32	$s3, $c0, 0, $s3;
	cmov_b32	$s7, $c1, 1, $s3;
	neg_f32	$s3, $s6;
	cmov_b32	$s3, $c0, $s3, 0;
	cmp_lt_ftz_b1_f32	$c0, $s4, 0F3e6d3308;
	cmov_b32	$s4, $c0, $s4, $s5;
	cmov_b32	$s5, $c0, 2, $s7;
	cmp_eq_b1_s32	$c0, $s5, 2;
	cbr_b1	$c0, @BB0_12;
	// BB#7:
	cmp_ne_b1_s32	$c0, $s5, 1;
	cbr_b1	$c0, @BB0_8;
	// BB#11:
	mul_ftz_f32	$s5, $s4, $s4;
	mul_ftz_f32	$s6, $s4, $s5;
	nfma_f32	$s7, $s6, 0Fb9a3f927, 0F3a66f867;
	nfma_f32	$s7, $s6, $s7, 0Fbb7177fe;
	nfma_f32	$s8, $s6, $s7, 0F3c93373d;
	nfma_f32	$s7, $s6, 0F39a57b6b, 0Fbab7f476;
	nfma_f32	$s7, $s6, $s7, 0F3bc7e707;
	nfma_f32	$s7, $s6, $s7, 0Fbd064d47;
	nfma_f32	$s7, $s6, $s7, 0F3ef7b95e;
	nfma_f32	$s8, $s6, $s8, 0Fbe17213c;
	nfma_f32	$s9, $s6, 0F39afe9f7, 0Fba0d3085;
	nfma_f32	$s9, $s6, $s9, 0F3b141699;
	nfma_f32	$s9, $s6, $s9, 0Fbc28fcfe;
	nfma_f32	$s9, $s6, $s9, 0F3d845a15;
	nfma_f32	$s4, $s4, $s9, $s8;
	neg_f32	$s4, $s4;
	nfma_f32	$s4, $s6, $s4, 0F31e61c52;
	neg_f32	$s4, $s4;
	nfma_f32	$s4, $s5, $s7, $s4;
	add_ftz_f32	$s4, $s4, 0Fbdf8cdcd;
	add_ftz_f32	$s3, $s3, $s4;
	br	@BB0_18;

@BB0_13:
	cmp_geu_ftz_b1_f32	$c0, $s4, 0F41000000;
	cbr_b1	$c0, @BB0_15;
	// BB#14:
	cvt_ftz_s32_f32	$s5, $s4;
	cvt_near_f32_s32	$s3, $s5;
	sub_ftz_f32	$s3, $s4, $s3;
	add_ftz_f32	$s4, $s3, 0F40000000;
	cmp_gt_b1_s32	$c0, $s5, 2;
	cmov_b32	$s4, $c0, $s4, 1065353216;
	add_ftz_f32	$s6, $s3, 0F40400000;
	cmp_gt_b1_s32	$c0, $s5, 3;
	cmov_b32	$s6, $c0, $s6, 1065353216;
	add_ftz_f32	$s7, $s3, 0F40800000;
	cmp_gt_b1_s32	$c0, $s5, 4;
	cmov_b32	$s7, $c0, $s7, 1065353216;
	add_ftz_f32	$s8, $s3, 0F40a00000;
	cmp_gt_b1_s32	$c0, $s5, 5;
	cmov_b32	$s8, $c0, $s8, 1065353216;
	add_ftz_f32	$s9, $s3, 0F40c00000;
	cmp_gt_b1_s32	$c0, $s5, 6;
	cmov_b32	$s5, $c0, $s9, 1065353216;
	mul_ftz_f32	$s5, $s5, $s8;
	mul_ftz_f32	$s5, $s7, $s5;
	mul_ftz_f32	$s5, $s6, $s5;
	mul_ftz_f32	$s4, $s4, $s5;
	nlog2_f32	$s4, $s4;
	mov_b32	$s5, $s4;
	and_b32	$s5, $s5, 4294963200;
	sub_ftz_f32	$s6, $s4, $s5;
	mul_ftz_f32	$s7, $s6, 0F3805fdf4;
	nfma_f32	$s7, $s5, 0F3805fdf4, $s7;
	nfma_f32	$s6, $s6, 0F3f317000, $s7;
	nfma_f32	$s5, $s5, 0F3f317000, $s6;
	class_b1_f32	$c0, $s4, 519;
	cvt_u32_b1	$s6, $c0;
	cmp_ne_b1_s32	$c0, $s6, 0;
	cmov_b32	$s4, $c0, $s4, $s5;
	nfma_f32	$s5, $s3, 0F3805ff67, 0F3af135b4;
	nfma_f32	$s5, $s3, $s5, 0F3cda40e4;
	nfma_f32	$s5, $s3, $s5, 0F3e15dce6;
	nfma_f32	$s5, $s3, $s5, 0F3ea6cc7a;
	nfma_f32	$s5, $s3, $s5, 0F3e5c245a;
	nfma_f32	$s5, $s3, $s5, 0Fbd9e233f;
	mul_ftz_f32	$s5, $s3, $s5;
	nfma_f32	$s6, $s3, 0F36f5d7bd, 0F3a4beed6;
	nfma_f32	$s6, $s3, $s6, 0F3c98bf54;
	nfma_f32	$s6, $s3, $s6, 0F3e300f6e;
	nfma_f32	$s6, $s3, $s6, 0F3f38d0c5;
	nfma_f32	$s6, $s3, $s6, 0F3fb22d3b;
	nfma_f32	$s6, $s3, $s6, 0F3f800000;
	nrcp_f32	$s6, $s6;
	mul_ftz_f32	$s5, $s5, $s6;
	nfma_f32	$s3, $s3, 0F3f000000, $s5;
	add_ftz_f32	$s3, $s3, $s4;
	br	@BB0_18;

@BB0_15:
	nlog2_f32	$s3, $s4;
	mov_b32	$s5, $s3;
	and_b32	$s5, $s5, 4294963200;
	sub_ftz_f32	$s6, $s3, $s5;
	mul_ftz_f32	$s7, $s6, 0F3805fdf4;
	nfma_f32	$s7, $s5, 0F3805fdf4, $s7;
	nfma_f32	$s6, $s6, 0F3f317000, $s7;
	nfma_f32	$s5, $s5, 0F3f317000, $s6;
	cmp_geu_ftz_b1_f32	$c0, $s4, 0F5c800000;
	cbr_b1	$c0, @BB0_17;
	// BB#16:
	class_b1_f32	$c0, $s3, 519;
	cvt_u32_b1	$s6, $c0;
	cmp_ne_b1_s32	$c0, $s6, 0;
	cmov_b32	$s6, $c0, $s3, $s5;
	gcn_divrelaxednarrow_f32	$s3, 0F3f800000, $s4;
	mul_ftz_f32	$s5, $s3, $s3;
	nfma_f32	$s7, $s5, 0Fbad5c4e8, 0F3a5b3dd2;
	nfma_f32	$s7, $s5, $s7, 0Fba1c065c;
	add_ftz_f32	$s4, $s4, 0Fbf000000;
	add_ftz_f32	$s6, $s6, 0Fbf800000;
	nfma_f32	$s7, $s5, $s7, 0F3a500cfd;
	nfma_f32	$s7, $s5, $s7, 0Fbb360b61;
	nfma_f32	$s5, $s5, $s7, 0F3daaaaab;
	nfma_f32	$s3, $s3, $s5, 0F3ed67f1d;
	nfma_f32	$s3, $s4, $s6, $s3;
	br	@BB0_18;

@BB0_12:
	nfma_f32	$s5, $s4, 0F3c5b3c5e, 0F3e6a7578;
	nfma_f32	$s5, $s4, $s5, 0F3f7a4bb2;
	nfma_f32	$s5, $s4, $s5, 0F3fba3ae7;
	nfma_f32	$s5, $s4, $s5, 0F3f2200f4;
	nfma_f32	$s5, $s4, $s5, 0Fbd9e233f;
	mul_ftz_f32	$s5, $s4, $s5;
	nfma_f32	$s6, $s4, 0F3b52d5db, 0F3dd572af;
	nfma_f32	$s6, $s4, $s6, 0F3f44efdf;
	nfma_f32	$s6, $s4, $s6, 0F4008392d;
	nfma_f32	$s6, $s4, $s6, 0F401d2ebe;
	nfma_f32	$s6, $s4, $s6, 0F3f800000;
	nrcp_f32	$s6, $s6;
	mul_ftz_f32	$s5, $s5, $s6;
	br	@BB0_10;

@BB0_8:
	cmp_ne_b1_s32	$c0, $s5, 0;
	cbr_b1	$c0, @BB0_18;
	// BB#9:
	mul_ftz_f32	$s5, $s4, $s4;
	nfma_f32	$s6, $s5, 0F37d383a2, 0F39679767;
	nfma_f32	$s6, $s5, $s6, 0F3a9c54a1;
	nfma_f32	$s6, $s5, $s6, 0F3bf2027e;
	nfma_f32	$s6, $s5, $s6, 0F3d89f001;
	nfma_f32	$s6, $s5, $s6, 0F3d9e233f;
	nfma_f32	$s7, $s5, 0F383c2c75, 0F38e28445;
	nfma_f32	$s7, $s5, $s7, 0F3a05b634;
	nfma_f32	$s7, $s5, $s7, 0F3b3d6ec6;
	nfma_f32	$s7, $s5, $s7, 0F3ca89915;
	nfma_f32	$s7, $s5, $s7, 0F3ea51a66;
	mul_ftz_f32	$s5, $s5, $s7;
	nfma_f32	$s5, $s4, $s6, $s5;

@BB0_10:
	nfma_f32	$s4, $s4, 0Fbf000000, $s5;
	add_ftz_f32	$s3, $s3, $s4;
	br	@BB0_18;

@BB0_17:
	class_b1_f32	$c0, $s3, 519;
	cvt_u32_b1	$s6, $c0;
	cmp_ne_b1_s32	$c0, $s6, 0;
	cmov_b32	$s3, $c0, $s3, $s5;
	add_ftz_f32	$s3, $s3, 0Fbf800000;
	mul_ftz_f32	$s3, $s4, $s3;

@BB0_18:
	cmp_geu_ftz_b1_f32	$c0, $s0, 0F00000000;
	cbr_b1	$c0, @BB0_20;
	// BB#19:
	and_b32	$s4, $s2, 2147483648;
	xor_b32	$s2, $s4, $s2;
	mov_b32	$s6, $s2;
	cvt_ftz_s32_f32	$s5, $s6;
	cvt_near_f32_s32	$s7, $s5;
	sub_ftz_f32	$s6, $s6, $s7;
	sub_ftz_f32	$s7, 0F3f800000, $s6;
	add_ftz_f32	$s8, $s6, 0Fbf000000;
	cmp_le_ftz_b1_f32	$c0, $s6, 0F3f400000;
	cmov_b32	$s7, $c0, $s8, $s7;
	sub_ftz_f32	$s8, 0F3f000000, $s6;
	cmp_lt_ftz_b1_f32	$c1, $s6, 0F3f000000;
	cmov_b32	$s7, $c1, $s8, $s7;
	cmp_le_ftz_b1_f32	$c1, $s6, 0F3e800000;
	cmov_b32	$s7, $c1, $s6, $s7;
	cmp_gtu_ftz_b1_f32	$c1, $s6, 0F3e800000;
	and_b1	$c0, $c0, $c1;
	cmp_lt_b1_s32	$c1, $s2, 2139095040;
	cmov_b32	$s6, $c1, $s4, 2143289344;
	mul_ftz_f32	$s8, $s7, 0F40490fdb;
	mul_ftz_f32	$s7, $s8, $s8;
	mul_ftz_f32	$s9, $s8, $s7;
	nfma_f32	$s10, $s7, 0F3636df25, 0Fb95009d4;
	nfma_f32	$s10, $s7, $s10, 0F3c088887;
	nfma_f32	$s10, $s7, $s10, 0Fbe2aaaab;
	nfma_f32	$s8, $s9, $s10, $s8;
	nfma_f32	$s9, $s7, 0Fb492923a, 0F37d00ae3;
	nfma_f32	$s9, $s7, $s9, 0Fbab60b60;
	nfma_f32	$s9, $s7, $s9, 0F3d2aaaab;
	nfma_f32	$s10, $s7, 0Fbf000000, 0F3f800000;
	mul_ftz_f32	$s7, $s7, $s7;
	nfma_f32	$s7, $s7, $s9, $s10;
	cmov_b32	$s7, $c0, $s7, $s8;
	shl_u32	$s5, $s5, 31;
	xor_b32	$s4, $s5, $s4;
	mov_b32	$s5, $s7;
	xor_b32	$s4, $s4, $s5;
	cmp_lt_b1_s32	$c0, $s2, 1258291200;
	cmov_b32	$s2, $c0, $s4, $s6;
	mul_ftz_f32	$s4, $s0, $s2;
	abs_f32	$s4, $s4;
	gcn_divrelaxed_ftz_f32	$s4, 0F40490fdb, $s4;
	nlog2_f32	$s4, $s4;
	mov_b32	$s5, $s4;
	and_b32	$s5, $s5, 4294963200;
	sub_ftz_f32	$s6, $s4, $s5;
	mul_ftz_f32	$s7, $s6, 0F3805fdf4;
	nfma_f32	$s7, $s5, 0F3805fdf4, $s7;
	nfma_f32	$s6, $s6, 0F3f317000, $s7;
	nfma_f32	$s5, $s5, 0F3f317000, $s6;
	class_b1_f32	$c0, $s4, 519;
	cvt_u32_b1	$s6, $c0;
	cmp_ne_b1_s32	$c0, $s6, 0;
	cmov_b32	$s4, $c0, $s4, $s5;
	sub_ftz_f32	$s3, $s4, $s3;
	cmp_eq_ftz_b1_f32	$c0, $s2, 0F00000000;
	cmov_b32	$s3, $c0, 2139095040, $s3;

@BB0_20:
	// %_Z6lgammaf.exit
	mov_b32	$s2, $s3;
	and_b32	$s2, $s2, 4294963200;
	sub_ftz_f32	$s4, $s3, $s2;
	mul_ftz_f32	$s5, $s4, 0F39a3b295;
	nfma_f32	$s4, $s4, 0F3fb8a000, $s5;
	nfma_f32	$s4, $s2, 0F39a3b295, $s4;
	nexp2_f32	$s4, $s4;
	mul_ftz_f32	$s2, $s2, 0F3fb8a000;
	nexp2_f32	$s2, $s2;
	mul_ftz_f32	$s2, $s4, $s2;
	cmp_lt_ftz_b1_f32	$c0, $s3, 0Fc2aeac50;
	cmov_b32	$s2, $c0, 0, $s2;
	cmp_gt_ftz_b1_f32	$c0, $s3, 0F42b17218;
	cmov_b32	$s2, $c0, 2139095040, $s2;
	cmp_geu_ftz_b1_f32	$c0, $s1, 0F00000000;
	cbr_b1	$c0, @BB0_22;
	// BB#21:
	and_b32	$s3, $s1, 2147483648;
	xor_b32	$s1, $s3, $s1;
	mov_b32	$s5, $s1;
	cvt_ftz_s32_f32	$s4, $s5;
	cvt_near_f32_s32	$s6, $s4;
	sub_ftz_f32	$s5, $s5, $s6;
	sub_ftz_f32	$s6, 0F3f800000, $s5;
	add_ftz_f32	$s7, $s5, 0Fbf000000;
	cmp_le_ftz_b1_f32	$c0, $s5, 0F3f400000;
	cmov_b32	$s6, $c0, $s7, $s6;
	sub_ftz_f32	$s7, 0F3f000000, $s5;
	cmp_lt_ftz_b1_f32	$c1, $s5, 0F3f000000;
	cmov_b32	$s6, $c1, $s7, $s6;
	cmp_le_ftz_b1_f32	$c1, $s5, 0F3e800000;
	cmov_b32	$s6, $c1, $s5, $s6;
	cmp_gtu_ftz_b1_f32	$c1, $s5, 0F3e800000;
	and_b1	$c0, $c0, $c1;
	cmp_lt_b1_s32	$c1, $s1, 2139095040;
	cmov_b32	$s5, $c1, $s3, 2143289344;
	mul_ftz_f32	$s7, $s6, 0F40490fdb;
	mul_ftz_f32	$s6, $s7, $s7;
	mul_ftz_f32	$s8, $s7, $s6;
	nfma_f32	$s9, $s6, 0F3636df25, 0Fb95009d4;
	nfma_f32	$s9, $s6, $s9, 0F3c088887;
	nfma_f32	$s9, $s6, $s9, 0Fbe2aaaab;
	nfma_f32	$s7, $s8, $s9, $s7;
	nfma_f32	$s8, $s6, 0Fb492923a, 0F37d00ae3;
	nfma_f32	$s8, $s6, $s8, 0Fbab60b60;
	nfma_f32	$s8, $s6, $s8, 0F3d2aaaab;
	nfma_f32	$s9, $s6, 0Fbf000000, 0F3f800000;
	mul_ftz_f32	$s6, $s6, $s6;
	nfma_f32	$s6, $s6, $s8, $s9;
	cmov_b32	$s6, $c0, $s6, $s7;
	shl_u32	$s4, $s4, 31;
	xor_b32	$s3, $s4, $s3;
	mov_b32	$s4, $s6;
	xor_b32	$s3, $s3, $s4;
	cmp_lt_b1_s32	$c0, $s1, 1258291200;
	cmov_b32	$s1, $c0, $s3, $s5;
	mul_ftz_f32	$s2, $s0, $s2;
	mov_b32	$s0, $s1;
	mul_ftz_f32	$s1, $s2, $s0;
	gcn_divrelaxed_ftz_f32	$s1, 0F40490fdb, $s1;
	cmp_eq_ftz_b1_f32	$c0, $s1, 0F00000000;
	cmov_b32	$s1, $c0, 2139095040, $s1;
	cmp_eq_ftz_b1_f32	$c0, $s0, 0F00000000;
	cmov_b32	$s2, $c0, 2143289344, $s1;

@BB0_22:
	st_arg_align(4)_f32	$s2, [%_gcc_tgamma];
	ret;
};


decl function &_gcc_ilogb(arg_u32 %ret)(arg_f32 %x);


function &_gcc_ilogb(arg_u32 %_gcc_ilogb)(arg_f32 %x)
{

@_gcc_ilogb_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	and_b32	$s1, $s0, 8388607;
	firstbit_u32_u32	$s2, $s1;
	sub_u32	$s2, 4294967178, $s2;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b32	$s1, $c0, 4294967146, $s2;
	and_b32	$s0, $s0, 2147483647;
	shr_u32	$s2, $s0, 23;
	add_u32	$s2, $s2, 4294967169;
	cmp_lt_b1_u32	$c0, $s0, 8388608;
	cmov_b32	$s1, $c0, $s1, $s2;
	cmp_eq_b1_s32	$c0, $s0, 0;
	cmp_gt_b1_u32	$c1, $s0, 2139095040;
	or_b1	$c0, $c1, $c0;
	cmov_b32	$s1, $c0, 2147483648, $s1;
	cmp_eq_b1_s32	$c0, $s0, 2139095040;
	cmov_b32	$s0, $c0, 2147483647, $s1;
	st_arg_align(4)_u32	$s0, [%_gcc_ilogb];
	ret;
};


decl function &_gcc_frexp(arg_f32 %ret)(
	arg_f32 %x,
	arg_u64 %ep);


function &_gcc_frexp(arg_f32 %_gcc_frexp)(
	arg_f32 %x,
	arg_u64 %ep)
{

@_gcc_frexp_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s1, $s0;
	and_b32	$s2, $s1, 2147483647;
	cmp_lt_b1_u32	$c0, $s2, 8388608;
	cmp_ne_b1_s32	$c1, $s2, 0;
	and_b1	$c0, $c1, $c0;
	cmov_b32	$s3, $c0, 4294967144, 4294967170;
	or_b32	$s4, $s2, 226492416;
	add_ftz_f32	$s4, $s4, 0F8d800000;
	cmov_b32	$s2, $c0, $s4, $s2;
	shr_s32	$s4, $s2, 23;
	add_u32	$s3, $s3, $s4;
	cmp_eq_b1_s32	$c0, $s3, 129;
	cmp_eq_b1_s32	$c1, $s2, 0;
	or_b1	$c0, $c0, $c1;
	and_b32	$s4, $s1, 2147483648;
	cmov_b32	$s1, $c0, 0, $s3;
	and_b32	$s2, $s2, 8388607;
	or_b32	$s2, $s4, $s2;
	or_b32	$s2, $s2, 1056964608;
	cmov_b32	$s0, $c0, $s0, $s2;
	ld_arg_align(8)_u64	$d0, [%ep];
	st_align(4)_u32	$s1, [$d0];
	st_arg_align(4)_f32	$s0, [%_gcc_frexp];
	ret;
};


decl function &_gcc_round(arg_f32 %ret)(arg_f32 %x);


function &_gcc_round(arg_f32 %_gcc_round)(arg_f32 %x)
{

@_gcc_round_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s2, [%x];
	trunc_ftz_f32	$s0, $s2;
	sub_ftz_f32	$s1, $s2, $s0;
	abs_f32	$s1, $s1;
	and_b32	$s2, $s2, 2147483648;
	or_b32	$s2, $s2, 1065353216;
	cmp_ge_ftz_b1_f32	$c0, $s1, 0F3f000000;
	cmov_b32	$s1, $c0, $s2, 0;
	add_ftz_f32	$s0, $s0, $s1;
	st_arg_align(4)_f32	$s0, [%_gcc_round];
	ret;
};


decl function &_gcc_atan(arg_f32 %ret)(arg_f32 %x);


function &_gcc_atan(arg_f32 %_gcc_atan)(arg_f32 %x)
{

@_gcc_atan_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s3, $s0;
	and_b32	$s1, $s3, 2147483647;
	mov_b32	$s2, $s1;
	add_ftz_f32	$s4, $s2, 0Fbfc00000;
	nfma_f32	$s5, $s2, 0F3fc00000, 0F3f800000;
	nrcp_f32	$s5, $s5;
	mul_ftz_f32	$s4, $s4, $s5;
	nrcp_f32	$s5, $s2;
	neg_f32	$s5, $s5;
	cmp_lt_b1_u32	$c0, $s1, 1075576832;
	cmov_b32	$s4, $c0, $s4, $s5;
	cmov_b32	$s5, $c0, 1065064543, 1070141403;
	add_ftz_f32	$s6, $s2, 0Fbf800000;
	add_ftz_f32	$s7, $s2, 0F3f800000;
	nrcp_f32	$s7, $s7;
	mul_ftz_f32	$s6, $s6, $s7;
	cmp_lt_b1_u32	$c0, $s1, 1066926080;
	cmov_b32	$s4, $c0, $s6, $s4;
	cmov_b32	$s6, $c0, 1061752795, $s5;
	nfma_f32	$s5, $s2, 0F40000000, 0Fbf800000;
	add_ftz_f32	$s7, $s2, 0F40000000;
	nrcp_f32	$s7, $s7;
	mul_ftz_f32	$s5, $s5, $s7;
	cmp_lt_b1_u32	$c0, $s1, 1060110336;
	cmov_b32	$s5, $c0, $s5, $s4;
	cmov_b32	$s6, $c0, 1055744824, $s6;
	xor_b32	$s3, $s1, $s3;
	or_b32	$s4, $s3, 1070141403;
	cmp_lt_b1_u32	$c0, $s1, 2139095041;
	cmov_b32	$s4, $c0, $s4, $s0;
	cmp_lt_b1_u32	$c0, $s1, 1054867456;
	cmov_b32	$s2, $c0, $s2, $s5;
	cmov_b32	$s5, $c0, 0, $s6;
	mul_ftz_f32	$s6, $s2, $s2;
	nfma_f32	$s7, $s6, 0F3b9a3b54, 0F3e44f0ba;
	nfma_f32	$s7, $s6, $s7, 0F3e97d299;
	nfma_f32	$s8, $s6, 0F3e993f1f, 0F3f8e2c3d;
	nfma_f32	$s8, $s6, $s8, 0F3f63bbe5;
	nrcp_f32	$s8, $s8;
	mul_ftz_f32	$s7, $s7, $s8;
	mul_ftz_f32	$s6, $s2, $s6;
	mul_ftz_f32	$s6, $s6, $s7;
	sub_ftz_f32	$s2, $s6, $s2;
	sub_ftz_f32	$s2, $s5, $s2;
	or_b32	$s2, $s2, $s3;
	cmp_lt_b1_u32	$c0, $s1, 1283457024;
	cmov_b32	$s2, $c0, $s2, $s4;
	cmp_lt_b1_u32	$c0, $s1, 905969664;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_atan];
	ret;
};


decl function &_gcc_modf(arg_f32 %ret)(
	arg_f32 %x,
	arg_u64 %iptr);


function &_gcc_modf(arg_f32 %_gcc_modf)(
	arg_f32 %x,
	arg_u64 %iptr)
{

@_gcc_modf_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s2, [%x];
	mov_b32	$s0, $s2;
	shr_u32	$s1, $s0, 23;
	sub_u32	$s1, 150, $s1;
	shl_u32	$s1, 4294967295, $s1;
	and_b32	$s1, $s1, $s0;
	mov_b32	$s3, $s1;
	sub_ftz_f32	$s2, $s2, $s3;
	mov_b32	$s4, $s2;
	and_b32	$s2, $s0, 2147483647;
	bitextract_u32	$s5, $s0, 23, 8;
	and_b32	$s3, $s0, 2147483648;
	or_b32	$s4, $s4, $s3;
	add_u32	$s5, $s5, 4294967169;
	cmp_lt_b1_s32	$c0, $s5, 0;
	cmov_b32	$s4, $c0, $s0, $s4;
	cmp_gt_b1_s32	$c1, $s5, 22;
	cmov_b32	$s4, $c1, $s3, $s4;
	cmp_gt_b1_u32	$c2, $s2, 2139095040;
	cmov_b32	$s2, $c2, $s0, $s4;
	cmov_b32	$s1, $c0, $s3, $s1;
	cmov_b32	$s0, $c1, $s0, $s1;
	ld_arg_align(8)_u64	$d0, [%iptr];
	st_align(4)_u32	$s0, [$d0];
	mov_b32	$s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_modf];
	ret;
};


decl function &_gcc_trunc(arg_f32 %ret)(arg_f32 %x);


function &_gcc_trunc(arg_f32 %_gcc_trunc)(arg_f32 %x)
{

@_gcc_trunc_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	trunc_ftz_f32	$s0, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_trunc];
	ret;
};

align(8) readonly_f32 &__math32_SINHCOSH_TBL[74] = f32[](0F00000000, 0F3f800000, 0F3f966cfe, 0F3fc583ab, 0F40681e7b, 0F4070c7d0, 0F41204937, 0F41211525, 0F41da51c0, 0F41da7743, 0F4294680b, 0F42946b7e, 0F4349b691, 0F4349b734, 0F4409143b, 0F4409144a, 0F44ba4f53, 0F44ba4f55, 0F457d38ac, 0F457d38ac, 0F462c14ee, 0F462c14ef, 0F46e9e224, 0F46e9e224, 0F479ef0b3, 0F479ef0b3, 0F485805ad, 0F485805ad, 0F4912cd62, 0F4912cd62, 0F49c78665, 0F49c78665, 0F4a87975f, 0F4a87975f, 0F4b3849a4, 0F4b3849a4, 0F4bfa7910, 0F4bfa7910, 0F4caa36c8, 0F4caa36c8, 0F4d675844, 0F4d675844, 0F4e1d3710, 0F4e1d3710, 0F4ed5ad6e, 0F4ed5ad6e, 0F4f91357a, 0F4f91357a, 0F50455bfe, 0F50455bfe, 0F51061e9d, 0F51061e9d, 0F51b64993, 0F51b64993, 0F5277c118, 0F5277c118, 0F53285dd2, 0F53285dd2, 0F53e4d572, 0F53e4d572, 0F549b8238, 0F549b8238, 0F55535bb3, 0F55535bb3, 0F560fa1fe, 0F560fa1fe, 0F56c3379a, 0F56c3379a, 0F5784a9f1, 0F5784a9f1, 0F58344f11, 0F58344f11, 0F58f510ad, 0F58f510ad);

decl function &_gcc_sinh(arg_f32 %ret)(arg_f32 %x);


function &_gcc_sinh(arg_f32 %_gcc_sinh)(arg_f32 %x)
{

@_gcc_sinh_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s1, $s0;
	and_b32	$s2, $s1, 2147483647;
	mov_b32	$s3, $s2;
	cvt_ftz_s32_f32	$s4, $s3;
	cmp_gt_b1_u32	$c0, $s4, 36;
	cmov_b32	$s4, $c0, 0, $s4;
	add_ftz_f32	$s5, $s3, 0Fbf317280;
	mov_b32	$s6, $s5;
	and_b32	$s6, $s6, 4294963200;
	sub_ftz_f32	$s7, $s5, $s6;
	mul_ftz_f32	$s8, $s7, 0F39a3b295;
	nfma_f32	$s7, $s7, 0F3fb8a000, $s8;
	nfma_f32	$s7, $s6, 0F39a3b295, $s7;
	nexp2_f32	$s7, $s7;
	mul_ftz_f32	$s6, $s6, 0F3fb8a000;
	nexp2_f32	$s6, $s6;
	mul_ftz_f32	$s6, $s7, $s6;
	cmp_lt_ftz_b1_f32	$c0, $s5, 0Fc2aeac50;
	cmov_b32	$s6, $c0, 0, $s6;
	cmp_gt_ftz_b1_f32	$c0, $s5, 0F42b17218;
	cmov_b32	$s5, $c0, 2139095040, $s6;
	cvt_near_f32_s32	$s6, $s4;
	sub_ftz_f32	$s7, $s3, $s6;
	mul_ftz_f32	$s6, $s7, $s7;
	nfma_f32	$s8, $s6, 0F2b5a092d, 0F2f308e59;
	nfma_f32	$s8, $s6, $s8, 0F32d73230;
	nfma_f32	$s8, $s6, $s8, 0F3638ef1d;
	mul_ftz_f32	$s9, $s7, $s6;
	nfma_f32	$s8, $s6, $s8, 0F39500d01;
	cvt_s64_s32	$d0, $s4;
	nfma_f32	$s4, $s6, $s8, 0F3c088889;
	shl_u64	$d0, $d0, 3;
	nfma_f32	$s10, $s6, $s4, 0F3e2aaaab;
	ld_v2_readonly_align(8)_f32	($s8, $s4), [&__math32_SINHCOSH_TBL][$d0];
	nfma_f32	$s11, $s6, 0F2d4cc25c, 0F310f72b2;
	nfma_f32	$s7, $s10, $s9, $s7;
	nfma_f32	$s9, $s6, $s11, 0F3493f283;
	nfma_f32	$s9, $s6, $s9, 0F37d00d01;
	nfma_f32	$s9, $s6, $s9, 0F3ab60b61;
	nfma_f32	$s9, $s6, $s9, 0F3d2aaaab;
	nfma_f32	$s9, $s6, $s9, 0F3f000000;
	nfma_f32	$s6, $s9, $s6, 0F3f800000;
	mul_ftz_f32	$s6, $s6, $s8;
	nfma_f32	$s4, $s4, $s7, $s6;
	nfma_f32	$s5, 0F36d01087, $s5, $s5;
	cmp_ge_ftz_b1_f32	$c0, $s3, 0F41051592;
	cmov_b32	$s4, $c0, $s5, $s4;
	cmp_ge_ftz_b1_f32	$c0, $s3, 0F42b2d4fd;
	cmov_b32	$s3, $c0, 2139095040, $s4;
	xor_b32	$s4, $s2, $s1;
	add_u32	$s1, $s2, 3347054592;
	or_b32	$s2, $s3, $s4;
	cmp_gt_b1_u32	$c0, $s1, 1191182336;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_sinh];
	ret;
};


decl function &_gcc_exp(arg_f32 %ret)(arg_f32 %x);


function &_gcc_exp(arg_f32 %_gcc_exp)(arg_f32 %x)
{

@_gcc_exp_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	cmp_lt_ftz_b1_f32	$c0, $s0, 0F00000000;
	cmov_b32	$s2, $c0, 3204448256, 1056964608;
	class_b1_f32	$c0, $s0, 3;
	cvt_u32_b1	$s1, $c0;
	and_b32	$s1, $s1, 1;
	nfma_f32	$s2, $s0, 0F3fb8aa3b, $s2;
	cvt_ftz_s32_f32	$s3, $s2;
	cvt_near_f32_s32	$s4, $s3;
	nfma_f32	$s2, $s4, 0Fbf317180, $s0;
	mul_ftz_f32	$s5, $s4, 0Fb717f7d1;
	add_ftz_f32	$s5, $s2, $s5;
	mul_ftz_f32	$s6, $s5, $s5;
	nfma_f32	$s7, $s6, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s7, $s6, $s7, 0F388ab355;
	nfma_f32	$s7, $s6, $s7, 0Fbb360b61;
	shl_u32	$s3, $s3, 23;
	nfma_f32	$s7, $s6, $s7, 0F3e2aaaab;
	mul_ftz_f32	$s4, $s4, 0F3717f7d1;
	neg_f32	$s7, $s7;
	nfma_f32	$s6, $s6, $s7, $s5;
	mul_ftz_f32	$s5, $s5, $s6;
	sub_ftz_f32	$s6, 0F40000000, $s6;
	nrcp_f32	$s6, $s6;
	mul_ftz_f32	$s5, $s6, $s5;
	sub_ftz_f32	$s4, $s4, $s5;
	sub_ftz_f32	$s2, $s4, $s2;
	sub_ftz_f32	$s2, 0F3f800000, $s2;
	add_u32	$s2, $s2, $s3;
	cmp_lt_ftz_b1_f32	$c0, $s0, 0Fc2aeac4f;
	cmov_b32	$s2, $c0, 0, $s2;
	cmp_lt_ftz_b1_f32	$c0, $s0, 0F42b17218;
	cmov_b32	$s2, $c0, $s2, 2139095040;
	cvt_b1_u32	$c0, $s1;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_exp];
	ret;
};


decl function &_gcc_powr(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y);


function &_gcc_powr(arg_f32 %_gcc_powr)(
	arg_f32 %x,
	arg_f32 %y)
{
	align(4) spill_u8 %__spillStack[40];

@_gcc_powr_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s4, [%y];
	mov_b32	$s0, $s4;
	and_b32	$s1, $s0, 2147483647;
	shr_u32	$s2, $s1, 23;
	sub_u32	$s3, 150, $s2;
	shl_u32	$s3, 1, $s3;
	add_u32	$s5, $s3, 4294967295;
	and_b32	$s5, $s5, $s0;
	and_b32	$s3, $s3, $s0;
	cmp_ne_b1_s32	$c0, $s3, 0;
	cmp_eq_b1_s32	$c1, $s5, 0;
	and_b1	$c0, $c0, $c1;
	add_u32	$s5, $s2, 4294967170;
	cmp_gt_b1_s32	$c1, $s5, 0;
	and_b1	$c5, $c0, $c1;
	ld_arg_align(4)_f32	$s2, [%x];
	and_b32	$s3, $s2, 2147483647;
	cmp_eq_b1_s32	$c1, $s1, 2139095040;
	cmp_eq_b1_s32	$c0, $s3, 1065353216;
	and_b1	$c1, $c0, $c1;
	cvt_u32_b1	$s6, $c1;
	st_spill_align(4)_u32	$s6, [%__spillStack][12];
	cmp_lt_b1_u32	$c1, $s1, 2139095040;
	and_b1	$c0, $c0, $c1;
	cvt_u32_b1	$s6, $c0;
	st_spill_align(4)_u32	$s6, [%__spillStack][16];
	cmp_ne_b1_s32	$c0, $s0, $s1;
	cmp_eq_b1_s32	$c1, $s0, $s1;
	cmp_eq_b1_s32	$c2, $s3, 0;
	and_b1	$c3, $c2, $c1;
	cvt_u32_b1	$s6, $c3;
	st_spill_align(4)_u32	$s6, [%__spillStack];
	and_b1	$c2, $c0, $c2;
	cvt_u32_b1	$s6, $c2;
	st_spill_align(4)_u32	$s6, [%__spillStack][8];
	cmp_lt_b1_s32	$c2, $s2, 2139095040;
	cmp_eq_b1_s32	$c3, $s1, 0;
	and_b1	$c2, $c2, $c3;
	cvt_u32_b1	$s6, $c2;
	st_spill_align(4)_u32	$s6, [%__spillStack][24];
	cmp_eq_b1_s32	$c2, $s3, 2139095040;
	and_b1	$c3, $c2, $c3;
	cvt_u32_b1	$s6, $c3;
	st_spill_align(4)_u32	$s6, [%__spillStack][20];
	and_b1	$c1, $c2, $c1;
	cvt_u32_b1	$s6, $c1;
	st_spill_align(4)_u32	$s6, [%__spillStack][28];
	and_b1	$c0, $c0, $c2;
	cvt_u32_b1	$s6, $c0;
	st_spill_align(4)_u32	$s6, [%__spillStack][32];
	cmp_eq_b1_s32	$c0, $s0, 2139095040;
	and_b1	$c1, $c2, $c0;
	cvt_u32_b1	$s6, $c1;
	st_spill_align(4)_u32	$s6, [%__spillStack][36];
	cmp_gt_b1_u32	$c2, $s3, 1065353216;
	cmp_eq_b1_s32	$c1, $s0, -8388608;
	cmp_lt_b1_u32	$c4, $s3, 1065353216;
	and_b1	$c3, $c4, $c1;
	and_b1	$c1, $c2, $c1;
	and_b1	$c2, $c2, $c0;
	and_b1	$c4, $c4, $c0;
	cmp_lt_b1_s32	$c0, $s5, 25;
	and_b1	$c0, $c5, $c0;
	or_b32	$s5, $s3, 1065353216;
	add_ftz_f32	$s5, $s5, 0Fbf800000;
	shr_u32	$s7, $s3, 23;
	cmp_eq_b1_s32	$c5, $s7, 0;
	cmov_b32	$s6, $c5, $s5, $s3;
	add_u32	$s7, $s7, 4294967169;
	shr_s32	$s5, $s5, 23;
	add_u32	$s5, $s5, 4294967043;
	cmov_b32	$s8, $c5, $s5, $s7;
	cmp_ne_b1_s32	$c6, $s2, $s3;
	cmp_ne_b1_s32	$c5, $s3, 0;
	and_b1	$c5, $c5, $c6;
	and_b1	$c6, $c0, $c6;
	and_b32	$s5, $s6, 8323072;
	shl_u32	$s7, $s6, 1;
	and_b32	$s7, $s7, 65536;
	mov_b32	$s9, $s3;
	add_u32	$s5, $s7, $s5;
	sub_ftz_f32	$s14, 0F3f800000, $s9;
	mul_ftz_f32	$s7, $s14, $s14;
	shr_u32	$s9, $s5, 16;
	mul_ftz_f32	$s10, $s14, $s7;
	nfma_f32	$s11, $s14, 0F3e124925, 0F3e2aaaab;
	nfma_f32	$s11, $s14, $s11, 0F3e4ccccd;
	nfma_f32	$s11, $s14, $s11, 0F3e800000;
	nfma_f32	$s11, $s14, $s11, 0F3eaaaaab;
	mul_ftz_f32	$s12, $s10, $s11;
	mul_ftz_f32	$s7, $s7, 0Fbf000000;
	or_b32	$s15, $s5, 1056964608;
	sub_ftz_f32	$s5, $s7, $s12;
	cvt_near_f32_s32	$s13, $s8;
	abs_f32	$s11, $s14;
	cvt_u64_u32	$d0, $s9;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s8, $s10), [&__math32_LOGE_TBL][$d0];
	nfma_f32	$s9, $s13, 0F3f317000, $s8;
	neg_f32	$s8, $s12;
	sub_ftz_f32	$s12, $s5, $s14;
	neg_f32	$s14, $s14;
	and_b32	$s6, $s6, 8388607;
	or_b32	$s6, $s6, 1056964608;
	sub_ftz_f32	$s6, $s15, $s6;
	ld_v2_readonly_align(8)_f32	($s16, $s15), [&__math32_LOG_INV_TBL_EP][$d0];
	mul_ftz_f32	$s15, $s6, $s15;
	mul_ftz_f32	$s16, $s6, $s16;
	add_ftz_f32	$s6, $s16, $s15;
	nfma_f32	$s17, $s6, 0F3e800000, 0F3eaaaaab;
	nfma_f32	$s17, $s6, $s17, 0F3f000000;
	mul_ftz_f32	$s18, $s6, $s6;
	mul_ftz_f32	$s17, $s17, $s18;
	sub_ftz_f32	$s16, $s16, $s6;
	add_ftz_f32	$s15, $s15, $s16;
	add_ftz_f32	$s15, $s17, $s15;
	neg_f32	$s15, $s15;
	nfma_f32	$s13, $s13, 0F3805fdf4, $s15;
	neg_f32	$s15, $s6;
	cmp_lt_ftz_b1_f32	$c0, $s11, 0F3d800000;
	cmov_b32	$s11, $c0, $s7, $s15;
	cmov_b32	$s7, $c0, $s14, $s9;
	add_ftz_f32	$s10, $s13, $s10;
	sub_ftz_f32	$s13, $s10, $s6;
	add_ftz_f32	$s6, $s9, $s13;
	cmov_b32	$s6, $c0, $s12, $s6;
	cmov_b32	$s9, $c0, $s8, $s10;
	cmov_b32	$s8, $c0, $s5, $s13;
	and_b32	$s5, $s0, 4294963200;
	sub_ftz_f32	$s4, $s4, $s5;
	sub_ftz_f32	$s10, $s8, $s11;
	sub_ftz_f32	$s9, $s9, $s10;
	sub_ftz_f32	$s7, $s7, $s6;
	add_ftz_f32	$s7, $s8, $s7;
	add_ftz_f32	$s8, $s9, $s7;
	mov_b32	$s7, $s6;
	and_b32	$s7, $s7, 4294963200;
	sub_ftz_f32	$s6, $s6, $s7;
	add_ftz_f32	$s6, $s8, $s6;
	mul_ftz_f32	$s8, $s4, $s6;
	nfma_f32	$s4, $s7, $s4, $s8;
	nfma_f32	$s6, $s6, $s5, $s4;
	nfma_f32	$s4, $s5, $s7, $s6;
	neg_f32	$s8, $s4;
	nfma_f32	$s5, $s5, $s7, $s8;
	add_ftz_f32	$s7, $s6, $s5;
	cmp_gt_ftz_b1_f32	$c0, $s7, 0Fb482e308;
	cmp_eq_ftz_b1_f32	$c7, $s4, 0F42b17218;
	and_b1	$c0, $c7, $c0;
	mul_ftz_f32	$s5, $s4, 0F42b8aa3b;
	cvt_ftz_s32_f32	$s8, $s5;
	shr_s32	$s6, $s8, 6;
	cmp_eq_b1_s32	$c7, $s6, -126;
	cmov_b32	$s5, $c7, 1, $s6;
	cmp_gt_ftz_b1_f32	$c7, $s4, 0F42b17218;
	or_b1	$c0, $c7, $c0;
	cvt_near_f32_s32	$s9, $s8;
	nfma_f32	$s10, $s9, 0Fbc310000, $s4;
	nfma_f32	$s9, $s9, 0Fb7e42fef, $s10;
	add_ftz_f32	$s7, $s7, $s9;
	nfma_f32	$s9, $s7, 0F3d2aaaab, 0F3e2aaaab;
	nfma_f32	$s9, $s9, $s7, 0F3f000000;
	mul_ftz_f32	$s10, $s7, $s7;
	nfma_f32	$s7, $s9, $s10, $s7;
	and_b32	$s8, $s8, 63;
	cvt_u64_u32	$d0, $s8;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s9, $s8), [&__math32_EXP_TBL_EP][$d0];
	nfma_f32	$s10, $s8, $s7, $s8;
	sub_u32	$s8, 4294967170, $s5;
	shl_u32	$s6, $s6, 23;
	nfma_f32	$s7, $s9, $s7, $s10;
	add_ftz_f32	$s7, $s9, $s7;
	add_u32	$s6, $s7, $s6;
	and_b32	$s7, $s7, 8388607;
	or_b32	$s7, $s7, 8388608;
	shr_u32	$s7, $s7, $s8;
	cmp_lt_b1_s32	$c7, $s5, -125;
	cmov_b32	$s5, $c7, $s7, $s6;
	cmov_b32	$s5, $c0, 2139095040, $s5;
	cmp_lt_ftz_b1_f32	$c0, $s4, 0Fc2ce8ed0;
	cmov_b32	$s4, $c0, 0, $s5;
	mov_b32	$s5, $s4;
	xor_b32	$s5, $s5, 2147483648;
	cmov_b32	$s4, $c6, $s5, $s4;
	cmov_b32	$s4, $c3, 2139095040, $s4;
	cmov_b32	$s4, $c4, 0, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][16];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 1065353216, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][12];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 2143289344, $s4;
	cmov_b32	$s4, $c1, 0, $s4;
	cmov_b32	$s4, $c2, 2139095040, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][24];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 1065353216, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][32];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 0, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][28];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 2139095040, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][36];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 2139095040, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][20];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 2143289344, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][8];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 2139095040, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 0, $s4;
	or_b32	$s5, $s0, $s2;
	and_b32	$s5, $s5, 2147483647;
	cmp_eq_b1_s32	$c0, $s5, 0;
	cmov_b32	$s4, $c0, 2143289344, $s4;
	cmov_b32	$s4, $c5, 2143289344, $s4;
	cmp_gt_b1_u32	$c0, $s3, 2139095040;
	cmov_b32	$s2, $c0, $s2, $s4;
	cmp_gt_b1_u32	$c0, $s1, 2139095040;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_powr];
	ret;
};


decl function &_gcc_logb(arg_f32 %ret)(arg_f32 %x);


function &_gcc_logb(arg_f32 %_gcc_logb)(arg_f32 %x)
{

@_gcc_logb_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	and_b32	$s0, $s0, 2147483647;
	mov_b32	$s1, $s0;
	shr_u32	$s2, $s0, 23;
	add_u32	$s2, $s2, 4294967169;
	cvt_near_f32_s32	$s2, $s2;
	cmp_gt_b1_u32	$c0, $s0, 2139095039;
	cmov_b32	$s1, $c0, $s1, $s2;
	firstbit_u32_u32	$s2, $s0;
	sub_u32	$s2, 4294967178, $s2;
	cvt_near_f32_s32	$s2, $s2;
	cmp_eq_b1_s32	$c0, $s0, 0;
	cmov_b32	$s2, $c0, 3272998912, $s2;
	cmp_lt_b1_u32	$c1, $s0, 8388608;
	cmov_b32	$s0, $c1, $s2, $s1;
	cmov_b32	$s0, $c0, 4286578688, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_logb];
	ret;
};

align(8) readonly_f32 &__math32_LOG10_TBL[258] = f32[](0F00000000, 0F00000000, 0F3b5d4000, 0F367a8e44, 0F3bdc8000, 0F368ed49f, 0F3c24c000, 0F36c21451, 0F3c5ac000, 0F375211d6, 0F3c884000, 0F3720ea11, 0F3ca2c000, 0F37e9eb59, 0F3cbd4000, 0F37b87be7, 0F3cd78000, 0F37bf2560, 0F3cf1c000, 0F33d597a0, 0F3d05c000, 0F37806a05, 0F3d128000, 0F3820581f, 0F3d1f4000, 0F38223334, 0F3d2c0000, 0F378e3bac, 0F3d388000, 0F3810684f, 0F3d450000, 0F37feb7ae, 0F3d518000, 0F36a9d609, 0F3d5dc000, 0F37a68163, 0F3d6a0000, 0F376a8b27, 0F3d760000, 0F384c8fd6, 0F3d810000, 0F3885183e, 0F3d870000, 0F3874a760, 0F3d8d0000, 0F380d1154, 0F3d92c000, 0F38ea42bd, 0F3d98c000, 0F384c1571, 0F3d9e8000, 0F38ba66b8, 0F3da44000, 0F38e7da3b, 0F3daa0000, 0F38eee632, 0F3dafc000, 0F38d00911, 0F3db58000, 0F388bbede, 0F3dbb4000, 0F378a0512, 0F3dc0c000, 0F3894c7a0, 0F3dc64000, 0F38e30710, 0F3dcc0000, 0F36db2829, 0F3dd18000, 0F3729d609, 0F3dd6c000, 0F38fa0e82, 0F3ddc4000, 0F38bc9a75, 0F3de1c000, 0F383a9297, 0F3de70000, 0F38dc83c8, 0F3dec8000, 0F37eac335, 0F3df1c000, 0F38706ac3, 0F3df70000, 0F389574c2, 0F3dfc4000, 0F3892d068, 0F3e00c000, 0F38615032, 0F3e034000, 0F3917acf4, 0F3e05c000, 0F3967a126, 0F3e088000, 0F38217840, 0F3e0b0000, 0F38b420ab, 0F3e0d8000, 0F38f9c7b2, 0F3e100000, 0F391103bd, 0F3e128000, 0F39169a6b, 0F3e150000, 0F390dd194, 0F3e178000, 0F38eda471, 0F3e1a0000, 0F38a38950, 0F3e1c8000, 0F37f6844a, 0F3e1ec000, 0F395e1cdb, 0F3e214000, 0F390fcffc, 0F3e23c000, 0F38503e9d, 0F3e260000, 0F394b00fd, 0F3e288000, 0F38a9910a, 0F3e2ac000, 0F39518a31, 0F3e2d4000, 0F3882d2c2, 0F3e2f8000, 0F392488e4, 0F3e31c000, 0F397b0aff, 0F3e344000, 0F388a22d8, 0F3e368000, 0F3902bd5e, 0F3e38c000, 0F39342f85, 0F3e3b0000, 0F39598811, 0F3e3d4000, 0F3972e6b1, 0F3e3fc000, 0F34d53654, 0F3e420000, 0F360ca25e, 0F3e440000, 0F39785cc0, 0F3e464000, 0F39630710, 0F3e488000, 0F39424ed7, 0F3e4ac000, 0F39165101, 0F3e4d0000, 0F38be5421, 0F3e4f4000, 0F37e7b0c0, 0F3e514000, 0F394fd0c3, 0F3e538000, 0F38efaaaa, 0F3e55c000, 0F37a8f566, 0F3e57c000, 0F3927c744, 0F3e5a0000, 0F383fa4d5, 0F3e5c0000, 0F392d9e39, 0F3e5e4000, 0F3803feae, 0F3e604000, 0F390a268c, 0F3e624000, 0F39692b80, 0F3e648000, 0F38789b4f, 0F3e668000, 0F3909307d, 0F3e688000, 0F394a601c, 0F3e6ac000, 0F35e67edc, 0F3e6cc000, 0F383e386d, 0F3e6ec000, 0F38a7743d, 0F3e70c000, 0F38dccec3, 0F3e72c000, 0F38ff57e0, 0F3e74c000, 0F39079d8b, 0F3e76c000, 0F390651a6, 0F3e78c000, 0F38f7bad9, 0F3e7ac000, 0F38d0ab82, 0F3e7cc000, 0F38979e7d, 0F3e7ec000, 0F381978ee, 0F3e804000, 0F397816c8, 0F3e814000, 0F39410cb2, 0F3e824000, 0F39015384, 0F3e834000, 0F3863fa28, 0F3e840000, 0F39f41065, 0F3e850000, 0F39c7668a, 0F3e860000, 0F39968afa, 0F3e870000, 0F39430db9, 0F3e880000, 0F38a18cf3, 0F3e88c000, 0F39eb2907, 0F3e89c000, 0F39a9e10c, 0F3e8ac000, 0F39492800, 0F3e8bc000, 0F385a53d1, 0F3e8c8000, 0F39ce0cf7, 0F3e8d8000, 0F3979c7b2, 0F3e8e8000, 0F389f5d99, 0F3e8f4000, 0F39ceefcb, 0F3e904000, 0F39646a39, 0F3e914000, 0F380d7a9b, 0F3e920000, 0F39ad6650, 0F3e930000, 0F390ac3b8, 0F3e93c000, 0F39d9a9a8, 0F3e94c000, 0F39548a99, 0F3e958000, 0F39f73c4b, 0F3e968000, 0F3980960e, 0F3e978000, 0F374b3d5a, 0F3e984000, 0F39888f1e, 0F3e994000, 0F37679a07, 0F3e9a0000, 0F39826a13);
//readonly_f32 &__math32_LOG_INV_TBL[129] = f32[](0F40000000, 0F3ffe03f8, 0F3ffc0fc1, 0F3ffa232d, 0F3ff83e10, 0F3ff6603e, 0F3ff4898d, 0F3ff2b9d6, 0F3ff0f0f1, 0F3fef2eb7, 0F3fed7304, 0F3febbdb3, 0F3fea0ea1, 0F3fe865ac, 0F3fe6c2b4, 0F3fe52598, 0F3fe38e39, 0F3fe1fc78, 0F3fe07038, 0F3fdee95c, 0F3fdd67c9, 0F3fdbeb62, 0F3fda740e, 0F3fd901b2, 0F3fd79436, 0F3fd62b81, 0F3fd4c77b, 0F3fd3680d, 0F3fd20d21, 0F3fd0b6a0, 0F3fcf6475, 0F3fce168a, 0F3fcccccd, 0F3fcb8728, 0F3fca4588, 0F3fc907da, 0F3fc7ce0c, 0F3fc6980c, 0F3fc565c8, 0F3fc43730, 0F3fc30c31, 0F3fc1e4bc, 0F3fc0c0c1, 0F3fbfa030, 0F3fbe82fa, 0F3fbd6910, 0F3fbc5264, 0F3fbb3ee7, 0F3fba2e8c, 0F3fb92144, 0F3fb81703, 0F3fb70fbb, 0F3fb60b61, 0F3fb509e7, 0F3fb40b41, 0F3fb30f63, 0F3fb21643, 0F3fb11fd4, 0F3fb02c0b, 0F3faf3ade, 0F3fae4c41, 0F3fad602b, 0F3fac7692, 0F3fab8f6a, 0F3faaaaab, 0F3fa9c84a, 0F3fa8e83f, 0F3fa80a81, 0F3fa72f05, 0F3fa655c4, 0F3fa57eb5, 0F3fa4a9cf, 0F3fa3d70a, 0F3fa3065e, 0F3fa237c3, 0F3fa16b31, 0F3fa0a0a1, 0F3f9fd80a, 0F3f9f1166, 0F3f9e4cad, 0F3f9d89d9, 0F3f9cc8e1, 0F3f9c09c1, 0F3f9b4c70, 0F3f9a90e8, 0F3f99d723, 0F3f991f1a, 0F3f9868c8, 0F3f97b426, 0F3f97012e, 0F3f964fda, 0F3f95a025, 0F3f94f209, 0F3f944581, 0F3f939a86, 0F3f92f114, 0F3f924925, 0F3f91a2b4, 0F3f90fdbc, 0F3f905a38, 0F3f8fb824, 0F3f8f177a, 0F3f8e7835, 0F3f8dda52, 0F3f8d3dcb, 0F3f8ca29c, 0F3f8c08c1, 0F3f8b7034, 0F3f8ad8f3, 0F3f8a42f8, 0F3f89ae41, 0F3f891ac7, 0F3f888889, 0F3f87f781, 0F3f8767ab, 0F3f86d905, 0F3f864b8a, 0F3f85bf37, 0F3f853408, 0F3f84a9fa, 0F3f842108, 0F3f839930, 0F3f83126f, 0F3f828cc0, 0F3f820821, 0F3f81848e, 0F3f810204, 0F3f808081, 0F3f800000);

decl function &_gcc_log10(arg_f32 %ret)(arg_f32 %x);


function &_gcc_log10(arg_f32 %_gcc_log10)(arg_f32 %x)
{

@_gcc_log10_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s1, $s0;
	or_b32	$s2, $s1, 1065353216;
	add_ftz_f32	$s2, $s2, 0Fbf800000;
	shr_u32	$s3, $s1, 23;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cmov_b32	$s11, $c0, $s2, $s1;
	add_u32	$s3, $s3, 4294967169;
	shr_u32	$s2, $s2, 23;
	add_u32	$s2, $s2, 4294967043;
	cmov_b32	$s7, $c0, $s2, $s3;
	shl_u32	$s4, $s11, 1;
	add_ftz_f32	$s2, $s0, 0Fbf800000;
	add_ftz_f32	$s3, $s2, 0F40000000;
	nrcp_f32	$s3, $s3;
	mul_ftz_f32	$s5, $s2, $s3;
	add_ftz_f32	$s3, $s5, $s5;
	and_b32	$s12, $s11, 8323072;
	and_b32	$s13, $s4, 65536;
	mul_ftz_f32	$s8, $s3, $s3;
	mov_b32	$s4, $s2;
	and_b32	$s4, $s4, 4294901760;
	sub_ftz_f32	$s9, $s2, $s4;
	nfma_f32	$s10, $s8, 0F3c4ccccd, 0F3daaaaab;
	abs_f32	$s6, $s2;
	add_u32	$s12, $s13, $s12;
	or_b32	$s13, $s12, 1056964608;
	and_b32	$s11, $s11, 8388607;
	or_b32	$s11, $s11, 1056964608;
	sub_ftz_f32	$s11, $s13, $s11;
	shr_u32	$s12, $s12, 16;
	cvt_u64_u32	$d0, $s12;
	shl_u64	$d1, $d0, 2;
	ld_readonly_align(4)_f32	$s12, [&__math32_LOG_INV_TBL][$d1];
	mul_ftz_f32	$s12, $s11, $s12;
	mul_ftz_f32	$s13, $s12, $s12;
	nfma_f32	$s14, $s12, 0F3eaaaaab, 0F3f000000;
	cvt_near_f32_s32	$s11, $s7;
	nfma_f32	$s7, $s14, $s13, $s12;
	mul_ftz_f32	$s12, $s11, 0F39826a13;
	nfma_f32	$s7, $s7, 0Fbede5bd9, $s12;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s12, $s13), [&__math32_LOG10_TBL][$d0];
	add_ftz_f32	$s7, $s13, $s7;
	nfma_f32	$s11, $s11, 0F3e9a0000, $s12;
	mul_ftz_f32	$s8, $s10, $s8;
	mul_ftz_f32	$s2, $s2, $s5;
	neg_f32	$s2, $s2;
	nfma_f32	$s2, $s3, $s8, $s2;
	add_ftz_f32	$s2, $s9, $s2;
	mul_ftz_f32	$s3, $s2, 0F3a37b152;
	nfma_f32	$s5, $s4, 0F3a37b152, $s3;
	add_ftz_f32	$s3, $s11, $s7;
	nfma_f32	$s2, $s2, 0F3ede0000, $s5;
	nfma_f32	$s2, $s4, 0F3ede0000, $s2;
	cmp_lt_ftz_b1_f32	$c0, $s6, 0F3d800000;
	cmov_b32	$s3, $c0, $s2, $s3;
	and_b32	$s2, $s1, 2147483647;
	cmp_gt_b1_u32	$c0, $s2, 2139095039;
	cmov_b32	$s0, $c0, $s0, $s3;
	cmp_ne_b1_s32	$c0, $s1, $s2;
	cmov_b32	$s0, $c0, 2143289344, $s0;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmov_b32	$s0, $c0, 4286578688, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_log10];
	ret;
};


decl function &_gcc_cosh(arg_f32 %ret)(arg_f32 %x);


function &_gcc_cosh(arg_f32 %_gcc_cosh)(arg_f32 %x)
{

@_gcc_cosh_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	and_b32	$s0, $s0, 2147483647;
	mov_b32	$s1, $s0;
	cvt_ftz_s32_f32	$s2, $s1;
	cmp_gt_b1_u32	$c0, $s2, 36;
	cmov_b32	$s2, $c0, 0, $s2;
	add_ftz_f32	$s3, $s1, 0Fbf317280;
	mov_b32	$s4, $s3;
	and_b32	$s4, $s4, 4294963200;
	sub_ftz_f32	$s5, $s3, $s4;
	mul_ftz_f32	$s6, $s5, 0F39a3b295;
	nfma_f32	$s5, $s5, 0F3fb8a000, $s6;
	nfma_f32	$s5, $s4, 0F39a3b295, $s5;
	nexp2_f32	$s5, $s5;
	mul_ftz_f32	$s4, $s4, 0F3fb8a000;
	nexp2_f32	$s4, $s4;
	mul_ftz_f32	$s4, $s5, $s4;
	cmp_lt_ftz_b1_f32	$c0, $s3, 0Fc2aeac50;
	cmov_b32	$s4, $c0, 0, $s4;
	cmp_gt_ftz_b1_f32	$c0, $s3, 0F42b17218;
	cmov_b32	$s3, $c0, 2139095040, $s4;
	cvt_near_f32_s32	$s4, $s2;
	sub_ftz_f32	$s5, $s1, $s4;
	mul_ftz_f32	$s4, $s5, $s5;
	nfma_f32	$s6, $s4, 0F2b5a092d, 0F2f308e59;
	nfma_f32	$s6, $s4, $s6, 0F32d73230;
	nfma_f32	$s6, $s4, $s6, 0F3638ef1d;
	mul_ftz_f32	$s7, $s5, $s4;
	nfma_f32	$s6, $s4, $s6, 0F39500d01;
	cvt_s64_s32	$d0, $s2;
	nfma_f32	$s2, $s4, $s6, 0F3c088889;
	shl_u64	$d0, $d0, 3;
	nfma_f32	$s8, $s4, $s2, 0F3e2aaaab;
	ld_v2_readonly_align(8)_f32	($s2, $s6), [&__math32_SINHCOSH_TBL][$d0];
	nfma_f32	$s9, $s4, 0F2d4cc25c, 0F310f72b2;
	nfma_f32	$s5, $s8, $s7, $s5;
	nfma_f32	$s7, $s4, $s9, 0F3493f283;
	nfma_f32	$s7, $s4, $s7, 0F37d00d01;
	nfma_f32	$s7, $s4, $s7, 0F3ab60b61;
	nfma_f32	$s7, $s4, $s7, 0F3d2aaaab;
	nfma_f32	$s7, $s4, $s7, 0F3f000000;
	nfma_f32	$s4, $s7, $s4, 0F3f800000;
	mul_ftz_f32	$s4, $s4, $s6;
	nfma_f32	$s2, $s2, $s5, $s4;
	nfma_f32	$s3, 0F36d01087, $s3, $s3;
	cmp_ge_ftz_b1_f32	$c0, $s1, 0F41051592;
	cmov_b32	$s2, $c0, $s3, $s2;
	cmp_ge_ftz_b1_f32	$c0, $s1, 0F42b2d4fd;
	cmov_b32	$s1, $c0, 2139095040, $s2;
	cmp_gt_b1_u32	$c0, $s0, 2139095040;
	cmov_b32	$s1, $c0, 2143289344, $s1;
	cmp_lt_b1_u32	$c0, $s0, 947912704;
	cmov_b32	$s0, $c0, 1065353216, $s1;
	st_arg_align(4)_f32	$s0, [%_gcc_cosh];
	ret;
};

readonly_f32 &__math32_EXP_TBL[65] = f32[](0F3f800000, 0F3f8164d2, 0F3f82cd87, 0F3f843a29, 0F3f85aac3, 0F3f871f62, 0F3f88980f, 0F3f8a14d5, 0F3f8b95c2, 0F3f8d1adf, 0F3f8ea43a, 0F3f9031dc, 0F3f91c3d3, 0F3f935a2b, 0F3f94f4f0, 0F3f96942d, 0F3f9837f0, 0F3f99e046, 0F3f9b8d3a, 0F3f9d3eda, 0F3f9ef532, 0F3fa0b051, 0F3fa27043, 0F3fa43516, 0F3fa5fed7, 0F3fa7cd94, 0F3fa9a15b, 0F3fab7a3a, 0F3fad583f, 0F3faf3b79, 0F3fb123f6, 0F3fb311c4, 0F3fb504f3, 0F3fb6fd92, 0F3fb8fbaf, 0F3fbaff5b, 0F3fbd08a4, 0F3fbf179a, 0F3fc12c4d, 0F3fc346cd, 0F3fc5672a, 0F3fc78d75, 0F3fc9b9be, 0F3fcbec15, 0F3fce248c, 0F3fd06334, 0F3fd2a81e, 0F3fd4f35b, 0F3fd744fd, 0F3fd99d16, 0F3fdbfbb8, 0F3fde60f5, 0F3fe0ccdf, 0F3fe33f89, 0F3fe5b907, 0F3fe8396a, 0F3feac0c7, 0F3fed4f30, 0F3fefe4ba, 0F3ff28177, 0F3ff5257d, 0F3ff7d0df, 0F3ffa83b3, 0F3ffd3e0c, 0F40000000);

decl function &_gcc_exp10(arg_f32 %ret)(arg_f32 %x);


function &_gcc_exp10(arg_f32 %_gcc_exp10)(arg_f32 %x)
{

@_gcc_exp10_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	class_b1_f32	$c0, $s0, 3;
	cvt_u32_b1	$s1, $c0;
	and_b32	$s1, $s1, 1;
	mul_ftz_f32	$s2, $s0, 0F43549a78;
	cvt_ftz_s32_f32	$s3, $s2;
	cvt_near_f32_s32	$s2, $s3;
	nfma_f32	$s4, $s2, 0Fbb9a0000, $s0;
	nfma_f32	$s2, $s2, 0Fb6826a13, $s4;
	mul_ftz_f32	$s2, $s2, 0F40135d8e;
	nfma_f32	$s4, $s2, 0F3d2aaaab, 0F3e2aaaab;
	nfma_f32	$s4, $s4, $s2, 0F3f000000;
	mul_ftz_f32	$s5, $s2, $s2;
	nfma_f32	$s4, $s4, $s5, $s2;
	shr_s32	$s2, $s3, 6;
	and_b32	$s3, $s3, 63;
	cvt_u64_u32	$d0, $s3;
	shl_u64	$d0, $d0, 2;
	ld_readonly_align(4)_f32	$s3, [&__math32_EXP_TBL][$d0];
	nfma_f32	$s3, $s3, $s4, $s3;
	shl_u32	$s4, $s2, 23;
	add_u32	$s5, $s2, 21;
	shl_u32	$s5, 1, $s5;
	mul_ftz_f32	$s5, $s5, $s3;
	add_u32	$s3, $s3, $s4;
	cmp_lt_b1_s32	$c0, $s2, -125;
	cmov_b32	$s2, $c0, $s5, $s3;
	cmp_gt_ftz_b1_f32	$c0, $s0, 0F421a209a;
	cmov_b32	$s2, $c0, 2139095040, $s2;
	cmp_lt_ftz_b1_f32	$c0, $s0, 0Fc23369f4;
	cmov_b32	$s2, $c0, 0, $s2;
	cvt_b1_u32	$c0, $s1;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_exp10];
	ret;
};


decl function &_gcc_fract(arg_f32 %ret)(
	arg_f32 %x,
	arg_u64 %ip);


function &_gcc_fract(arg_f32 %_gcc_fract)(
	arg_f32 %x,
	arg_u64 %ip)
{

@_gcc_fract_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	floor_ftz_f32	$s1, $s0;
	ld_arg_align(8)_u64	$d0, [%ip];
	st_align(4)_f32	$s1, [$d0];
	fract_ftz_f32	$s0, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_fract];
	ret;
};


decl function &_gcc_cospi(arg_f32 %ret)(arg_f32 %x);


function &_gcc_cospi(arg_f32 %_gcc_cospi)(arg_f32 %x)
{

@_gcc_cospi_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	and_b32	$s0, $s0, 2147483647;
	mov_b32	$s2, $s0;
	cvt_ftz_s32_f32	$s1, $s2;
	cvt_near_f32_s32	$s3, $s1;
	sub_ftz_f32	$s2, $s2, $s3;
	sub_ftz_f32	$s3, 0F3f800000, $s2;
	add_ftz_f32	$s4, $s2, 0Fbf000000;
	cmp_le_ftz_b1_f32	$c0, $s2, 0F3f400000;
	cmov_b32	$s4, $c0, $s4, $s3;
	cmp_lt_b1_u32	$c0, $s0, 2139095040;
	cmov_b32	$s5, $c0, 1065353216, 2143289344;
	shl_u32	$s3, $s1, 31;
	or_b32	$s1, $s3, 1065353216;
	cmp_lt_b1_u32	$c0, $s0, 1266679808;
	cmov_b32	$s1, $c0, $s1, $s5;
	sub_ftz_f32	$s5, 0F3f000000, $s2;
	cmp_lt_ftz_b1_f32	$c1, $s2, 0F3f000000;
	cmov_b32	$s4, $c1, $s5, $s4;
	cmp_le_ftz_b1_f32	$c0, $s2, 0F3e800000;
	cmov_b32	$s4, $c0, $s2, $s4;
	cmp_gtu_ftz_b1_f32	$c2, $s2, 0F3f400000;
	or_b1	$c0, $c0, $c2;
	xor_b32	$s2, $s3, 2147483648;
	cmov_b32	$s2, $c1, $s3, $s2;
	mul_ftz_f32	$s4, $s4, 0F40490fdb;
	mul_ftz_f32	$s3, $s4, $s4;
	mul_ftz_f32	$s5, $s4, $s3;
	nfma_f32	$s6, $s3, 0F3636df25, 0Fb95009d4;
	nfma_f32	$s6, $s3, $s6, 0F3c088887;
	nfma_f32	$s6, $s3, $s6, 0Fbe2aaaab;
	nfma_f32	$s4, $s5, $s6, $s4;
	nfma_f32	$s5, $s3, 0Fb492923a, 0F37d00ae3;
	nfma_f32	$s5, $s3, $s5, 0Fbab60b60;
	nfma_f32	$s5, $s3, $s5, 0F3d2aaaab;
	nfma_f32	$s6, $s3, 0Fbf000000, 0F3f800000;
	mul_ftz_f32	$s3, $s3, $s3;
	nfma_f32	$s3, $s3, $s5, $s6;
	cmov_b32	$s3, $c0, $s3, $s4;
	xor_b32	$s2, $s3, $s2;
	cmp_lt_b1_u32	$c0, $s0, 1258291200;
	cmov_b32	$s0, $c0, $s2, $s1;
	st_arg_align(4)_f32	$s0, [%_gcc_cospi];
	ret;
};


decl function &_gcc_tanh(arg_f32 %ret)(arg_f32 %x);


function &_gcc_tanh(arg_f32 %_gcc_tanh)(arg_f32 %x)
{

@_gcc_tanh_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s1, $s0;
	and_b32	$s2, $s1, 2147483647;
	mov_b32	$s3, $s2;
	mul_ftz_f32	$s4, $s3, $s3;
	nfma_f32	$s5, $s4, 0F382089d8, 0Fbaa18e00;
	nfma_f32	$s5, $s4, $s5, 0Fbe7679b1;
	nfma_f32	$s6, $s4, 0F384d2b7d, 0Fbabfbc9e;
	nfma_f32	$s6, $s4, $s6, 0Fbe9058e0;
	nfma_f32	$s7, $s4, 0F3e95c65f, 0F3f38db60;
	nfma_f32	$s8, $s4, 0F3eaf769c, 0F3f588550;
	cmp_lt_ftz_b1_f32	$c0, $s3, 0F3f666666;
	cmov_b32	$s5, $c0, $s6, $s5;
	cmov_b32	$s6, $c0, $s8, $s7;
	add_ftz_f32	$s7, $s3, $s3;
	mov_b32	$s8, $s7;
	and_b32	$s8, $s8, 4294963200;
	sub_ftz_f32	$s9, $s7, $s8;
	mul_ftz_f32	$s10, $s9, 0F39a3b295;
	nfma_f32	$s9, $s9, 0F3fb8a000, $s10;
	nfma_f32	$s9, $s8, 0F39a3b295, $s9;
	nexp2_f32	$s9, $s9;
	mul_ftz_f32	$s8, $s8, 0F3fb8a000;
	nexp2_f32	$s8, $s8;
	mul_ftz_f32	$s8, $s9, $s8;
	cmp_lt_ftz_b1_f32	$c0, $s7, 0Fc2aeac50;
	cmov_b32	$s8, $c0, 0, $s8;
	cmp_gt_ftz_b1_f32	$c0, $s7, 0F42b17218;
	cmov_b32	$s7, $c0, 2139095040, $s8;
	nrcp_f32	$s6, $s6;
	mul_ftz_f32	$s5, $s5, $s6;
	mul_ftz_f32	$s4, $s3, $s4;
	nfma_f32	$s4, $s5, $s4, $s3;
	add_ftz_f32	$s5, $s7, 0F3f800000;
	nrcp_f32	$s5, $s5;
	add_ftz_f32	$s5, $s5, $s5;
	sub_ftz_f32	$s5, 0F3f800000, $s5;
	cmp_le_ftz_b1_f32	$c0, $s3, 0F3f800000;
	cmov_b32	$s4, $c0, $s4, $s5;
	cmp_gt_ftz_b1_f32	$c0, $s3, 0F41051592;
	cmov_b32	$s3, $c0, 1065353216, $s4;
	xor_b32	$s4, $s2, $s1;
	add_u32	$s1, $s2, 3338665984;
	or_b32	$s2, $s3, $s4;
	cmp_gt_b1_u32	$c0, $s1, 1182793728;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_tanh];
	ret;
};


decl function &_gcc_half_tan(arg_f32 %ret)(arg_f32 %x);


function &_gcc_half_tan(arg_f32 %_gcc_half_tan)(arg_f32 %x)
{

@_gcc_half_tan_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s1, [%x];
	mov_b32	$s2, $s1;
	and_b32	$s0, $s2, 2147483647;
	mov_b32	$s5, $s0;
	nfma_f32	$s3, $s5, 0F3f22f983, 0F3f000000;
	trunc_ftz_f32	$s4, $s3;
	mul_ftz_f32	$s6, $s4, 0Fbfc90fda;
	fma_ftz_f32	$s6, $s4, 0F3fc90fda, $s6;
	mul_ftz_f32	$s8, $s4, 0F3fc90fda;
	sub_ftz_f32	$s7, $s5, $s8;
	sub_ftz_f32	$s5, $s5, $s7;
	sub_ftz_f32	$s5, $s5, $s8;
	sub_ftz_f32	$s5, $s5, $s6;
	add_ftz_f32	$s6, $s7, $s5;
	mul_ftz_f32	$s7, $s4, 0F33a22168;
	sub_ftz_f32	$s5, $s6, $s7;
	mul_ftz_f32	$s8, $s4, 0Fb3a22168;
	fma_ftz_f32	$s8, $s4, 0F33a22168, $s8;
	mul_ftz_f32	$s4, $s4, 0F27c234c4;
	cvt_ftz_s32_f32	$s3, $s3;
	and_b32	$s3, $s3, 1;
	sub_ftz_f32	$s6, $s6, $s5;
	sub_ftz_f32	$s6, $s6, $s7;
	sub_ftz_f32	$s6, $s6, $s8;
	add_ftz_f32	$s6, $s5, $s6;
	sub_ftz_f32	$s5, $s6, $s4;
	sub_ftz_f32	$s6, $s6, $s5;
	sub_ftz_f32	$s4, $s6, $s4;
	add_ftz_f32	$s4, $s5, $s4;
	mul_ftz_f32	$s6, $s4, $s4;
	mul_ftz_f32	$s5, $s4, $s6;
	nfma_f32	$s7, $s6, 0F3c971480, 0Fbf039337;
	nfma_f32	$s7, $s6, $s7, 0F3f93f425;
	nrcp_f32	$s7, $s7;
	nfma_f32	$s6, $s6, 0Fbc8cedd3, 0F3ec54587;
	mul_ftz_f32	$s6, $s6, $s7;
	nfma_f32	$s4, $s5, $s6, $s4;
	nrcp_f32	$s5, $s4;
	neg_f32	$s5, $s5;
	cvt_b1_u32	$c0, $s3;
	cmov_b32	$s3, $c0, $s5, $s4;
	neg_f32	$s4, $s3;
	cmp_ne_b1_s32	$c0, $s2, $s0;
	cmov_b32	$s2, $c0, $s4, $s3;
	cmp_eq_ftz_b1_f32	$c0, $s1, 0F00000000;
	cmov_b32	$s1, $c0, $s1, $s2;
	cmp_gt_b1_u32	$c0, $s0, 1199570944;
	cmov_b32	$s1, $c0, 0, $s1;
	cmp_gt_b1_u32	$c0, $s0, 2139095039;
	cmov_b32	$s0, $c0, 2143289344, $s1;
	st_arg_align(4)_f32	$s0, [%_gcc_half_tan];
	ret;
};


decl function &_gcc_fabs(arg_f32 %ret)(arg_f32 %x);


function &_gcc_fabs(arg_f32 %_gcc_fabs)(arg_f32 %x)
{

@_gcc_fabs_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	abs_f32	$s0, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_fabs];
	ret;
};


decl function &_gcc_sinpi(arg_f32 %ret)(arg_f32 %x);


function &_gcc_sinpi(arg_f32 %_gcc_sinpi)(arg_f32 %x)
{

@_gcc_sinpi_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s2, [%x];
	mov_b32	$s3, $s2;
	and_b32	$s1, $s3, 2147483648;
	xor_b32	$s0, $s1, $s3;
	mov_b32	$s4, $s0;
	cmp_le_ftz_b1_f32	$c0, $s4, 0F00000000;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	cvt_ftz_s32_f32	$s2, $s4;
	cvt_near_f32_s32	$s3, $s2;
	sub_ftz_f32	$s3, $s4, $s3;
	sub_ftz_f32	$s4, 0F3f800000, $s3;
	add_ftz_f32	$s5, $s3, 0Fbf000000;
	cmp_le_ftz_b1_f32	$c0, $s3, 0F3f400000;
	cmov_b32	$s4, $c0, $s5, $s4;
	sub_ftz_f32	$s5, 0F3f000000, $s3;
	cmp_lt_ftz_b1_f32	$c1, $s3, 0F3f000000;
	cmov_b32	$s4, $c1, $s5, $s4;
	cmp_le_ftz_b1_f32	$c1, $s3, 0F3e800000;
	cmov_b32	$s4, $c1, $s3, $s4;
	cmp_gtu_ftz_b1_f32	$c1, $s3, 0F3e800000;
	and_b1	$c0, $c0, $c1;
	cmp_lt_b1_s32	$c1, $s0, 2139095040;
	cmov_b32	$s3, $c1, $s1, 2143289344;
	mul_ftz_f32	$s5, $s4, 0F40490fdb;
	mul_ftz_f32	$s4, $s5, $s5;
	mul_ftz_f32	$s6, $s5, $s4;
	nfma_f32	$s7, $s4, 0F3636df25, 0Fb95009d4;
	nfma_f32	$s7, $s4, $s7, 0F3c088887;
	nfma_f32	$s7, $s4, $s7, 0Fbe2aaaab;
	nfma_f32	$s5, $s6, $s7, $s5;
	nfma_f32	$s6, $s4, 0Fb492923a, 0F37d00ae3;
	nfma_f32	$s6, $s4, $s6, 0Fbab60b60;
	nfma_f32	$s6, $s4, $s6, 0F3d2aaaab;
	nfma_f32	$s7, $s4, 0Fbf000000, 0F3f800000;
	mul_ftz_f32	$s4, $s4, $s4;
	nfma_f32	$s4, $s4, $s6, $s7;
	cmov_b32	$s4, $c0, $s4, $s5;
	shl_u32	$s2, $s2, 31;
	xor_b32	$s1, $s2, $s1;
	mov_b32	$s2, $s4;
	xor_b32	$s1, $s1, $s2;
	cmp_lt_b1_s32	$c0, $s0, 1258291200;
	cmov_b32	$s0, $c0, $s1, $s3;
	br	@BB0_7;

@BB0_2:
	and_b32	$s0, $s3, 8388607;
	or_b32	$s1, $s0, 1065353216;
	add_ftz_f32	$s1, $s1, 0Fbf800000;
	cvt_ftz_f64_f32	$d0, $s1;
	add_u64	$d0, $d0, 17879290520660869120;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d0, $c0, $d0, 0;
	neg_f64	$d1, $d0;
	cmp_lt_b1_s32	$c0, $s3, 0;
	cmov_b64	$d0, $c0, $d1, $d0;
	cvt_ftz_f64_f32	$d1, $s2;
	cmp_neu_ftz_b1_f32	$c0, $s2, 0F00000000;
	cmov_b64	$d1, $c0, $d1, $d0;
	mul_f64	$d0, $d1, 0Dc00921fb60000000;
	mul_f64	$d1, $d1, 0D400921fb60000000;
	cmp_lt_b1_f64	$c0, $d1, 0D0000000000000000;
	cmov_b64	$d0, $c0, $d0, $d1;
	mov_b64	$d2, $d1;
	cvt_u32_u64	$s1, $d2;
	shr_u32	$s0, $s1, 29;
	shr_u64	$d3, $d2, 29;
	cvt_u32_u64	$s2, $d3;
	and_b32	$s2, $s2, 8388600;
	or_b32	$s0, $s0, $s2;
	or_b32	$s0, $s0, 8388608;
	shl_u32	$s3, $s1, 3;
	shr_u64	$d3, $d2, 52;
	cvt_u32_u64	$s1, $d3;
	and_b32	$s1, $s1, 2047;
	sub_u32	$s4, 897, $s1;
	shr_u32	$s1, $s0, $s4;
	shr_u32	$s2, $s3, $s4;
	neg_s32	$s4, $s4;
	shl_u32	$s5, $s0, $s4;
	cvt_ftz_near_f32_f64	$s0, $d1;
	shr_u64	$d1, $d2, 32;
	or_b32	$s5, $s2, $s5;
	cvt_u32_u64	$s2, $d1;
	and_b32	$s2, $s2, 2147483648;
	cmp_gt_b1_u32	$c0, $s5, 2147483648;
	cbr_b1	$c0, @BB0_5;
	// BB#3:
	cmp_ne_b1_s32	$c0, $s5, -2147483648;
	cbr_b1	$c0, @BB0_6;
	// BB#4:
	shl_u32	$s3, $s3, $s4;
	and_b32	$s4, $s1, 1;
	or_b32	$s3, $s4, $s3;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cbr_b1	$c0, @BB0_6;

@BB0_5:
	add_u32	$s1, $s1, 1;

@BB0_6:
	// %double_to_float_uint.exit
	or_b32	$s1, $s1, $s2;
	cmp_ge_b1_f64	$c0, $d0, 0D3690000000000001;
	cmov_b32	$s1, $c0, $s1, 0;
	mov_b32	$s2, $s0;
	cmp_neu_ftz_b1_f32	$c0, $s0, 0F00000000;
	cmov_b32	$s0, $c0, $s2, $s1;

@BB0_7:
	st_arg_align(4)_f32	$s0, [%_gcc_sinpi];
	ret;
};


decl function &_gcc_rootn(arg_f32 %ret)(
	arg_f32 %x,
	arg_u32 %ny);


function &_gcc_rootn(arg_f32 %_gcc_rootn)(
	arg_f32 %x,
	arg_u32 %ny)
{

@_gcc_rootn_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	and_b32	$s1, $s0, 2147483647;
	or_b32	$s4, $s1, 1065353216;
	shr_u32	$s3, $s1, 23;
	add_u32	$s2, $s3, 4294967169;
	add_ftz_f32	$s4, $s4, 0Fbf800000;
	shr_s32	$s5, $s4, 23;
	add_u32	$s5, $s5, 4294967043;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cmov_b32	$s15, $c0, $s4, $s1;
	cmov_b32	$s14, $c0, $s5, $s2;
	cmp_ne_b1_s32	$c0, $s0, $s1;
	cvt_u32_b1	$s4, $c0;
	ld_arg_align(4)_u32	$s2, [%ny];
	cvt_near_f32_s32	$s12, $s2;
	nrcp_f32	$s11, $s12;
	mov_b32	$s13, $s11;
	and_b32	$s3, $s13, 2147483647;
	cmp_eq_b1_s32	$c2, $s13, $s3;
	cmp_ne_b1_s32	$c0, $s13, $s3;
	cmp_eq_b1_s32	$c1, $s1, 0;
	and_b1	$c4, $c0, $c1;
	and_b1	$c5, $c1, $c2;
	cvt_u32_b1	$s3, $c0;
	cmp_eq_b1_s32	$c1, $s0, 2139095040;
	and_b1	$c0, $c0, $c1;
	and_b1	$c1, $c1, $c2;
	cmp_eq_b1_s32	$c6, $s0, -8388608;
	and_b1	$c2, $c6, $c2;
	and_b32	$s8, $s2, 1;
	cvt_b1_u32	$c3, $s8;
	and_b1	$c2, $c2, $c3;
	and_b1	$c3, $c5, $c3;
	cvt_u32_b1	$s6, $c5;
	cmp_eq_b1_s32	$c5, $s0, $s1;
	cmov_b32	$s5, $c5, 0, 2147483648;
	cmov_b32	$s9, $c5, 2139095040, 4286578688;
	cvt_u32_b1	$s10, $c4;
	cvt_u32_b1	$s7, $c6;
	and_b32	$s16, $s15, 8323072;
	shl_u32	$s17, $s15, 1;
	and_b32	$s17, $s17, 65536;
	add_u32	$s17, $s17, $s16;
	or_b32	$s16, $s17, 1056964608;
	and_b32	$s15, $s15, 8388607;
	or_b32	$s19, $s15, 1056964608;
	mov_b32	$s15, $s1;
	sub_ftz_f32	$s15, 0F3f800000, $s15;
	mul_ftz_f32	$s18, $s15, $s15;
	mov_b32	$s20, $s16;
	mov_b32	$s21, $s19;
	mul_ftz_f32	$s16, $s15, $s18;
	nfma_f32	$s19, $s15, 0F3e124925, 0F3e2aaaab;
	nfma_f32	$s19, $s15, $s19, 0F3e4ccccd;
	nfma_f32	$s19, $s15, $s19, 0F3e800000;
	nfma_f32	$s19, $s15, $s19, 0F3eaaaaab;
	mul_ftz_f32	$s19, $s16, $s19;
	cvt_near_f32_s32	$s16, $s14;
	mul_ftz_f32	$s14, $s18, 0Fbf000000;
	sub_ftz_f32	$s18, $s20, $s21;
	shr_u32	$s17, $s17, 16;
	cvt_u64_u32	$d0, $s17;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s17, $s20), [&__math32_LOG_INV_TBL_EP][$d0];
	mul_ftz_f32	$s22, $s18, $s20;
	mul_ftz_f32	$s23, $s18, $s17;
	add_ftz_f32	$s17, $s23, $s22;
	nfma_f32	$s18, $s17, 0F3e800000, 0F3eaaaaab;
	nfma_f32	$s18, $s17, $s18, 0F3f000000;
	mul_ftz_f32	$s20, $s17, $s17;
	mul_ftz_f32	$s24, $s18, $s20;
	ld_v2_readonly_align(8)_f32	($s18, $s21), [&__math32_LOGE_TBL][$d0];
	nfma_f32	$s20, $s16, 0F3f317000, $s18;
	sub_ftz_f32	$s18, $s14, $s19;
	neg_f32	$s19, $s19;
	sub_ftz_f32	$s23, $s23, $s17;
	add_ftz_f32	$s23, $s22, $s23;
	sub_ftz_f32	$s22, $s18, $s15;
	add_ftz_f32	$s24, $s24, $s23;
	abs_f32	$s23, $s15;
	neg_f32	$s15, $s15;
	neg_f32	$s24, $s24;
	nfma_f32	$s24, $s16, 0F3805fdf4, $s24;
	neg_f32	$s16, $s17;
	cmp_lt_ftz_b1_f32	$c4, $s23, 0F3d800000;
	cmov_b32	$s16, $c4, $s14, $s16;
	cmov_b32	$s15, $c4, $s15, $s20;
	add_ftz_f32	$s21, $s24, $s21;
	sub_ftz_f32	$s17, $s21, $s17;
	add_ftz_f32	$s14, $s20, $s17;
	cmov_b32	$s14, $c4, $s22, $s14;
	cmov_b32	$s19, $c4, $s19, $s21;
	cmov_b32	$s17, $c4, $s18, $s17;
	and_b32	$s13, $s13, 4294963200;
	and_b32	$s12, $s12, 4294963200;
	mov_b32	$s18, $s12;
	neg_f32	$s12, $s18;
	nfma_f32	$s12, $s12, $s13, 0F3f800000;
	cvt_ftz_s32_f32	$s18, $s18;
	sub_u32	$s18, $s2, $s18;
	cvt_near_f32_s32	$s18, $s18;
	neg_f32	$s18, $s18;
	nfma_f32	$s12, $s18, $s13, $s12;
	mul_ftz_f32	$s11, $s11, $s12;
	sub_ftz_f32	$s12, $s17, $s16;
	sub_ftz_f32	$s12, $s19, $s12;
	sub_ftz_f32	$s15, $s15, $s14;
	add_ftz_f32	$s15, $s17, $s15;
	add_ftz_f32	$s15, $s12, $s15;
	mov_b32	$s12, $s14;
	and_b32	$s12, $s12, 4294963200;
	sub_ftz_f32	$s14, $s14, $s12;
	add_ftz_f32	$s14, $s15, $s14;
	mul_ftz_f32	$s15, $s11, $s14;
	nfma_f32	$s11, $s12, $s11, $s15;
	nfma_f32	$s14, $s14, $s13, $s11;
	nfma_f32	$s11, $s13, $s12, $s14;
	neg_f32	$s15, $s11;
	nfma_f32	$s12, $s13, $s12, $s15;
	add_ftz_f32	$s14, $s14, $s12;
	cmp_gt_ftz_b1_f32	$c4, $s14, 0Fb482e308;
	cmp_eq_ftz_b1_f32	$c5, $s11, 0F42b17218;
	and_b1	$c4, $c5, $c4;
	mul_ftz_f32	$s12, $s11, 0F42b8aa3b;
	cvt_ftz_s32_f32	$s15, $s12;
	shr_s32	$s13, $s15, 6;
	cmp_eq_b1_s32	$c5, $s13, -126;
	cmov_b32	$s12, $c5, 1, $s13;
	cmp_gt_ftz_b1_f32	$c5, $s11, 0F42b17218;
	or_b1	$c4, $c5, $c4;
	cvt_near_f32_s32	$s16, $s15;
	nfma_f32	$s17, $s16, 0Fbc310000, $s11;
	nfma_f32	$s16, $s16, 0Fb7e42fef, $s17;
	add_ftz_f32	$s14, $s14, $s16;
	nfma_f32	$s16, $s14, 0F3d2aaaab, 0F3e2aaaab;
	nfma_f32	$s16, $s16, $s14, 0F3f000000;
	mul_ftz_f32	$s17, $s14, $s14;
	nfma_f32	$s14, $s16, $s17, $s14;
	and_b32	$s15, $s15, 63;
	cvt_u64_u32	$d0, $s15;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s16, $s15), [&__math32_EXP_TBL_EP][$d0];
	nfma_f32	$s17, $s15, $s14, $s15;
	sub_u32	$s15, 4294967170, $s12;
	shl_u32	$s13, $s13, 23;
	nfma_f32	$s14, $s16, $s14, $s17;
	add_ftz_f32	$s14, $s16, $s14;
	add_u32	$s13, $s14, $s13;
	and_b32	$s14, $s14, 8388607;
	or_b32	$s14, $s14, 8388608;
	shr_u32	$s14, $s14, $s15;
	cmp_lt_b1_s32	$c5, $s12, -125;
	cmov_b32	$s12, $c5, $s14, $s13;
	cmov_b32	$s12, $c4, 2139095040, $s12;
	cmp_lt_ftz_b1_f32	$c4, $s11, 0Fc2ce8ed0;
	cmov_b32	$s11, $c4, 0, $s12;
	and_b32	$s12, $s4, $s2;
	mov_b32	$s13, $s11;
	xor_b32	$s13, $s13, 2147483648;
	cmp_ne_b1_s32	$c4, $s12, 0;
	cmov_b32	$s12, $c4, $s13, $s11;
	xor_b32	$s11, $s8, 1;
	and_b32	$s4, $s4, $s11;
	cmp_ne_b1_s32	$c4, $s4, 0;
	cmov_b32	$s4, $c4, 2143289344, $s12;
	and_b32	$s8, $s10, $s8;
	cmp_ne_b1_s32	$c4, $s8, 0;
	cmov_b32	$s4, $c4, $s9, $s4;
	and_b32	$s8, $s10, $s11;
	cmp_ne_b1_s32	$c4, $s8, 0;
	cmov_b32	$s4, $c4, 2139095040, $s4;
	and_b32	$s6, $s6, $s11;
	cmp_ne_b1_s32	$c4, $s6, 0;
	cmov_b32	$s4, $c4, 0, $s4;
	cmov_b32	$s4, $c3, $s5, $s4;
	cmov_b32	$s4, $c2, 4286578688, $s4;
	and_b32	$s5, $s7, $s2;
	and_b32	$s3, $s5, $s3;
	cmp_ne_b1_s32	$c2, $s3, 0;
	cmov_b32	$s3, $c2, 2147483648, $s4;
	cmov_b32	$s3, $c0, 0, $s3;
	cmov_b32	$s3, $c1, 2139095040, $s3;
	cmp_gt_b1_u32	$c0, $s1, 2139095040;
	cmov_b32	$s0, $c0, $s0, $s3;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmov_b32	$s0, $c0, 2143289344, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_rootn];
	ret;
};


decl function &_gcc_tanpi(arg_f32 %ret)(arg_f32 %x);


function &_gcc_tanpi(arg_f32 %_gcc_tanpi)(arg_f32 %x)
{

@_gcc_tanpi_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s1, [%x];
	mov_b32	$s3, $s1;
	and_b32	$s2, $s3, 2147483648;
	xor_b32	$s0, $s2, $s3;
	mov_b32	$s4, $s0;
	cmp_le_ftz_b1_f32	$c0, $s4, 0F00000000;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	cvt_ftz_s32_f32	$s3, $s4;
	cvt_near_f32_s32	$s1, $s3;
	sub_ftz_f32	$s1, $s4, $s1;
	sub_ftz_f32	$s4, 0F3f800000, $s1;
	add_ftz_f32	$s5, $s1, 0Fbf000000;
	cmp_le_ftz_b1_f32	$c0, $s1, 0F3f400000;
	cmov_b32	$s4, $c0, $s5, $s4;
	xor_b32	$s6, $s2, 2147483648;
	cmov_b32	$s7, $c0, $s2, $s6;
	sub_ftz_f32	$s5, 0F3f000000, $s1;
	cmp_lt_ftz_b1_f32	$c1, $s1, 0F3f000000;
	cmov_b32	$s5, $c1, $s5, $s4;
	cmov_b32	$s6, $c1, $s6, $s7;
	cmp_lt_b1_s32	$c1, $s0, 2139095040;
	cmov_b32	$s7, $c1, $s2, 2143289344;
	shl_u32	$s3, $s3, 31;
	xor_b32	$s4, $s3, $s2;
	cmp_lt_b1_s32	$c1, $s0, 1266679808;
	cmov_b32	$s3, $c1, $s4, $s7;
	cmp_le_ftz_b1_f32	$c1, $s1, 0F3e800000;
	cmov_b32	$s5, $c1, $s1, $s5;
	cmov_b32	$s2, $c1, $s2, $s6;
	cmp_gtu_ftz_b1_f32	$c1, $s1, 0F3e800000;
	and_b1	$c0, $c0, $c1;
	mul_ftz_f32	$s5, $s5, 0F40490fdb;
	mul_ftz_f32	$s7, $s5, $s5;
	mul_ftz_f32	$s6, $s5, $s7;
	nfma_f32	$s8, $s7, 0F3c971480, 0Fbf039337;
	nfma_f32	$s8, $s7, $s8, 0F3f93f425;
	nrcp_f32	$s8, $s8;
	nfma_f32	$s7, $s7, 0Fbc8cedd3, 0F3ec54587;
	mul_ftz_f32	$s7, $s7, $s8;
	nfma_f32	$s5, $s6, $s7, $s5;
	nrcp_f32	$s6, $s5;
	neg_f32	$s6, $s6;
	cmov_b32	$s5, $c0, $s6, $s5;
	or_b32	$s4, $s4, 2139095040;
	xor_b32	$s2, $s5, $s2;
	cmp_eq_ftz_b1_f32	$c0, $s1, 0F3f000000;
	cmov_b32	$s1, $c0, $s4, $s2;
	cmp_lt_b1_s32	$c0, $s0, 1258291200;
	cmov_b32	$s0, $c0, $s1, $s3;
	br	@BB0_7;

@BB0_2:
	and_b32	$s0, $s3, 8388607;
	or_b32	$s2, $s0, 1065353216;
	add_ftz_f32	$s2, $s2, 0Fbf800000;
	cvt_ftz_f64_f32	$d0, $s2;
	add_u64	$d0, $d0, 17879290520660869120;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d0, $c0, $d0, 0;
	neg_f64	$d1, $d0;
	cmp_lt_b1_s32	$c0, $s3, 0;
	cmov_b64	$d0, $c0, $d1, $d0;
	cvt_ftz_f64_f32	$d1, $s1;
	cmp_neu_ftz_b1_f32	$c0, $s1, 0F00000000;
	cmov_b64	$d1, $c0, $d1, $d0;
	mul_f64	$d0, $d1, 0Dc00921fb60000000;
	mul_f64	$d1, $d1, 0D400921fb60000000;
	cmp_lt_b1_f64	$c0, $d1, 0D0000000000000000;
	cmov_b64	$d0, $c0, $d0, $d1;
	mov_b64	$d2, $d1;
	cvt_u32_u64	$s1, $d2;
	shr_u32	$s0, $s1, 29;
	shr_u64	$d3, $d2, 29;
	cvt_u32_u64	$s2, $d3;
	and_b32	$s2, $s2, 8388600;
	or_b32	$s0, $s0, $s2;
	or_b32	$s0, $s0, 8388608;
	shl_u32	$s3, $s1, 3;
	shr_u64	$d3, $d2, 52;
	cvt_u32_u64	$s1, $d3;
	and_b32	$s1, $s1, 2047;
	sub_u32	$s4, 897, $s1;
	shr_u32	$s1, $s0, $s4;
	shr_u32	$s2, $s3, $s4;
	neg_s32	$s4, $s4;
	shl_u32	$s5, $s0, $s4;
	cvt_ftz_near_f32_f64	$s0, $d1;
	shr_u64	$d1, $d2, 32;
	or_b32	$s5, $s2, $s5;
	cvt_u32_u64	$s2, $d1;
	and_b32	$s2, $s2, 2147483648;
	cmp_gt_b1_u32	$c0, $s5, 2147483648;
	cbr_b1	$c0, @BB0_5;
	// BB#3:
	cmp_ne_b1_s32	$c0, $s5, -2147483648;
	cbr_b1	$c0, @BB0_6;
	// BB#4:
	shl_u32	$s3, $s3, $s4;
	and_b32	$s4, $s1, 1;
	or_b32	$s3, $s4, $s3;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cbr_b1	$c0, @BB0_6;

@BB0_5:
	add_u32	$s1, $s1, 1;

@BB0_6:
	// %double_to_float_uint.exit
	or_b32	$s1, $s1, $s2;
	cmp_ge_b1_f64	$c0, $d0, 0D3690000000000001;
	cmov_b32	$s1, $c0, $s1, 0;
	mov_b32	$s2, $s0;
	cmp_neu_ftz_b1_f32	$c0, $s0, 0F00000000;
	cmov_b32	$s0, $c0, $s2, $s1;

@BB0_7:
	st_arg_align(4)_f32	$s0, [%_gcc_tanpi];
	ret;
};


decl function &_gcc_half_powr(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y);


function &_gcc_half_powr(arg_f32 %_gcc_half_powr)(
	arg_f32 %x,
	arg_f32 %y)
{
	align(4) spill_u8 %__spillStack[40];

@_gcc_half_powr_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s4, [%y];
	mov_b32	$s0, $s4;
	and_b32	$s1, $s0, 2147483647;
	shr_u32	$s2, $s1, 23;
	sub_u32	$s3, 150, $s2;
	shl_u32	$s3, 1, $s3;
	add_u32	$s5, $s3, 4294967295;
	and_b32	$s5, $s5, $s0;
	and_b32	$s3, $s3, $s0;
	cmp_ne_b1_s32	$c0, $s3, 0;
	cmp_eq_b1_s32	$c1, $s5, 0;
	and_b1	$c0, $c0, $c1;
	add_u32	$s5, $s2, 4294967170;
	cmp_gt_b1_s32	$c1, $s5, 0;
	and_b1	$c5, $c0, $c1;
	ld_arg_align(4)_f32	$s2, [%x];
	and_b32	$s3, $s2, 2147483647;
	cmp_eq_b1_s32	$c1, $s1, 2139095040;
	cmp_eq_b1_s32	$c0, $s3, 1065353216;
	and_b1	$c1, $c0, $c1;
	cvt_u32_b1	$s6, $c1;
	st_spill_align(4)_u32	$s6, [%__spillStack][12];
	cmp_lt_b1_u32	$c1, $s1, 2139095040;
	and_b1	$c0, $c0, $c1;
	cvt_u32_b1	$s6, $c0;
	st_spill_align(4)_u32	$s6, [%__spillStack][16];
	cmp_ne_b1_s32	$c0, $s0, $s1;
	cmp_eq_b1_s32	$c1, $s0, $s1;
	cmp_eq_b1_s32	$c2, $s3, 0;
	and_b1	$c3, $c2, $c1;
	cvt_u32_b1	$s6, $c3;
	st_spill_align(4)_u32	$s6, [%__spillStack];
	and_b1	$c2, $c0, $c2;
	cvt_u32_b1	$s6, $c2;
	st_spill_align(4)_u32	$s6, [%__spillStack][8];
	cmp_lt_b1_s32	$c2, $s2, 2139095040;
	cmp_eq_b1_s32	$c3, $s1, 0;
	and_b1	$c2, $c2, $c3;
	cvt_u32_b1	$s6, $c2;
	st_spill_align(4)_u32	$s6, [%__spillStack][24];
	cmp_eq_b1_s32	$c2, $s3, 2139095040;
	and_b1	$c3, $c2, $c3;
	cvt_u32_b1	$s6, $c3;
	st_spill_align(4)_u32	$s6, [%__spillStack][20];
	and_b1	$c1, $c2, $c1;
	cvt_u32_b1	$s6, $c1;
	st_spill_align(4)_u32	$s6, [%__spillStack][28];
	and_b1	$c0, $c0, $c2;
	cvt_u32_b1	$s6, $c0;
	st_spill_align(4)_u32	$s6, [%__spillStack][32];
	cmp_eq_b1_s32	$c0, $s0, 2139095040;
	and_b1	$c1, $c2, $c0;
	cvt_u32_b1	$s6, $c1;
	st_spill_align(4)_u32	$s6, [%__spillStack][36];
	cmp_gt_b1_u32	$c2, $s3, 1065353216;
	cmp_eq_b1_s32	$c1, $s0, -8388608;
	cmp_lt_b1_u32	$c4, $s3, 1065353216;
	and_b1	$c3, $c4, $c1;
	and_b1	$c1, $c2, $c1;
	and_b1	$c2, $c2, $c0;
	and_b1	$c4, $c4, $c0;
	cmp_lt_b1_s32	$c0, $s5, 25;
	and_b1	$c0, $c5, $c0;
	or_b32	$s5, $s3, 1065353216;
	add_ftz_f32	$s5, $s5, 0Fbf800000;
	shr_u32	$s7, $s3, 23;
	cmp_eq_b1_s32	$c5, $s7, 0;
	cmov_b32	$s6, $c5, $s5, $s3;
	add_u32	$s7, $s7, 4294967169;
	shr_s32	$s5, $s5, 23;
	add_u32	$s5, $s5, 4294967043;
	cmov_b32	$s8, $c5, $s5, $s7;
	cmp_ne_b1_s32	$c6, $s2, $s3;
	cmp_ne_b1_s32	$c5, $s3, 0;
	and_b1	$c5, $c5, $c6;
	and_b1	$c6, $c0, $c6;
	and_b32	$s5, $s6, 8323072;
	shl_u32	$s7, $s6, 1;
	and_b32	$s7, $s7, 65536;
	mov_b32	$s9, $s3;
	add_u32	$s5, $s7, $s5;
	sub_ftz_f32	$s14, 0F3f800000, $s9;
	mul_ftz_f32	$s7, $s14, $s14;
	shr_u32	$s9, $s5, 16;
	mul_ftz_f32	$s10, $s14, $s7;
	nfma_f32	$s11, $s14, 0F3e124925, 0F3e2aaaab;
	nfma_f32	$s11, $s14, $s11, 0F3e4ccccd;
	nfma_f32	$s11, $s14, $s11, 0F3e800000;
	nfma_f32	$s11, $s14, $s11, 0F3eaaaaab;
	mul_ftz_f32	$s12, $s10, $s11;
	mul_ftz_f32	$s7, $s7, 0Fbf000000;
	or_b32	$s15, $s5, 1056964608;
	sub_ftz_f32	$s5, $s7, $s12;
	cvt_near_f32_s32	$s13, $s8;
	abs_f32	$s11, $s14;
	cvt_u64_u32	$d0, $s9;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s8, $s10), [&__math32_LOGE_TBL][$d0];
	nfma_f32	$s9, $s13, 0F3f317000, $s8;
	neg_f32	$s8, $s12;
	sub_ftz_f32	$s12, $s5, $s14;
	neg_f32	$s14, $s14;
	and_b32	$s6, $s6, 8388607;
	or_b32	$s6, $s6, 1056964608;
	sub_ftz_f32	$s6, $s15, $s6;
	ld_v2_readonly_align(8)_f32	($s16, $s15), [&__math32_LOG_INV_TBL_EP][$d0];
	mul_ftz_f32	$s15, $s6, $s15;
	mul_ftz_f32	$s16, $s6, $s16;
	add_ftz_f32	$s6, $s16, $s15;
	nfma_f32	$s17, $s6, 0F3e800000, 0F3eaaaaab;
	nfma_f32	$s17, $s6, $s17, 0F3f000000;
	mul_ftz_f32	$s18, $s6, $s6;
	mul_ftz_f32	$s17, $s17, $s18;
	sub_ftz_f32	$s16, $s16, $s6;
	add_ftz_f32	$s15, $s15, $s16;
	add_ftz_f32	$s15, $s17, $s15;
	neg_f32	$s15, $s15;
	nfma_f32	$s13, $s13, 0F3805fdf4, $s15;
	neg_f32	$s15, $s6;
	cmp_lt_ftz_b1_f32	$c0, $s11, 0F3d800000;
	cmov_b32	$s11, $c0, $s7, $s15;
	cmov_b32	$s7, $c0, $s14, $s9;
	add_ftz_f32	$s10, $s13, $s10;
	sub_ftz_f32	$s13, $s10, $s6;
	add_ftz_f32	$s6, $s9, $s13;
	cmov_b32	$s6, $c0, $s12, $s6;
	cmov_b32	$s9, $c0, $s8, $s10;
	cmov_b32	$s8, $c0, $s5, $s13;
	and_b32	$s5, $s0, 4294963200;
	sub_ftz_f32	$s4, $s4, $s5;
	sub_ftz_f32	$s10, $s8, $s11;
	sub_ftz_f32	$s9, $s9, $s10;
	sub_ftz_f32	$s7, $s7, $s6;
	add_ftz_f32	$s7, $s8, $s7;
	add_ftz_f32	$s8, $s9, $s7;
	mov_b32	$s7, $s6;
	and_b32	$s7, $s7, 4294963200;
	sub_ftz_f32	$s6, $s6, $s7;
	add_ftz_f32	$s6, $s8, $s6;
	mul_ftz_f32	$s8, $s4, $s6;
	nfma_f32	$s4, $s7, $s4, $s8;
	nfma_f32	$s6, $s6, $s5, $s4;
	nfma_f32	$s4, $s5, $s7, $s6;
	neg_f32	$s8, $s4;
	nfma_f32	$s5, $s5, $s7, $s8;
	add_ftz_f32	$s5, $s6, $s5;
	cmp_gt_ftz_b1_f32	$c0, $s5, 0Fb482e308;
	cmp_eq_ftz_b1_f32	$c7, $s4, 0F42b17218;
	and_b1	$c0, $c7, $c0;
	cmp_gt_ftz_b1_f32	$c7, $s4, 0F42b17218;
	or_b1	$c0, $c7, $c0;
	mul_ftz_f32	$s6, $s4, 0F42b8aa3b;
	cvt_ftz_s32_f32	$s6, $s6;
	cvt_near_f32_s32	$s7, $s6;
	nfma_f32	$s8, $s7, 0Fbc310000, $s4;
	nfma_f32	$s7, $s7, 0Fb7e42fef, $s8;
	add_ftz_f32	$s5, $s5, $s7;
	nfma_f32	$s7, $s5, 0F3d2aaaab, 0F3e2aaaab;
	nfma_f32	$s7, $s7, $s5, 0F3f000000;
	mul_ftz_f32	$s8, $s5, $s5;
	nfma_f32	$s7, $s7, $s8, $s5;
	shr_s32	$s5, $s6, 6;
	and_b32	$s6, $s6, 63;
	cvt_u64_u32	$d0, $s6;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s8, $s6), [&__math32_EXP_TBL_EP][$d0];
	nfma_f32	$s9, $s6, $s7, $s6;
	shl_u32	$s6, $s5, 23;
	add_u32	$s10, $s5, 21;
	nfma_f32	$s7, $s8, $s7, $s9;
	shl_u32	$s9, 1, $s10;
	add_ftz_f32	$s8, $s8, $s7;
	mov_b32	$s7, $s9;
	mul_ftz_f32	$s7, $s7, $s8;
	add_u32	$s6, $s8, $s6;
	cmp_lt_b1_s32	$c7, $s5, -125;
	cmov_b32	$s5, $c7, $s7, $s6;
	cmov_b32	$s5, $c0, 2139095040, $s5;
	cmp_lt_ftz_b1_f32	$c0, $s4, 0Fc2ce8ed0;
	cmov_b32	$s4, $c0, 0, $s5;
	mov_b32	$s5, $s4;
	xor_b32	$s5, $s5, 2147483648;
	cmov_b32	$s4, $c6, $s5, $s4;
	cmov_b32	$s4, $c3, 2139095040, $s4;
	cmov_b32	$s4, $c4, 0, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][16];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 1065353216, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][12];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 2143289344, $s4;
	cmov_b32	$s4, $c1, 0, $s4;
	cmov_b32	$s4, $c2, 2139095040, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][24];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 1065353216, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][32];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 0, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][28];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 2139095040, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][36];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 2139095040, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][20];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 2143289344, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack][8];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 2139095040, $s4;
	ld_spill_align(4)_u32	$s5, [%__spillStack];
	cvt_b1_u32	$c0, $s5;
	cmov_b32	$s4, $c0, 0, $s4;
	or_b32	$s5, $s0, $s2;
	and_b32	$s5, $s5, 2147483647;
	cmp_eq_b1_s32	$c0, $s5, 0;
	cmov_b32	$s4, $c0, 2143289344, $s4;
	cmov_b32	$s4, $c5, 2143289344, $s4;
	cmp_gt_b1_u32	$c0, $s3, 2139095040;
	cmov_b32	$s2, $c0, $s2, $s4;
	cmp_gt_b1_u32	$c0, $s1, 2139095040;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_half_powr];
	ret;
};


decl function &_gcc_tan(arg_f32 %ret)(arg_f32 %x);


function &_gcc_tan(arg_f32 %_gcc_tan)(arg_f32 %x)
{

@_gcc_tan_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s2, $s0;
	and_b32	$s1, $s2, 2147483647;
	mov_b32	$s4, $s1;
	cmp_geu_ftz_b1_f32	$c0, $s4, 0F4b000000;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	nfma_f32	$s3, $s4, 0F3f22f983, 0F3f000000;
	trunc_ftz_f32	$s5, $s3;
	mul_ftz_f32	$s6, $s5, 0Fbfc90fda;
	fma_ftz_f32	$s6, $s5, 0F3fc90fda, $s6;
	mul_ftz_f32	$s8, $s5, 0F3fc90fda;
	sub_ftz_f32	$s7, $s4, $s8;
	sub_ftz_f32	$s4, $s4, $s7;
	sub_ftz_f32	$s4, $s4, $s8;
	sub_ftz_f32	$s4, $s4, $s6;
	add_ftz_f32	$s6, $s7, $s4;
	mul_ftz_f32	$s4, $s5, 0Fa7c234c4;
	mul_ftz_f32	$s8, $s5, 0F33a22168;
	sub_ftz_f32	$s7, $s6, $s8;
	fma_ftz_f32	$s4, $s5, 0F27c234c4, $s4;
	mul_ftz_f32	$s9, $s5, 0Fb3a22168;
	neg_f32	$s4, $s4;
	fma_ftz_f32	$s9, $s5, 0F33a22168, $s9;
	cvt_ftz_s32_f32	$s3, $s3;
	mul_ftz_f32	$s5, $s5, 0F27c234c4;
	sub_ftz_f32	$s6, $s6, $s7;
	sub_ftz_f32	$s6, $s6, $s8;
	sub_ftz_f32	$s6, $s6, $s9;
	add_ftz_f32	$s7, $s7, $s6;
	sub_ftz_f32	$s6, $s7, $s5;
	sub_ftz_f32	$s7, $s7, $s6;
	sub_ftz_f32	$s5, $s7, $s5;
	add_ftz_f32	$s5, $s6, $s5;
	br	@BB0_3;

@BB0_2:
	and_b32	$s3, $s2, 8388607;
	or_b32	$s5, $s3, 8388608;
	mulhi_u32	$s4, $s5, 4266746795;
	mad_u32	$s3, $s5, 1011060801, $s4;
	cmp_lt_b1_u32	$c0, $s3, $s4;
	cvt_u32_b1	$s4, $c0;
	mulhi_u32	$s6, $s5, 1011060801;
	add_u32	$s6, $s4, $s6;
	mad_u32	$s4, $s5, 3680671129, $s6;
	cmp_lt_b1_u32	$c0, $s4, $s6;
	cvt_u32_b1	$s6, $c0;
	mulhi_u32	$s7, $s5, 3680671129;
	add_u32	$s7, $s6, $s7;
	mad_u32	$s6, $s5, 4113882560, $s7;
	cmp_lt_b1_u32	$c0, $s6, $s7;
	cvt_u32_b1	$s7, $c0;
	mulhi_u32	$s8, $s5, 4113882560;
	add_u32	$s8, $s7, $s8;
	mad_u32	$s7, $s5, 4230436817, $s8;
	cmp_lt_b1_u32	$c0, $s7, $s8;
	cvt_u32_b1	$s8, $c0;
	mulhi_u32	$s9, $s5, 4230436817;
	add_u32	$s9, $s8, $s9;
	mad_u32	$s8, $s5, 1313084713, $s9;
	cmp_lt_b1_u32	$c0, $s8, $s9;
	cvt_u32_b1	$s9, $c0;
	mulhi_u32	$s10, $s5, 1313084713;
	add_u32	$s10, $s9, $s10;
	mad_u32	$s9, $s5, 2734261102, $s10;
	cmp_lt_b1_u32	$c0, $s9, $s10;
	cvt_u32_b1	$s12, $c0;
	mulhi_u32	$s13, $s5, 2734261102;
	mul_u32	$s11, $s5, 4266746795;
	shr_u32	$s5, $s1, 23;
	add_u32	$s10, $s5, 4294967176;
	cmp_gt_b1_u32	$c0, $s10, 31;
	cmov_b32	$s5, $c0, $s3, $s4;
	cmov_b32	$s11, $c0, $s11, $s3;
	cvt_u32_b1	$s14, $c0;
	cmov_b32	$s3, $c0, $s7, $s8;
	cmov_b32	$s7, $c0, $s6, $s7;
	cmov_b32	$s4, $c0, $s4, $s6;
	add_u32	$s6, $s12, $s13;
	cmov_b32	$s6, $c0, $s9, $s6;
	cmov_b32	$s9, $c0, $s8, $s9;
	neg_s32	$s8, $s14;
	and_b32	$s8, $s8, 32;
	sub_u32	$s10, $s10, $s8;
	cmp_gt_b1_u32	$c0, $s10, 31;
	cmov_b32	$s8, $c0, $s5, $s4;
	cmov_b32	$s11, $c0, $s11, $s5;
	cvt_u32_b1	$s12, $c0;
	cmov_b32	$s5, $c0, $s3, $s9;
	cmov_b32	$s3, $c0, $s7, $s3;
	cmov_b32	$s4, $c0, $s4, $s7;
	cmov_b32	$s9, $c0, $s9, $s6;
	neg_s32	$s6, $s12;
	and_b32	$s6, $s6, 32;
	sub_u32	$s6, $s10, $s6;
	cmp_gt_b1_u32	$c0, $s6, 31;
	cmov_b32	$s7, $c0, $s8, $s4;
	cmov_b32	$s8, $c0, $s11, $s8;
	cvt_u32_b1	$s12, $c0;
	cmov_b32	$s9, $c0, $s5, $s9;
	cmov_b32	$s10, $c0, $s3, $s5;
	cmov_b32	$s11, $c0, $s4, $s3;
	neg_s32	$s3, $s12;
	and_b32	$s3, $s3, 32;
	sub_u32	$s6, $s6, $s3;
	cmp_gt_b1_u32	$c0, $s6, 31;
	cmov_b32	$s3, $c0, $s7, $s11;
	cmov_b32	$s5, $c0, $s8, $s7;
	cvt_u32_b1	$s7, $c0;
	cmov_b32	$s4, $c0, $s10, $s9;
	cmov_b32	$s8, $c0, $s11, $s10;
	neg_s32	$s7, $s7;
	and_b32	$s7, $s7, 32;
	sub_u32	$s9, $s7, $s6;
	shr_u32	$s10, $s5, $s9;
	shr_u32	$s12, $s3, $s9;
	neg_s32	$s11, $s9;
	shl_u32	$s13, $s8, $s11;
	or_b32	$s12, $s13, $s12;
	shl_u32	$s13, $s3, $s11;
	cmp_ne_b1_s32	$c0, $s6, $s7;
	cmov_b32	$s7, $c0, $s12, $s8;
	or_b32	$s6, $s13, $s10;
	shl_u32	$s10, $s4, $s11;
	shr_u32	$s8, $s8, $s9;
	or_b32	$s8, $s10, $s8;
	cmov_b32	$s9, $c0, $s6, $s3;
	cmov_b32	$s3, $c0, $s8, $s4;
	shl_u32	$s4, $s3, 2;
	shr_u32	$s6, $s7, 30;
	or_b32	$s6, $s4, $s6;
	shr_u32	$s4, $s3, 29;
	shl_u32	$s4, $s4, 31;
	shr_s32	$s10, $s4, 31;
	xor_b32	$s8, $s10, $s6;
	firstbit_u32_u32	$s11, $s8;
	cmp_eq_b1_s32	$c0, $s6, $s10;
	cmov_b32	$s6, $c0, 32, $s11;
	shr_u32	$s5, $s5, 30;
	shr_u32	$s11, $s9, 30;
	shl_u32	$s7, $s7, 2;
	or_b32	$s7, $s7, $s11;
	shl_u32	$s9, $s9, 2;
	or_b32	$s9, $s9, $s5;
	sub_u32	$s5, 31, $s6;
	xor_b32	$s9, $s10, $s9;
	shr_u32	$s11, $s9, $s5;
	neg_s32	$s9, $s5;
	xor_b32	$s12, $s10, $s7;
	shl_u32	$s7, $s12, $s9;
	or_b32	$s7, $s7, $s11;
	shr_u32	$s10, $s7, 9;
	shr_u32	$s5, $s12, $s5;
	shl_u32	$s8, $s8, $s9;
	or_b32	$s5, $s8, $s5;
	shl_u32	$s8, $s5, 23;
	or_b32	$s8, $s8, $s10;
	firstbit_u32_u32	$s9, $s8;
	cmp_eq_b1_s32	$c0, $s8, 0;
	cmov_b32	$s9, $c0, 32, $s9;
	sub_u32	$s10, 126, $s6;
	shr_u32	$s11, $s3, 30;
	bitextract_u32	$s3, $s3, 29, 1;
	shl_u32	$s10, $s10, 23;
	add_u32	$s3, $s3, $s11;
	or_b32	$s10, $s10, $s4;
	sub_u32	$s6, 102, $s6;
	sub_u32	$s11, 31, $s9;
	shr_u32	$s7, $s7, $s11;
	neg_s32	$s11, $s11;
	shl_u32	$s8, $s8, $s11;
	or_b32	$s7, $s8, $s7;
	shr_u32	$s7, $s7, 9;
	sub_u32	$s6, $s6, $s9;
	shl_u32	$s6, $s6, 23;
	or_b32	$s4, $s6, $s4;
	shr_u32	$s5, $s5, 9;
	or_b32	$s5, $s10, $s5;
	or_b32	$s6, $s4, $s7;
	mul_ftz_f32	$s4, $s5, 0F3fc90fda;
	mul_ftz_f32	$s7, $s5, 0Fbfc90fda;
	fma_ftz_f32	$s7, $s5, 0F3fc90fda, $s7;
	fma_ftz_f32	$s5, $s5, 0F33a22168, $s7;
	fma_ftz_f32	$s6, $s6, 0F3fc90fda, $s5;
	add_ftz_f32	$s5, $s6, $s4;
	sub_ftz_f32	$s4, $s5, $s4;
	sub_ftz_f32	$s4, $s6, $s4;

@BB0_3:
	// %argReductionS.exit
	add_ftz_f32	$s4, $s5, $s4;
	mul_ftz_f32	$s6, $s4, $s4;
	mul_ftz_f32	$s5, $s4, $s6;
	nfma_f32	$s7, $s6, 0F3c971480, 0Fbf039337;
	nfma_f32	$s7, $s6, $s7, 0F3f93f425;
	nrcp_f32	$s7, $s7;
	nfma_f32	$s6, $s6, 0Fbc8cedd3, 0F3ec54587;
	mul_ftz_f32	$s6, $s6, $s7;
	nfma_f32	$s4, $s5, $s6, $s4;
	and_b32	$s3, $s3, 1;
	nrcp_f32	$s5, $s4;
	neg_f32	$s5, $s5;
	cvt_b1_u32	$c0, $s3;
	cmov_b32	$s3, $c0, $s5, $s4;
	xor_b32	$s2, $s1, $s2;
	xor_b32	$s2, $s2, $s3;
	cmp_gt_b1_u32	$c0, $s1, 2139095039;
	cmov_b32	$s1, $c0, 2143289344, $s2;
	cmp_eq_ftz_b1_f32	$c0, $s0, 0F00000000;
	cmov_b32	$s0, $c0, $s0, $s1;
	st_arg_align(4)_f32	$s0, [%_gcc_tan];
	ret;
};


decl function &_gcc_maxmag(arg_f32 %ret)(
	arg_f32 %x,
	arg_f32 %y);


function &_gcc_maxmag(arg_f32 %_gcc_maxmag)(
	arg_f32 %x,
	arg_f32 %y)
{

@_gcc_maxmag_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	and_b32	$s2, $s0, 2147483647;
	cmp_gt_b1_u32	$c0, $s2, 2139095040;
	cvt_u32_b1	$s3, $c0;
	ld_arg_align(4)_f32	$s1, [%y];
	and_b32	$s4, $s1, 2147483647;
	cmp_gt_b1_u32	$c0, $s4, 2139095040;
	cvt_u32_b1	$s5, $c0;
	neg_s32	$s5, $s5;
	or_b32	$s5, $s4, $s5;
	neg_s32	$s3, $s3;
	or_b32	$s3, $s2, $s3;
	cmp_gt_b1_s32	$c0, $s3, $s5;
	cvt_u32_b1	$s2, $c0;
	cmp_gt_b1_s32	$c0, $s5, $s3;
	cvt_u32_b1	$s4, $c0;
	cmp_eq_b1_s32	$c0, $s3, $s5;
	cvt_u32_b1	$s5, $c0;
	and_b32	$s6, $s1, $s0;
	and_b32	$s3, $s3, 4194304;
	or_b32	$s3, $s3, $s6;
	neg_s32	$s5, $s5;
	and_b32	$s3, $s3, $s5;
	neg_s32	$s4, $s4;
	and_b32	$s1, $s1, $s4;
	neg_s32	$s2, $s2;
	and_b32	$s0, $s0, $s2;
	or_b32	$s0, $s0, $s1;
	or_b32	$s0, $s0, $s3;
	st_arg_align(4)_f32	$s0, [%_gcc_maxmag];
	ret;
};


decl function &_gcc_exp2(arg_f32 %ret)(arg_f32 %x);


function &_gcc_exp2(arg_f32 %_gcc_exp2)(arg_f32 %x)
{

@_gcc_exp2_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	class_b1_f32	$c0, $s0, 3;
	cvt_u32_b1	$s1, $c0;
	and_b32	$s1, $s1, 1;
	rint_ftz_f32	$s2, $s0;
	sub_ftz_f32	$s3, $s0, $s2;
	mul_ftz_f32	$s4, $s3, 0F3717f7d1;
	mul_ftz_f32	$s2, $s3, 0F3f317180;
	add_ftz_f32	$s4, $s2, $s4;
	mul_ftz_f32	$s5, $s4, $s4;
	nfma_f32	$s6, $s5, 0F3331bb4c, 0Fb5ddea0e;
	nfma_f32	$s6, $s5, $s6, 0F388ab355;
	cvt_ftz_neari_s32_f32	$s7, $s0;
	nfma_f32	$s8, $s5, $s6, 0Fbb360b61;
	mul_ftz_f32	$s6, $s3, 0Fb717f7d1;
	shl_u32	$s3, $s7, 23;
	nfma_f32	$s7, $s5, $s8, 0F3e2aaaab;
	neg_f32	$s7, $s7;
	nfma_f32	$s5, $s5, $s7, $s4;
	mul_ftz_f32	$s4, $s4, $s5;
	sub_ftz_f32	$s5, 0F40000000, $s5;
	nrcp_f32	$s5, $s5;
	mul_ftz_f32	$s4, $s5, $s4;
	sub_ftz_f32	$s4, $s6, $s4;
	sub_ftz_f32	$s2, $s4, $s2;
	sub_ftz_f32	$s2, 0F3f800000, $s2;
	add_u32	$s2, $s2, $s3;
	cmp_lt_ftz_b1_f32	$c0, $s0, 0Fc2fc0000;
	cmov_b32	$s2, $c0, 0, $s2;
	cmp_lt_ftz_b1_f32	$c0, $s0, 0F43000000;
	cmov_b32	$s2, $c0, $s2, 2139095040;
	cvt_b1_u32	$c0, $s1;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_exp2];
	ret;
};

//readonly_f32 &__math32_LOG_INV_TBL[129] = f32[](0F40000000, 0F3ffe03f8, 0F3ffc0fc1, 0F3ffa232d, 0F3ff83e10, 0F3ff6603e, 0F3ff4898d, 0F3ff2b9d6, 0F3ff0f0f1, 0F3fef2eb7, 0F3fed7304, 0F3febbdb3, 0F3fea0ea1, 0F3fe865ac, 0F3fe6c2b4, 0F3fe52598, 0F3fe38e39, 0F3fe1fc78, 0F3fe07038, 0F3fdee95c, 0F3fdd67c9, 0F3fdbeb62, 0F3fda740e, 0F3fd901b2, 0F3fd79436, 0F3fd62b81, 0F3fd4c77b, 0F3fd3680d, 0F3fd20d21, 0F3fd0b6a0, 0F3fcf6475, 0F3fce168a, 0F3fcccccd, 0F3fcb8728, 0F3fca4588, 0F3fc907da, 0F3fc7ce0c, 0F3fc6980c, 0F3fc565c8, 0F3fc43730, 0F3fc30c31, 0F3fc1e4bc, 0F3fc0c0c1, 0F3fbfa030, 0F3fbe82fa, 0F3fbd6910, 0F3fbc5264, 0F3fbb3ee7, 0F3fba2e8c, 0F3fb92144, 0F3fb81703, 0F3fb70fbb, 0F3fb60b61, 0F3fb509e7, 0F3fb40b41, 0F3fb30f63, 0F3fb21643, 0F3fb11fd4, 0F3fb02c0b, 0F3faf3ade, 0F3fae4c41, 0F3fad602b, 0F3fac7692, 0F3fab8f6a, 0F3faaaaab, 0F3fa9c84a, 0F3fa8e83f, 0F3fa80a81, 0F3fa72f05, 0F3fa655c4, 0F3fa57eb5, 0F3fa4a9cf, 0F3fa3d70a, 0F3fa3065e, 0F3fa237c3, 0F3fa16b31, 0F3fa0a0a1, 0F3f9fd80a, 0F3f9f1166, 0F3f9e4cad, 0F3f9d89d9, 0F3f9cc8e1, 0F3f9c09c1, 0F3f9b4c70, 0F3f9a90e8, 0F3f99d723, 0F3f991f1a, 0F3f9868c8, 0F3f97b426, 0F3f97012e, 0F3f964fda, 0F3f95a025, 0F3f94f209, 0F3f944581, 0F3f939a86, 0F3f92f114, 0F3f924925, 0F3f91a2b4, 0F3f90fdbc, 0F3f905a38, 0F3f8fb824, 0F3f8f177a, 0F3f8e7835, 0F3f8dda52, 0F3f8d3dcb, 0F3f8ca29c, 0F3f8c08c1, 0F3f8b7034, 0F3f8ad8f3, 0F3f8a42f8, 0F3f89ae41, 0F3f891ac7, 0F3f888889, 0F3f87f781, 0F3f8767ab, 0F3f86d905, 0F3f864b8a, 0F3f85bf37, 0F3f853408, 0F3f84a9fa, 0F3f842108, 0F3f839930, 0F3f83126f, 0F3f828cc0, 0F3f820821, 0F3f81848e, 0F3f810204, 0F3f808081, 0F3f800000);

decl function &_gcc_acosh(arg_f32 %ret)(arg_f32 %x);


function &_gcc_acosh(arg_f32 %_gcc_acosh)(arg_f32 %x)
{

@_gcc_acosh_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	add_ftz_f32	$s3, $s0, 0Fbf800000;
	mov_b32	$s1, $s0;
	cmp_gt_b1_u32	$c0, $s1, 1073741824;
	cmov_b32	$s2, $c0, $s0, $s3;
	add_ftz_f32	$s4, $s3, $s3;
	mul_ftz_f32	$s3, $s3, $s3;
	add_ftz_f32	$s3, $s3, $s4;
	mul_ftz_f32	$s4, $s0, $s0;
	add_ftz_f32	$s4, $s4, 0Fbf800000;
	cmov_b32	$s4, $c0, $s4, $s3;
	cmov_b32	$s3, $c0, 1065353216, 0;
	nsqrt_f32	$s4, $s4;
	add_ftz_f32	$s2, $s2, $s4;
	cmp_gt_b1_u32	$c0, $s1, 1174405120;
	cmov_b32	$s4, $c0, $s0, $s2;
	cmov_b32	$s2, $c0, 1060205080, 0;
	sub_ftz_f32	$s3, $s4, $s3;
	add_ftz_f32	$s4, $s3, 0F3f800000;
	mov_b32	$s5, $s4;
	and_b32	$s4, $s5, 8323072;
	shl_u32	$s6, $s5, 1;
	and_b32	$s6, $s6, 65536;
	add_u32	$s4, $s6, $s4;
	or_b32	$s6, $s4, 1056964608;
	and_b32	$s7, $s5, 4294934528;
	sub_ftz_f32	$s8, 0F3f800000, $s7;
	and_b32	$s7, $s5, 8355840;
	or_b32	$s7, $s7, 1056964608;
	sub_ftz_f32	$s7, $s6, $s7;
	add_ftz_f32	$s8, $s3, $s8;
	or_b32	$s9, $s5, 8388607;
	xor_b32	$s9, $s9, 2139095040;
	add_u32	$s9, $s9, 2139095040;
	and_b32	$s9, $s9, 2139095040;
	mul_ftz_f32	$s8, $s8, $s9;
	mul_ftz_f32	$s8, $s8, 0F3f000000;
	and_b32	$s9, $s5, 8388607;
	sub_ftz_f32	$s7, $s7, $s8;
	or_b32	$s8, $s9, 1056964608;
	sub_ftz_f32	$s6, $s6, $s8;
	bitextract_u32	$s5, $s5, 23, 8;
	add_u32	$s5, $s5, 4294967169;
	cvt_near_f32_s32	$s5, $s5;
	cmp_gt_ftz_b1_f32	$c0, $s5, 0F41c00000;
	cmov_b32	$s6, $c0, $s6, $s7;
	add_ftz_f32	$s7, $s3, 0F40000000;
	nrcp_f32	$s7, $s7;
	mul_ftz_f32	$s8, $s7, $s3;
	add_ftz_f32	$s7, $s8, $s8;
	mul_ftz_f32	$s9, $s7, $s7;
	nfma_f32	$s10, $s9, 0F3c4ccccd, 0F3daaaaab;
	mul_ftz_f32	$s9, $s10, $s9;
	shr_u32	$s4, $s4, 16;
	cvt_u64_u32	$d0, $s4;
	mov_b32	$s4, $s3;
	mul_ftz_f32	$s7, $s7, $s9;
	neg_f32	$s8, $s8;
	shl_u64	$d1, $d0, 2;
	and_b32	$s4, $s4, 2147483647;
	ld_readonly_align(4)_f32	$s9, [&__math32_LOG_INV_TBL][$d1];
	mul_ftz_f32	$s6, $s9, $s6;
	mul_ftz_f32	$s9, $s6, $s6;
	nfma_f32	$s10, $s6, 0F3eaaaaab, 0F3f000000;
	nfma_f32	$s6, $s10, $s9, $s6;
	neg_f32	$s6, $s6;
	nfma_f32	$s8, $s8, $s3, $s7;
	nfma_f32	$s7, $s5, 0F3805fdf4, $s6;
	add_ftz_f32	$s6, $s8, $s3;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s9, $s8), [&__math32_LOGE_TBL][$d0];
	nfma_f32	$s5, $s5, 0F3f317000, $s9;
	add_ftz_f32	$s7, $s8, $s7;
	add_ftz_f32	$s5, $s5, $s7;
	cmp_lt_b1_u32	$c0, $s4, 1031798784;
	cmov_b32	$s5, $c0, $s6, $s5;
	cmp_gt_b1_u32	$c0, $s4, 2139095039;
	cmov_b32	$s5, $c0, $s3, $s5;
	cmp_lt_ftz_b1_f32	$c0, $s3, 0Fbf800000;
	cmov_b32	$s5, $c0, 2143289344, $s5;
	cmp_eq_ftz_b1_f32	$c0, $s3, 0Fbf800000;
	cmov_b32	$s5, $c0, 4286578688, $s5;
	cmp_lt_b1_u32	$c0, $s4, 864026624;
	cmov_b32	$s3, $c0, $s3, $s5;
	add_ftz_f32	$s2, $s2, $s3;
	cmp_gt_b1_u32	$c0, $s1, 2139095039;
	cmov_b32	$s1, $c0, $s0, $s2;
	cmp_lt_ftz_b1_f32	$c0, $s0, 0F3f800000;
	cmov_b32	$s0, $c0, 2143289344, $s1;
	st_arg_align(4)_f32	$s0, [%_gcc_acosh];
	ret;
};

//readonly_f32 &__math32_LOG_INV_TBL[129] = f32[](0F40000000, 0F3ffe03f8, 0F3ffc0fc1, 0F3ffa232d, 0F3ff83e10, 0F3ff6603e, 0F3ff4898d, 0F3ff2b9d6, 0F3ff0f0f1, 0F3fef2eb7, 0F3fed7304, 0F3febbdb3, 0F3fea0ea1, 0F3fe865ac, 0F3fe6c2b4, 0F3fe52598, 0F3fe38e39, 0F3fe1fc78, 0F3fe07038, 0F3fdee95c, 0F3fdd67c9, 0F3fdbeb62, 0F3fda740e, 0F3fd901b2, 0F3fd79436, 0F3fd62b81, 0F3fd4c77b, 0F3fd3680d, 0F3fd20d21, 0F3fd0b6a0, 0F3fcf6475, 0F3fce168a, 0F3fcccccd, 0F3fcb8728, 0F3fca4588, 0F3fc907da, 0F3fc7ce0c, 0F3fc6980c, 0F3fc565c8, 0F3fc43730, 0F3fc30c31, 0F3fc1e4bc, 0F3fc0c0c1, 0F3fbfa030, 0F3fbe82fa, 0F3fbd6910, 0F3fbc5264, 0F3fbb3ee7, 0F3fba2e8c, 0F3fb92144, 0F3fb81703, 0F3fb70fbb, 0F3fb60b61, 0F3fb509e7, 0F3fb40b41, 0F3fb30f63, 0F3fb21643, 0F3fb11fd4, 0F3fb02c0b, 0F3faf3ade, 0F3fae4c41, 0F3fad602b, 0F3fac7692, 0F3fab8f6a, 0F3faaaaab, 0F3fa9c84a, 0F3fa8e83f, 0F3fa80a81, 0F3fa72f05, 0F3fa655c4, 0F3fa57eb5, 0F3fa4a9cf, 0F3fa3d70a, 0F3fa3065e, 0F3fa237c3, 0F3fa16b31, 0F3fa0a0a1, 0F3f9fd80a, 0F3f9f1166, 0F3f9e4cad, 0F3f9d89d9, 0F3f9cc8e1, 0F3f9c09c1, 0F3f9b4c70, 0F3f9a90e8, 0F3f99d723, 0F3f991f1a, 0F3f9868c8, 0F3f97b426, 0F3f97012e, 0F3f964fda, 0F3f95a025, 0F3f94f209, 0F3f944581, 0F3f939a86, 0F3f92f114, 0F3f924925, 0F3f91a2b4, 0F3f90fdbc, 0F3f905a38, 0F3f8fb824, 0F3f8f177a, 0F3f8e7835, 0F3f8dda52, 0F3f8d3dcb, 0F3f8ca29c, 0F3f8c08c1, 0F3f8b7034, 0F3f8ad8f3, 0F3f8a42f8, 0F3f89ae41, 0F3f891ac7, 0F3f888889, 0F3f87f781, 0F3f8767ab, 0F3f86d905, 0F3f864b8a, 0F3f85bf37, 0F3f853408, 0F3f84a9fa, 0F3f842108, 0F3f839930, 0F3f83126f, 0F3f828cc0, 0F3f820821, 0F3f81848e, 0F3f810204, 0F3f808081, 0F3f800000);
align(8) readonly_f32 &__math32_CBRT_TBL[258] = f32[](0F3f800000, 0F00000000, 0F3f804000, 0F3a28e585, 0F3f80a000, 0F399c910f, 0F3f80e000, 0F3a703484, 0F3f814000, 0F3a0eb4bc, 0F3f81a000, 0F392750df, 0F3f81e000, 0F3a419dc7, 0F3f824000, 0F39ac3801, 0F3f828000, 0F3a675948, 0F3f82e000, 0F39eabf9a, 0F3f834000, 0F356629d6, 0F3f838000, 0F3a07f04c, 0F3f83e000, 0F3848dac3, 0F3f842000, 0F3a0e1b17, 0F3f848000, 0F384a1cc7, 0F3f84c000, 0F3a082ade, 0F3f852000, 0F363f31e5, 0F3f856000, 0F39eccf0d, 0F3f85a000, 0F3a692c6f, 0F3f860000, 0F39b22cb1, 0F3f864000, 0F3a462d87, 0F3f86a000, 0F3941e864, 0F3f86e000, 0F3a180409, 0F3f872000, 0F3a7cd32d, 0F3f878000, 0F39bdde6c, 0F3f87c000, 0F3a3e5fb4, 0F3f882000, 0F38d960b3, 0F3f886000, 0F39eab752, 0F3f88a000, 0F3a4cf599, 0F3f890000, 0F390803d1, 0F3f894000, 0F39e90955, 0F3f898000, 0F3a44878c, 0F3f89e000, 0F38908271, 0F3f8a2000, 0F39ba4b0f, 0F3f8a6000, 0F3a25cdb3, 0F3f8aa000, 0F3a6c0f33, 0F3f8b0000, 0F393fc12e, 0F3f8b4000, 0F39e2ee51, 0F3f8b8000, 0F3a30a9dd, 0F3f8bc000, 0F3a6d8e61, 0F3f8c2000, 0F3920aa58, 0F3f8c6000, 0F39c1088a, 0F3f8ca000, 0F3a16a120, 0F3f8ce000, 0F3a4a86c1, 0F3f8d2000, 0F3a7c3aae, 0F3f8d8000, 0F392f0952, 0F3f8dc000, 0F39b2461c, 0F3f8e0000, 0F3a04621f, 0F3f8e4000, 0F3a2d84b8, 0F3f8e8000, 0F3a548ff4, 0F3f8ec000, 0F3a7988db, 0F3f8f2000, 0F38e3a30c, 0F3f8f6000, 0F39755daa, 0F3f8fa000, 0F39b86d8a, 0F3f8fe000, 0F39f22e5e, 0F3f902000, 0F3a13fd53, 0F3f906000, 0F3a2cedcc, 0F3f90a000, 0F3a43ed23, 0F3f90e000, 0F3a58ffd0, 0F3f912000, 0F3a6c2a3c, 0F3f916000, 0F3a7d70bf, 0F3f91c000, 0F384d7a06, 0F3f920000, 0F38d318cf, 0F3f924000, 0F39185d53, 0F3f928000, 0F393fe1b1, 0F3f92c000, 0F396029b1, 0F3f930000, 0F3979454c, 0F3f934000, 0F3985a221, 0F3f938000, 0F398b1b0d, 0F3f93c000, 0F398d1515, 0F3f940000, 0F398b97c7, 0F3f944000, 0F3986aa98, 0F3f948000, 0F397ca9c7, 0F3f94c000, 0F39653bd8, 0F3f950000, 0F394719b5, 0F3f954000, 0F39225182, 0F3f958000, 0F38ede264, 0F3f95c000, 0F388a0d15, 0F3f960000, 0F3749f226, 0F3f962000, 0F3a737219, 0F3f966000, 0F3a6223e3, 0F3f96a000, 0F3a4f406c, 0F3f96e000, 0F3a3acaee, 0F3f972000, 0F3a24c698, 0F3f976000, 0F3a0d368f, 0F3f97a000, 0F39e83bdd, 0F3f97e000, 0F39b2ff8f, 0F3f982000, 0F39757c89, 0F3f986000, 0F38fdf7dc, 0F3f98a000, 0F3622482d, 0F3f98c000, 0F3a600bf3, 0F3f990000, 0F3a3dfedf, 0F3f994000, 0F3a1a7de3, 0F3f998000, 0F39eb17a4, 0F3f99c000, 0F399e56e3, 0F3f9a0000, 0F391d7e03, 0F3f9a2000, 0F3a7e2ab7, 0F3f9a6000, 0F3a538fc2, 0F3f9aa000, 0F3a279148, 0F3f9ae000, 0F39f463ce, 0F3f9b2000, 0F3996e86c, 0F3f9b6000, 0F38dad617, 0F3f9b8000, 0F3a69e815, 0F3f9bc000, 0F3a371eac, 0F3f9c0000, 0F3a030100, 0F3f9c4000, 0F399b2304, 0F3f9c8000, 0F38b694db, 0F3f9ca000, 0F3a5ec6af, 0F3f9ce000, 0F3a257018, 0F3f9d2000, 0F39d5a259, 0F3f9d6000, 0F393bb0e7, 0F3f9d8000, 0F3a71c388, 0F3f9dc000, 0F3a335958, 0F3f9e0000, 0F39e75fcb, 0F3f9e4000, 0F394b2590, 0F3f9e6000, 0F3a70a802, 0F3f9ea000, 0F3a2d4de7, 0F3f9ee000, 0F39d17a6c, 0F3f9f2000, 0F390be02b, 0F3f9f4000, 0F3a5c007c, 0F3f9f8000, 0F3a13d899, 0F3f9fc000, 0F399504dc, 0F3fa00000, 0F00000000, 0F3fa02000, 0F3a34534e, 0F3fa06000, 0F39cefca8, 0F3fa0a000, 0F38cc1828, 0F3fa0c000, 0F3a4a6352, 0F3fa10000, 0F39f4424a, 0F3fa14000, 0F3922f98d);

decl function &_gcc_cbrt(arg_f32 %ret)(arg_f32 %x);


function &_gcc_cbrt(arg_f32 %_gcc_cbrt)(arg_f32 %x)
{

@_gcc_cbrt_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s2, $s0;
	and_b32	$s3, $s2, 2147483647;
	shr_u32	$s1, $s3, 23;
	add_u32	$s4, $s1, 4294967169;
	or_b32	$s5, $s3, 1065353216;
	add_ftz_f32	$s5, $s5, 0Fbf800000;
	mov_b32	$s6, $s5;
	shr_u32	$s5, $s6, 23;
	add_u32	$s5, $s5, 4294967043;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b32	$s5, $c0, $s5, $s4;
	cmov_b32	$s4, $c0, $s6, $s3;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cmp_gt_b1_u32	$c1, $s3, 2139095039;
	or_b1	$c0, $c1, $c0;
	cvt_s64_s32	$d0, $s5;
	mul_u64	$d0, $d0, 1431655766;
	shr_u64	$d1, $d0, 63;
	cvt_u32_u64	$s1, $d1;
	shr_u64	$d0, $d0, 32;
	cvt_u32_u64	$s6, $d0;
	add_u32	$s1, $s6, $s1;
	mad_u32	$s5, $s1, 4294967293, $s5;
	cmp_eq_b1_s32	$c1, $s5, -1;
	cmov_b32	$s6, $c1, 964645535, 950204813;
	cmov_b32	$s7, $c1, 1061888000, 1059143680;
	cmp_eq_b1_s32	$c1, $s5, 0;
	cmov_b32	$s7, $c1, 1065353216, $s7;
	cmov_b32	$s6, $c1, 0, $s6;
	cmp_eq_b1_s32	$c1, $s5, 1;
	cmov_b32	$s6, $c1, 958593421, $s6;
	cmov_b32	$s7, $c1, 1067532288, $s7;
	cmp_eq_b1_s32	$c1, $s5, 2;
	cmov_b32	$s5, $c1, 1070276608, $s7;
	cmov_b32	$s6, $c1, 973034143, $s6;
	and_b32	$s7, $s4, 8323072;
	shl_u32	$s8, $s4, 1;
	and_b32	$s8, $s8, 65536;
	xor_b32	$s2, $s3, $s2;
	add_u32	$s3, $s8, $s7;
	or_b32	$s7, $s3, 1056964608;
	and_b32	$s4, $s4, 8388607;
	or_b32	$s4, $s4, 1056964608;
	sub_ftz_f32	$s4, $s4, $s7;
	shr_u32	$s3, $s3, 16;
	cvt_u64_u32	$d0, $s3;
	shl_u64	$d1, $d0, 2;
	ld_readonly_align(4)_f32	$s3, [&__math32_LOG_INV_TBL][$d1];
	mul_ftz_f32	$s4, $s4, $s3;
	mul_ftz_f32	$s3, $s4, 0F3eaaaaab;
	mul_ftz_f32	$s7, $s4, $s4;
	nfma_f32	$s9, $s4, 0F3d7cd6ea, 0Fbde38e39;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s4, $s8), [&__math32_CBRT_TBL][$d0];
	nfma_f32	$s3, $s9, $s7, $s3;
	mul_ftz_f32	$s7, $s8, $s6;
	nfma_f32	$s7, $s8, $s5, $s7;
	nfma_f32	$s6, $s4, $s6, $s7;
	mul_ftz_f32	$s4, $s4, $s5;
	shl_u32	$s1, $s1, 23;
	add_u32	$s1, $s1, 1065353216;
	nfma_f32	$s5, $s3, $s6, $s6;
	nfma_f32	$s3, $s3, $s4, $s5;
	add_ftz_f32	$s3, $s3, $s4;
	mul_ftz_f32	$s1, $s1, $s3;
	or_b32	$s1, $s1, $s2;
	cmov_b32	$s0, $c0, $s0, $s1;
	st_arg_align(4)_f32	$s0, [%_gcc_cbrt];
	ret;
};

//readonly_f32 &__math32_LOG_INV_TBL[129] = f32[](0F40000000, 0F3ffe03f8, 0F3ffc0fc1, 0F3ffa232d, 0F3ff83e10, 0F3ff6603e, 0F3ff4898d, 0F3ff2b9d6, 0F3ff0f0f1, 0F3fef2eb7, 0F3fed7304, 0F3febbdb3, 0F3fea0ea1, 0F3fe865ac, 0F3fe6c2b4, 0F3fe52598, 0F3fe38e39, 0F3fe1fc78, 0F3fe07038, 0F3fdee95c, 0F3fdd67c9, 0F3fdbeb62, 0F3fda740e, 0F3fd901b2, 0F3fd79436, 0F3fd62b81, 0F3fd4c77b, 0F3fd3680d, 0F3fd20d21, 0F3fd0b6a0, 0F3fcf6475, 0F3fce168a, 0F3fcccccd, 0F3fcb8728, 0F3fca4588, 0F3fc907da, 0F3fc7ce0c, 0F3fc6980c, 0F3fc565c8, 0F3fc43730, 0F3fc30c31, 0F3fc1e4bc, 0F3fc0c0c1, 0F3fbfa030, 0F3fbe82fa, 0F3fbd6910, 0F3fbc5264, 0F3fbb3ee7, 0F3fba2e8c, 0F3fb92144, 0F3fb81703, 0F3fb70fbb, 0F3fb60b61, 0F3fb509e7, 0F3fb40b41, 0F3fb30f63, 0F3fb21643, 0F3fb11fd4, 0F3fb02c0b, 0F3faf3ade, 0F3fae4c41, 0F3fad602b, 0F3fac7692, 0F3fab8f6a, 0F3faaaaab, 0F3fa9c84a, 0F3fa8e83f, 0F3fa80a81, 0F3fa72f05, 0F3fa655c4, 0F3fa57eb5, 0F3fa4a9cf, 0F3fa3d70a, 0F3fa3065e, 0F3fa237c3, 0F3fa16b31, 0F3fa0a0a1, 0F3f9fd80a, 0F3f9f1166, 0F3f9e4cad, 0F3f9d89d9, 0F3f9cc8e1, 0F3f9c09c1, 0F3f9b4c70, 0F3f9a90e8, 0F3f99d723, 0F3f991f1a, 0F3f9868c8, 0F3f97b426, 0F3f97012e, 0F3f964fda, 0F3f95a025, 0F3f94f209, 0F3f944581, 0F3f939a86, 0F3f92f114, 0F3f924925, 0F3f91a2b4, 0F3f90fdbc, 0F3f905a38, 0F3f8fb824, 0F3f8f177a, 0F3f8e7835, 0F3f8dda52, 0F3f8d3dcb, 0F3f8ca29c, 0F3f8c08c1, 0F3f8b7034, 0F3f8ad8f3, 0F3f8a42f8, 0F3f89ae41, 0F3f891ac7, 0F3f888889, 0F3f87f781, 0F3f8767ab, 0F3f86d905, 0F3f864b8a, 0F3f85bf37, 0F3f853408, 0F3f84a9fa, 0F3f842108, 0F3f839930, 0F3f83126f, 0F3f828cc0, 0F3f820821, 0F3f81848e, 0F3f810204, 0F3f808081, 0F3f800000);

decl function &_gcc_log1p(arg_f32 %ret)(arg_f32 %x);


function &_gcc_log1p(arg_f32 %_gcc_log1p)(arg_f32 %x)
{

@_gcc_log1p_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	add_ftz_f32	$s1, $s0, 0F3f800000;
	mov_b32	$s2, $s1;
	and_b32	$s1, $s2, 8323072;
	shl_u32	$s3, $s2, 1;
	and_b32	$s3, $s3, 65536;
	add_u32	$s1, $s3, $s1;
	or_b32	$s3, $s1, 1056964608;
	and_b32	$s4, $s2, 4294934528;
	sub_ftz_f32	$s5, 0F3f800000, $s4;
	and_b32	$s4, $s2, 8355840;
	or_b32	$s4, $s4, 1056964608;
	sub_ftz_f32	$s4, $s3, $s4;
	add_ftz_f32	$s5, $s5, $s0;
	or_b32	$s6, $s2, 8388607;
	xor_b32	$s6, $s6, 2139095040;
	add_u32	$s6, $s6, 2139095040;
	and_b32	$s6, $s6, 2139095040;
	mul_ftz_f32	$s5, $s5, $s6;
	mul_ftz_f32	$s5, $s5, 0F3f000000;
	and_b32	$s6, $s2, 8388607;
	sub_ftz_f32	$s4, $s4, $s5;
	or_b32	$s5, $s6, 1056964608;
	sub_ftz_f32	$s3, $s3, $s5;
	bitextract_u32	$s2, $s2, 23, 8;
	add_u32	$s2, $s2, 4294967169;
	cvt_near_f32_s32	$s2, $s2;
	cmp_gt_ftz_b1_f32	$c0, $s2, 0F41c00000;
	cmov_b32	$s3, $c0, $s3, $s4;
	add_ftz_f32	$s4, $s0, 0F40000000;
	nrcp_f32	$s4, $s4;
	mul_ftz_f32	$s5, $s4, $s0;
	add_ftz_f32	$s4, $s5, $s5;
	mul_ftz_f32	$s6, $s4, $s4;
	nfma_f32	$s7, $s6, 0F3c4ccccd, 0F3daaaaab;
	mul_ftz_f32	$s6, $s7, $s6;
	shr_u32	$s1, $s1, 16;
	cvt_u64_u32	$d0, $s1;
	mov_b32	$s1, $s0;
	mul_ftz_f32	$s4, $s4, $s6;
	neg_f32	$s5, $s5;
	shl_u64	$d1, $d0, 2;
	and_b32	$s1, $s1, 2147483647;
	ld_readonly_align(4)_f32	$s6, [&__math32_LOG_INV_TBL][$d1];
	mul_ftz_f32	$s3, $s3, $s6;
	mul_ftz_f32	$s6, $s3, $s3;
	nfma_f32	$s7, $s3, 0F3eaaaaab, 0F3f000000;
	nfma_f32	$s3, $s7, $s6, $s3;
	neg_f32	$s3, $s3;
	nfma_f32	$s5, $s5, $s0, $s4;
	nfma_f32	$s4, $s2, 0F3805fdf4, $s3;
	add_ftz_f32	$s3, $s5, $s0;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s6, $s5), [&__math32_LOGE_TBL][$d0];
	nfma_f32	$s2, $s2, 0F3f317000, $s6;
	add_ftz_f32	$s4, $s5, $s4;
	add_ftz_f32	$s2, $s2, $s4;
	cmp_lt_b1_u32	$c0, $s1, 1031798784;
	cmov_b32	$s2, $c0, $s3, $s2;
	cmp_gt_b1_u32	$c0, $s1, 2139095039;
	cmov_b32	$s2, $c0, $s0, $s2;
	cmp_lt_ftz_b1_f32	$c0, $s0, 0Fbf800000;
	cmov_b32	$s2, $c0, 2143289344, $s2;
	cmp_eq_ftz_b1_f32	$c0, $s0, 0Fbf800000;
	cmov_b32	$s2, $c0, 4286578688, $s2;
	cmp_lt_b1_u32	$c0, $s1, 864026624;
	cmov_b32	$s0, $c0, $s0, $s2;
	st_arg_align(4)_f32	$s0, [%_gcc_log1p];
	ret;
};


decl function &_gcc_half_sin(arg_f32 %ret)(arg_f32 %x);


function &_gcc_half_sin(arg_f32 %_gcc_half_sin)(arg_f32 %x)
{

@_gcc_half_sin_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s2, $s0;
	and_b32	$s1, $s2, 2147483647;
	mov_b32	$s6, $s1;
	nfma_f32	$s5, $s6, 0F3f22f983, 0F3f000000;
	cvt_ftz_s32_f32	$s4, $s5;
	and_b32	$s3, $s4, 2;
	cmp_gt_b1_u32	$c0, $s3, 1;
	cvt_u32_b1	$s3, $c0;
	trunc_ftz_f32	$s5, $s5;
	mul_ftz_f32	$s7, $s5, 0Fbfc90fda;
	fma_ftz_f32	$s7, $s5, 0F3fc90fda, $s7;
	mul_ftz_f32	$s9, $s5, 0F3fc90fda;
	sub_ftz_f32	$s8, $s6, $s9;
	sub_ftz_f32	$s6, $s6, $s8;
	sub_ftz_f32	$s6, $s6, $s9;
	sub_ftz_f32	$s6, $s6, $s7;
	add_ftz_f32	$s8, $s8, $s6;
	mul_ftz_f32	$s9, $s5, 0F33a22168;
	sub_ftz_f32	$s6, $s8, $s9;
	mul_ftz_f32	$s7, $s5, 0Fb3a22168;
	fma_ftz_f32	$s10, $s5, 0F33a22168, $s7;
	mul_ftz_f32	$s7, $s5, 0F27c234c4;
	sub_ftz_f32	$s8, $s8, $s6;
	sub_ftz_f32	$s8, $s8, $s9;
	sub_ftz_f32	$s8, $s8, $s10;
	add_ftz_f32	$s8, $s6, $s8;
	sub_ftz_f32	$s6, $s8, $s7;
	sub_ftz_f32	$s8, $s8, $s6;
	sub_ftz_f32	$s7, $s8, $s7;
	add_ftz_f32	$s6, $s6, $s7;
	mov_b32	$s7, $s6;
	and_b32	$s7, $s7, 2147483647;
	add_u32	$s8, $s7, 4278190080;
	add_u32	$s9, $s7, 3244713574;
	cmp_lt_b1_u32	$c0, $s9, 11429479;
	cmov_b32	$s8, $c0, $s8, 0;
	cmp_gt_b1_u32	$c0, $s7, 1061683200;
	cmov_b32	$s7, $c0, 1049624576, $s8;
	mul_ftz_f32	$s8, $s5, 0Fa7c234c4;
	fma_ftz_f32	$s8, $s5, 0F27c234c4, $s8;
	neg_f32	$s10, $s8;
	and_b32	$s4, $s4, 1;
	mul_ftz_f32	$s5, $s6, $s6;
	nfma_f32	$s9, $s5, 0F2f2ec9d3, 0Fb2d72f34;
	nfma_f32	$s9, $s5, $s9, 0F3636df25;
	nfma_f32	$s9, $s5, $s9, 0Fb95009d4;
	nfma_f32	$s11, $s5, $s9, 0F3c088887;
	mul_ftz_f32	$s9, $s6, $s5;
	neg_f32	$s12, $s9;
	mul_ftz_f32	$s11, $s11, $s12;
	nfma_f32	$s10, $s10, 0F3f000000, $s11;
	nfma_f32	$s11, $s5, 0Fad47d74e, 0F310f74f6;
	nfma_f32	$s11, $s5, $s11, 0Fb492923a;
	nfma_f32	$s11, $s5, $s11, 0F37d00ae2;
	nfma_f32	$s11, $s5, $s11, 0Fbab60b60;
	nfma_f32	$s11, $s5, $s11, 0F3d2aaaab;
	mul_ftz_f32	$s11, $s11, $s5;
	mul_ftz_f32	$s12, $s8, $s6;
	nfma_f32	$s8, $s5, $s10, $s8;
	nfma_f32	$s8, $s9, 0F3e2aaaab, $s8;
	sub_ftz_f32	$s6, $s6, $s8;
	nfma_f32	$s8, $s5, $s11, $s12;
	neg_f32	$s9, $s7;
	nfma_f32	$s5, $s5, 0F3f000000, $s9;
	sub_ftz_f32	$s5, $s5, $s8;
	sub_ftz_f32	$s7, 0F3f800000, $s7;
	sub_ftz_f32	$s5, $s7, $s5;
	cvt_b1_u32	$c0, $s4;
	cmov_b32	$s4, $c0, $s5, $s6;
	shl_u32	$s3, $s3, 31;
	xor_b32	$s3, $s4, $s3;
	cmp_gt_b1_u32	$c0, $s1, 1199570944;
	cmov_b32	$s3, $c0, 1065353216, $s3;
	xor_b32	$s2, $s1, $s2;
	xor_b32	$s2, $s2, $s3;
	cmp_eq_ftz_b1_f32	$c0, $s0, 0F00000000;
	cmov_b32	$s0, $c0, $s0, $s2;
	cmp_gt_b1_u32	$c0, $s1, 2139095039;
	cmov_b32	$s0, $c0, 2143289344, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_half_sin];
	ret;
};


decl function &_gcc_half_sqrt(arg_f32 %ret)(arg_f32 %x);


function &_gcc_half_sqrt(arg_f32 %_gcc_half_sqrt)(arg_f32 %x)
{

@_gcc_half_sqrt_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	nsqrt_f32	$s0, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_half_sqrt];
	ret;
};


decl function &_gcc_pown(arg_f32 %ret)(
	arg_f32 %x,
	arg_u32 %ny);


function &_gcc_pown(arg_f32 %_gcc_pown)(
	arg_f32 %x,
	arg_u32 %ny)
{
	align(4) spill_u8 %__spillStack[16];

@_gcc_pown_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	and_b32	$s1, $s0, 2147483647;
	or_b32	$s4, $s1, 1065353216;
	shr_u32	$s3, $s1, 23;
	add_u32	$s2, $s3, 4294967169;
	add_ftz_f32	$s4, $s4, 0Fbf800000;
	shr_s32	$s5, $s4, 23;
	add_u32	$s5, $s5, 4294967043;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cmov_b32	$s9, $c0, $s4, $s1;
	cmov_b32	$s10, $c0, $s5, $s2;
	ld_arg_align(4)_u32	$s2, [%ny];
	cvt_near_f32_s32	$s3, $s2;
	mov_b32	$s8, $s3;
	and_b32	$s3, $s8, 2147483647;
	cmp_eq_b1_s32	$c2, $s8, $s3;
	cmp_ne_b1_s32	$c4, $s8, $s3;
	cmp_eq_b1_s32	$c1, $s1, 0;
	and_b1	$c0, $c4, $c1;
	and_b1	$c1, $c1, $c2;
	cmp_eq_b1_s32	$c3, $s0, -8388608;
	and_b1	$c5, $c4, $c3;
	and_b1	$c3, $c3, $c2;
	cmp_eq_b1_s32	$c6, $s0, 2139095040;
	and_b1	$c2, $c6, $c2;
	cvt_u32_b1	$s3, $c2;
	st_spill_align(4)_u32	$s3, [%__spillStack];
	and_b1	$c2, $c4, $c6;
	cvt_u32_b1	$s3, $c2;
	st_spill_align(4)_u32	$s3, [%__spillStack][8];
	cmp_eq_b1_s32	$c2, $s0, $s1;
	cmov_b32	$s4, $c2, 2139095040, 4286578688;
	cmov_b32	$s3, $c2, 0, 2147483648;
	and_b32	$s5, $s2, 1;
	sub_u32	$s6, 2, $s5;
	cmp_eq_b1_s32	$c2, $s6, 1;
	cmp_ne_b1_s32	$c4, $s6, 1;
	and_b1	$c6, $c3, $c4;
	cvt_u32_b1	$s6, $c6;
	st_spill_align(4)_u32	$s6, [%__spillStack][12];
	and_b1	$c3, $c3, $c2;
	and_b1	$c4, $c5, $c4;
	and_b1	$c5, $c5, $c2;
	cvt_u32_b1	$s6, $c1;
	cvt_u32_b1	$s7, $c0;
	and_b1	$c7, $c0, $c2;
	and_b1	$c6, $c1, $c2;
	cmp_ne_b1_s32	$c0, $s0, $s1;
	and_b1	$c0, $c2, $c0;
	and_b32	$s11, $s9, 8323072;
	shl_u32	$s12, $s9, 1;
	and_b32	$s12, $s12, 65536;
	mov_b32	$s13, $s1;
	add_u32	$s11, $s12, $s11;
	sub_ftz_f32	$s18, 0F3f800000, $s13;
	mul_ftz_f32	$s12, $s18, $s18;
	shr_u32	$s13, $s11, 16;
	mul_ftz_f32	$s14, $s18, $s12;
	nfma_f32	$s15, $s18, 0F3e124925, 0F3e2aaaab;
	nfma_f32	$s15, $s18, $s15, 0F3e4ccccd;
	nfma_f32	$s15, $s18, $s15, 0F3e800000;
	nfma_f32	$s15, $s18, $s15, 0F3eaaaaab;
	mul_ftz_f32	$s16, $s14, $s15;
	mul_ftz_f32	$s12, $s12, 0Fbf000000;
	or_b32	$s19, $s11, 1056964608;
	sub_ftz_f32	$s11, $s12, $s16;
	cvt_near_f32_s32	$s17, $s10;
	abs_f32	$s15, $s18;
	cvt_u64_u32	$d0, $s13;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s10, $s14), [&__math32_LOGE_TBL][$d0];
	nfma_f32	$s13, $s17, 0F3f317000, $s10;
	neg_f32	$s10, $s16;
	sub_ftz_f32	$s16, $s11, $s18;
	neg_f32	$s18, $s18;
	and_b32	$s9, $s9, 8388607;
	or_b32	$s9, $s9, 1056964608;
	sub_ftz_f32	$s9, $s19, $s9;
	ld_v2_readonly_align(8)_f32	($s20, $s19), [&__math32_LOG_INV_TBL_EP][$d0];
	mul_ftz_f32	$s19, $s9, $s19;
	mul_ftz_f32	$s20, $s9, $s20;
	add_ftz_f32	$s9, $s20, $s19;
	nfma_f32	$s21, $s9, 0F3e800000, 0F3eaaaaab;
	nfma_f32	$s21, $s9, $s21, 0F3f000000;
	mul_ftz_f32	$s22, $s9, $s9;
	mul_ftz_f32	$s21, $s21, $s22;
	sub_ftz_f32	$s20, $s20, $s9;
	add_ftz_f32	$s19, $s19, $s20;
	add_ftz_f32	$s19, $s21, $s19;
	neg_f32	$s19, $s19;
	nfma_f32	$s19, $s17, 0F3805fdf4, $s19;
	neg_f32	$s17, $s9;
	cmp_lt_ftz_b1_f32	$c1, $s15, 0F3d800000;
	cmov_b32	$s17, $c1, $s12, $s17;
	cmov_b32	$s15, $c1, $s18, $s13;
	add_ftz_f32	$s14, $s19, $s14;
	sub_ftz_f32	$s9, $s14, $s9;
	add_ftz_f32	$s12, $s13, $s9;
	cmov_b32	$s12, $c1, $s16, $s12;
	cmov_b32	$s13, $c1, $s10, $s14;
	cmov_b32	$s10, $c1, $s11, $s9;
	and_b32	$s8, $s8, 4294963200;
	mov_b32	$s9, $s8;
	cvt_ftz_s32_f32	$s8, $s9;
	sub_u32	$s8, $s2, $s8;
	cvt_near_f32_s32	$s8, $s8;
	sub_ftz_f32	$s11, $s10, $s17;
	sub_ftz_f32	$s11, $s13, $s11;
	sub_ftz_f32	$s13, $s15, $s12;
	add_ftz_f32	$s10, $s10, $s13;
	add_ftz_f32	$s11, $s11, $s10;
	mov_b32	$s10, $s12;
	and_b32	$s10, $s10, 4294963200;
	sub_ftz_f32	$s12, $s12, $s10;
	add_ftz_f32	$s11, $s11, $s12;
	mul_ftz_f32	$s12, $s8, $s11;
	nfma_f32	$s8, $s10, $s8, $s12;
	nfma_f32	$s11, $s11, $s9, $s8;
	nfma_f32	$s8, $s9, $s10, $s11;
	neg_f32	$s12, $s8;
	nfma_f32	$s9, $s9, $s10, $s12;
	add_ftz_f32	$s11, $s11, $s9;
	cmp_gt_ftz_b1_f32	$c1, $s11, 0Fb482e308;
	cmp_eq_ftz_b1_f32	$c2, $s8, 0F42b17218;
	and_b1	$c1, $c2, $c1;
	mul_ftz_f32	$s9, $s8, 0F42b8aa3b;
	cvt_ftz_s32_f32	$s12, $s9;
	shr_s32	$s10, $s12, 6;
	cmp_eq_b1_s32	$c2, $s10, -126;
	cmov_b32	$s9, $c2, 1, $s10;
	cmp_gt_ftz_b1_f32	$c2, $s8, 0F42b17218;
	or_b1	$c1, $c2, $c1;
	cvt_near_f32_s32	$s13, $s12;
	nfma_f32	$s14, $s13, 0Fbc310000, $s8;
	nfma_f32	$s13, $s13, 0Fb7e42fef, $s14;
	add_ftz_f32	$s11, $s11, $s13;
	nfma_f32	$s13, $s11, 0F3d2aaaab, 0F3e2aaaab;
	nfma_f32	$s13, $s13, $s11, 0F3f000000;
	mul_ftz_f32	$s14, $s11, $s11;
	nfma_f32	$s11, $s13, $s14, $s11;
	and_b32	$s12, $s12, 63;
	cvt_u64_u32	$d0, $s12;
	shl_u64	$d0, $d0, 3;
	ld_v2_readonly_align(8)_f32	($s13, $s12), [&__math32_EXP_TBL_EP][$d0];
	nfma_f32	$s14, $s12, $s11, $s12;
	sub_u32	$s12, 4294967170, $s9;
	shl_u32	$s10, $s10, 23;
	nfma_f32	$s11, $s13, $s11, $s14;
	add_ftz_f32	$s11, $s13, $s11;
	add_u32	$s10, $s11, $s10;
	and_b32	$s11, $s11, 8388607;
	or_b32	$s11, $s11, 8388608;
	shr_u32	$s11, $s11, $s12;
	cmp_lt_b1_s32	$c2, $s9, -125;
	cmov_b32	$s9, $c2, $s11, $s10;
	cmov_b32	$s9, $c1, 2139095040, $s9;
	cmp_lt_ftz_b1_f32	$c1, $s8, 0Fc2ce8ed0;
	cmov_b32	$s8, $c1, 0, $s9;
	mov_b32	$s9, $s8;
	xor_b32	$s9, $s9, 2147483648;
	cmov_b32	$s8, $c0, $s9, $s8;
	cmov_b32	$s4, $c7, $s4, $s8;
	xor_b32	$s5, $s5, 1;
	and_b32	$s7, $s7, $s5;
	cmp_ne_b1_s32	$c0, $s7, 0;
	cmov_b32	$s4, $c0, 2139095040, $s4;
	and_b32	$s5, $s6, $s5;
	cmp_ne_b1_s32	$c0, $s5, 0;
	cmov_b32	$s4, $c0, 0, $s4;
	cmov_b32	$s3, $c6, $s3, $s4;
	cmov_b32	$s3, $c5, 2147483648, $s3;
	cmov_b32	$s3, $c4, 0, $s3;
	cmov_b32	$s3, $c3, 4286578688, $s3;
	ld_spill_align(4)_u32	$s4, [%__spillStack][12];
	cvt_b1_u32	$c0, $s4;
	cmov_b32	$s3, $c0, 2139095040, $s3;
	ld_spill_align(4)_u32	$s4, [%__spillStack][8];
	cvt_b1_u32	$c0, $s4;
	cmov_b32	$s3, $c0, 0, $s3;
	ld_spill_align(4)_u32	$s4, [%__spillStack];
	cvt_b1_u32	$c0, $s4;
	cmov_b32	$s3, $c0, 2139095040, $s3;
	cmp_gt_b1_u32	$c0, $s1, 2139095040;
	cmov_b32	$s0, $c0, $s0, $s3;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmov_b32	$s0, $c0, 1065353216, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_pown];
	ret;
};


decl function &_gcc_lgamma_r(arg_f32 %ret)(
	arg_f32 %x,
	arg_u64 %signp);


function &_gcc_lgamma_r(arg_f32 %_gcc_lgamma_r)(
	arg_f32 %x,
	arg_u64 %signp)
{

@_gcc_lgamma_r_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%x];
	mov_b32	$s1, $s0;
	and_b32	$s2, $s1, 2147483647;
	ld_arg_align(8)_u64	$d0, [%signp];
	cmp_lt_b1_u32	$c0, $s2, 2139095040;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	cvt_u32_u64	$s1, $d0;
	st_private_align(4)_u32	1, [$s1];
	br	@BB0_23;

@BB0_2:
	mov_b32	$s3, $s2;
	cmp_geu_ftz_b1_f32	$c0, $s3, 0F1c800000;
	cbr_b1	$c0, @BB0_4;
	// BB#3:
	cvt_u32_u64	$s0, $d0;
	nlog2_f32	$s2, $s3;
	mov_b32	$s3, $s2;
	and_b32	$s3, $s3, 4294963200;
	sub_ftz_f32	$s4, $s2, $s3;
	mul_ftz_f32	$s5, $s4, 0F3805fdf4;
	nfma_f32	$s5, $s3, 0F3805fdf4, $s5;
	nfma_f32	$s4, $s4, 0F3f317000, $s5;
	nfma_f32	$s3, $s3, 0F3f317000, $s4;
	class_b1_f32	$c0, $s2, 519;
	cvt_u32_b1	$s4, $c0;
	cmp_ne_b1_s32	$c0, $s4, 0;
	cmov_b32	$s2, $c0, $s2, $s3;
	shr_s32	$s1, $s1, 31;
	or_b32	$s1, $s1, 1;
	st_private_align(4)_u32	$s1, [$s0];
	neg_f32	$s0, $s2;
	br	@BB0_23;

@BB0_4:
	cmp_eq_ftz_b1_f32	$c0, $s3, 0F40000000;
	cmp_eq_ftz_b1_f32	$c1, $s3, 0F3f800000;
	or_b1	$c0, $c1, $c0;
	not_b1	$c0, $c0;
	cbr_b1	$c0, @BB0_6;
	// BB#5:
	mov_b32	$s2, 0;
	br	@BB0_19;

@BB0_6:
	cmp_geu_ftz_b1_f32	$c0, $s3, 0F40000000;
	cbr_b1	$c0, @BB0_14;
	// BB#7:
	sub_ftz_f32	$s2, 0F40000000, $s3;
	add_ftz_f32	$s4, $s3, 0Fbfbb16c3;
	cmp_lt_ftz_b1_f32	$c0, $s3, 0F3fdda618;
	cmov_b32	$s2, $c0, $s4, $s2;
	cvt_u32_b1	$s5, $c0;
	add_ftz_f32	$s4, $s3, 0Fbf800000;
	cmp_lt_ftz_b1_f32	$c0, $s3, 0F3f9da620;
	cmov_b32	$s4, $c0, $s4, $s2;
	cmov_b32	$s2, $c0, 2, $s5;
	nlog2_f32	$s5, $s3;
	mov_b32	$s6, $s5;
	and_b32	$s6, $s6, 4294963200;
	sub_ftz_f32	$s7, $s5, $s6;
	mul_ftz_f32	$s8, $s7, 0F3805fdf4;
	nfma_f32	$s8, $s6, 0F3805fdf4, $s8;
	nfma_f32	$s7, $s7, 0F3f317000, $s8;
	nfma_f32	$s6, $s6, 0F3f317000, $s7;
	class_b1_f32	$c0, $s5, 519;
	cvt_u32_b1	$s7, $c0;
	cmp_ne_b1_s32	$c0, $s7, 0;
	cmov_b32	$s5, $c0, $s5, $s6;
	sub_ftz_f32	$s6, 0F3f800000, $s3;
	cmp_le_ftz_b1_f32	$c0, $s3, 0F3f666666;
	cmov_b32	$s4, $c0, $s6, $s4;
	add_ftz_f32	$s6, $s3, 0Fbeec5b0c;
	cmp_lt_ftz_b1_f32	$c1, $s3, 0F3f3b4a20;
	cmov_b32	$s4, $c1, $s6, $s4;
	cmov_b32	$s2, $c0, 0, $s2;
	cmov_b32	$s6, $c1, 1, $s2;
	neg_f32	$s2, $s5;
	cmov_b32	$s2, $c0, $s2, 0;
	cmp_lt_ftz_b1_f32	$c0, $s3, 0F3e6d3308;
	cmov_b32	$s3, $c0, $s3, $s4;
	cmov_b32	$s4, $c0, 2, $s6;
	cmp_eq_b1_s32	$c0, $s4, 2;
	cbr_b1	$c0, @BB0_13;
	// BB#8:
	cmp_ne_b1_s32	$c0, $s4, 1;
	cbr_b1	$c0, @BB0_9;
	// BB#12:
	mul_ftz_f32	$s4, $s3, $s3;
	mul_ftz_f32	$s5, $s3, $s4;
	nfma_f32	$s6, $s5, 0Fb9a3f927, 0F3a66f867;
	nfma_f32	$s6, $s5, $s6, 0Fbb7177fe;
	nfma_f32	$s7, $s5, $s6, 0F3c93373d;
	nfma_f32	$s6, $s5, 0F39a57b6b, 0Fbab7f476;
	nfma_f32	$s6, $s5, $s6, 0F3bc7e707;
	nfma_f32	$s6, $s5, $s6, 0Fbd064d47;
	nfma_f32	$s6, $s5, $s6, 0F3ef7b95e;
	nfma_f32	$s7, $s5, $s7, 0Fbe17213c;
	nfma_f32	$s8, $s5, 0F39afe9f7, 0Fba0d3085;
	nfma_f32	$s8, $s5, $s8, 0F3b141699;
	nfma_f32	$s8, $s5, $s8, 0Fbc28fcfe;
	nfma_f32	$s8, $s5, $s8, 0F3d845a15;
	nfma_f32	$s3, $s3, $s8, $s7;
	neg_f32	$s3, $s3;
	nfma_f32	$s3, $s5, $s3, 0F31e61c52;
	neg_f32	$s3, $s3;
	nfma_f32	$s3, $s4, $s6, $s3;
	add_ftz_f32	$s3, $s3, 0Fbdf8cdcd;
	add_ftz_f32	$s2, $s2, $s3;
	br	@BB0_19;

@BB0_14:
	cmp_geu_ftz_b1_f32	$c0, $s3, 0F41000000;
	cbr_b1	$c0, @BB0_16;
	// BB#15:
	cvt_ftz_s32_f32	$s4, $s3;
	cvt_near_f32_s32	$s2, $s4;
	sub_ftz_f32	$s2, $s3, $s2;
	add_ftz_f32	$s3, $s2, 0F40000000;
	cmp_gt_b1_s32	$c0, $s4, 2;
	cmov_b32	$s3, $c0, $s3, 1065353216;
	add_ftz_f32	$s5, $s2, 0F40400000;
	cmp_gt_b1_s32	$c0, $s4, 3;
	cmov_b32	$s5, $c0, $s5, 1065353216;
	add_ftz_f32	$s6, $s2, 0F40800000;
	cmp_gt_b1_s32	$c0, $s4, 4;
	cmov_b32	$s6, $c0, $s6, 1065353216;
	add_ftz_f32	$s7, $s2, 0F40a00000;
	cmp_gt_b1_s32	$c0, $s4, 5;
	cmov_b32	$s7, $c0, $s7, 1065353216;
	add_ftz_f32	$s8, $s2, 0F40c00000;
	cmp_gt_b1_s32	$c0, $s4, 6;
	cmov_b32	$s4, $c0, $s8, 1065353216;
	mul_ftz_f32	$s4, $s4, $s7;
	mul_ftz_f32	$s4, $s6, $s4;
	mul_ftz_f32	$s4, $s5, $s4;
	mul_ftz_f32	$s3, $s3, $s4;
	nlog2_f32	$s3, $s3;
	mov_b32	$s4, $s3;
	and_b32	$s4, $s4, 4294963200;
	sub_ftz_f32	$s5, $s3, $s4;
	mul_ftz_f32	$s6, $s5, 0F3805fdf4;
	nfma_f32	$s6, $s4, 0F3805fdf4, $s6;
	nfma_f32	$s5, $s5, 0F3f317000, $s6;
	nfma_f32	$s4, $s4, 0F3f317000, $s5;
	class_b1_f32	$c0, $s3, 519;
	cvt_u32_b1	$s5, $c0;
	cmp_ne_b1_s32	$c0, $s5, 0;
	cmov_b32	$s3, $c0, $s3, $s4;
	nfma_f32	$s4, $s2, 0F3805ff67, 0F3af135b4;
	nfma_f32	$s4, $s2, $s4, 0F3cda40e4;
	nfma_f32	$s4, $s2, $s4, 0F3e15dce6;
	nfma_f32	$s4, $s2, $s4, 0F3ea6cc7a;
	nfma_f32	$s4, $s2, $s4, 0F3e5c245a;
	nfma_f32	$s4, $s2, $s4, 0Fbd9e233f;
	mul_ftz_f32	$s4, $s2, $s4;
	nfma_f32	$s5, $s2, 0F36f5d7bd, 0F3a4beed6;
	nfma_f32	$s5, $s2, $s5, 0F3c98bf54;
	nfma_f32	$s5, $s2, $s5, 0F3e300f6e;
	nfma_f32	$s5, $s2, $s5, 0F3f38d0c5;
	nfma_f32	$s5, $s2, $s5, 0F3fb22d3b;
	nfma_f32	$s5, $s2, $s5, 0F3f800000;
	nrcp_f32	$s5, $s5;
	mul_ftz_f32	$s4, $s4, $s5;
	nfma_f32	$s2, $s2, 0F3f000000, $s4;
	add_ftz_f32	$s2, $s2, $s3;
	br	@BB0_19;

@BB0_16:
	nlog2_f32	$s2, $s3;
	mov_b32	$s4, $s2;
	and_b32	$s4, $s4, 4294963200;
	sub_ftz_f32	$s5, $s2, $s4;
	mul_ftz_f32	$s6, $s5, 0F3805fdf4;
	nfma_f32	$s6, $s4, 0F3805fdf4, $s6;
	nfma_f32	$s5, $s5, 0F3f317000, $s6;
	nfma_f32	$s4, $s4, 0F3f317000, $s5;
	cmp_geu_ftz_b1_f32	$c0, $s3, 0F5c800000;
	cbr_b1	$c0, @BB0_18;
	// BB#17:
	class_b1_f32	$c0, $s2, 519;
	cvt_u32_b1	$s5, $c0;
	cmp_ne_b1_s32	$c0, $s5, 0;
	cmov_b32	$s5, $c0, $s2, $s4;
	gcn_divrelaxednarrow_f32	$s2, 0F3f800000, $s3;
	mul_ftz_f32	$s4, $s2, $s2;
	nfma_f32	$s6, $s4, 0Fbad5c4e8, 0F3a5b3dd2;
	nfma_f32	$s6, $s4, $s6, 0Fba1c065c;
	add_ftz_f32	$s3, $s3, 0Fbf000000;
	add_ftz_f32	$s5, $s5, 0Fbf800000;
	nfma_f32	$s6, $s4, $s6, 0F3a500cfd;
	nfma_f32	$s6, $s4, $s6, 0Fbb360b61;
	nfma_f32	$s4, $s4, $s6, 0F3daaaaab;
	nfma_f32	$s2, $s2, $s4, 0F3ed67f1d;
	nfma_f32	$s2, $s3, $s5, $s2;
	br	@BB0_19;

@BB0_13:
	nfma_f32	$s4, $s3, 0F3c5b3c5e, 0F3e6a7578;
	nfma_f32	$s4, $s3, $s4, 0F3f7a4bb2;
	nfma_f32	$s4, $s3, $s4, 0F3fba3ae7;
	nfma_f32	$s4, $s3, $s4, 0F3f2200f4;
	nfma_f32	$s4, $s3, $s4, 0Fbd9e233f;
	mul_ftz_f32	$s4, $s3, $s4;
	nfma_f32	$s5, $s3, 0F3b52d5db, 0F3dd572af;
	nfma_f32	$s5, $s3, $s5, 0F3f44efdf;
	nfma_f32	$s5, $s3, $s5, 0F4008392d;
	nfma_f32	$s5, $s3, $s5, 0F401d2ebe;
	nfma_f32	$s5, $s3, $s5, 0F3f800000;
	nrcp_f32	$s5, $s5;
	mul_ftz_f32	$s4, $s4, $s5;
	br	@BB0_11;

@BB0_9:
	cmp_ne_b1_s32	$c0, $s4, 0;
	cbr_b1	$c0, @BB0_19;
	// BB#10:
	mul_ftz_f32	$s4, $s3, $s3;
	nfma_f32	$s5, $s4, 0F37d383a2, 0F39679767;
	nfma_f32	$s5, $s4, $s5, 0F3a9c54a1;
	nfma_f32	$s5, $s4, $s5, 0F3bf2027e;
	nfma_f32	$s5, $s4, $s5, 0F3d89f001;
	nfma_f32	$s5, $s4, $s5, 0F3d9e233f;
	nfma_f32	$s6, $s4, 0F383c2c75, 0F38e28445;
	nfma_f32	$s6, $s4, $s6, 0F3a05b634;
	nfma_f32	$s6, $s4, $s6, 0F3b3d6ec6;
	nfma_f32	$s6, $s4, $s6, 0F3ca89915;
	nfma_f32	$s6, $s4, $s6, 0F3ea51a66;
	mul_ftz_f32	$s4, $s4, $s6;
	nfma_f32	$s4, $s3, $s5, $s4;

@BB0_11:
	nfma_f32	$s3, $s3, 0Fbf000000, $s4;
	add_ftz_f32	$s2, $s2, $s3;
	br	@BB0_19;

@BB0_18:
	class_b1_f32	$c0, $s2, 519;
	cvt_u32_b1	$s5, $c0;
	cmp_ne_b1_s32	$c0, $s5, 0;
	cmov_b32	$s2, $c0, $s2, $s4;
	add_ftz_f32	$s2, $s2, 0Fbf800000;
	mul_ftz_f32	$s2, $s3, $s2;

@BB0_19:
	cmp_geu_ftz_b1_f32	$c0, $s0, 0F00000000;
	cbr_b1	$c0, @BB0_20;
	// BB#21:
	and_b32	$s3, $s1, 2147483648;
	xor_b32	$s1, $s3, $s1;
	mov_b32	$s5, $s1;
	cvt_ftz_s32_f32	$s4, $s5;
	cvt_near_f32_s32	$s6, $s4;
	sub_ftz_f32	$s5, $s5, $s6;
	sub_ftz_f32	$s6, 0F3f800000, $s5;
	add_ftz_f32	$s7, $s5, 0Fbf000000;
	cmp_le_ftz_b1_f32	$c0, $s5, 0F3f400000;
	cmov_b32	$s6, $c0, $s7, $s6;
	sub_ftz_f32	$s7, 0F3f000000, $s5;
	cmp_lt_ftz_b1_f32	$c1, $s5, 0F3f000000;
	cmov_b32	$s6, $c1, $s7, $s6;
	cmp_le_ftz_b1_f32	$c1, $s5, 0F3e800000;
	cmov_b32	$s6, $c1, $s5, $s6;
	cmp_gtu_ftz_b1_f32	$c1, $s5, 0F3e800000;
	and_b1	$c0, $c0, $c1;
	cmp_lt_b1_s32	$c1, $s1, 2139095040;
	cmov_b32	$s5, $c1, $s3, 2143289344;
	mul_ftz_f32	$s7, $s6, 0F40490fdb;
	mul_ftz_f32	$s6, $s7, $s7;
	mul_ftz_f32	$s8, $s7, $s6;
	nfma_f32	$s9, $s6, 0F3636df25, 0Fb95009d4;
	nfma_f32	$s9, $s6, $s9, 0F3c088887;
	nfma_f32	$s9, $s6, $s9, 0Fbe2aaaab;
	nfma_f32	$s7, $s8, $s9, $s7;
	nfma_f32	$s8, $s6, 0Fb492923a, 0F37d00ae3;
	nfma_f32	$s8, $s6, $s8, 0Fbab60b60;
	nfma_f32	$s8, $s6, $s8, 0F3d2aaaab;
	nfma_f32	$s9, $s6, 0Fbf000000, 0F3f800000;
	mul_ftz_f32	$s6, $s6, $s6;
	nfma_f32	$s6, $s6, $s8, $s9;
	cmov_b32	$s6, $c0, $s6, $s7;
	shl_u32	$s4, $s4, 31;
	xor_b32	$s3, $s4, $s3;
	mov_b32	$s4, $s6;
	xor_b32	$s3, $s3, $s4;
	cmp_lt_b1_s32	$c0, $s1, 1258291200;
	cmov_b32	$s1, $c0, $s3, $s5;
	mov_b32	$s3, $s1;
	cmp_lt_ftz_b1_f32	$c0, $s3, 0F00000000;
	cmov_b32	$s1, $c0, 4294967295, 1;
	mul_ftz_f32	$s0, $s3, $s0;
	abs_f32	$s0, $s0;
	gcn_divrelaxed_ftz_f32	$s0, 0F40490fdb, $s0;
	nlog2_f32	$s0, $s0;
	mov_b32	$s4, $s0;
	and_b32	$s4, $s4, 4294963200;
	sub_ftz_f32	$s5, $s0, $s4;
	mul_ftz_f32	$s6, $s5, 0F3805fdf4;
	nfma_f32	$s6, $s4, 0F3805fdf4, $s6;
	nfma_f32	$s5, $s5, 0F3f317000, $s6;
	nfma_f32	$s4, $s4, 0F3f317000, $s5;
	class_b1_f32	$c0, $s0, 519;
	cvt_u32_b1	$s5, $c0;
	cmp_ne_b1_s32	$c0, $s5, 0;
	cmov_b32	$s0, $c0, $s0, $s4;
	sub_ftz_f32	$s0, $s0, $s2;
	cmp_eq_ftz_b1_f32	$c0, $s3, 0F00000000;
	cmov_b32	$s0, $c0, 2139095040, $s0;
	br	@BB0_22;

@BB0_20:
	mov_b32	$s1, 1;
	mov_b32	$s0, $s2;

@BB0_22:
	cvt_u32_u64	$s2, $d0;
	st_private_align(4)_u32	$s1, [$s2];

@BB0_23:
	st_arg_align(4)_f32	$s0, [%_gcc_lgamma_r];
	ret;
};


decl function &_gcc_atan2(arg_f32 %ret)(
	arg_f32 %y,
	arg_f32 %x);


function &_gcc_atan2(arg_f32 %_gcc_atan2)(
	arg_f32 %y,
	arg_f32 %x)
{

@_gcc_atan2_entry:
	// BB#0:
	ld_arg_align(4)_f32	$s0, [%y];
	ld_arg_align(4)_f32	$s1, [%x];
	class_b1_f32	$c0, $s1, 3;
	cvt_u32_b1	$s2, $c0;
	class_b1_f32	$c0, $s0, 3;
	cvt_u32_b1	$s3, $c0;
	or_b32	$s2, $s3, $s2;
	abs_f32	$s3, $s0;
	abs_f32	$s4, $s1;
	gcn_max_f32	$s8, $s4, $s3;
	cmp_gt_ftz_b1_f32	$c0, $s8, 0F6f800000;
	cmov_b32	$s7, $c0, 796917760, 1065353216;
	cmp_eq_ftz_b1_f32	$c0, $s3, 0F7f800000;
	cmp_eq_ftz_b1_f32	$c1, $s4, 0F7f800000;
	and_b1	$c0, $c1, $c0;
	cmp_gt_ftz_b1_f32	$c1, $s1, 0F00000000;
	cmov_b32	$s5, $c1, 1061752795, 1075235812;
	mov_b32	$s6, $s1;
	cmp_lt_b1_s32	$c1, $s6, 0;
	cmov_b32	$s6, $c1, 1078530011, 0;
	mul_ftz_f32	$s8, $s8, $s7;
	nrcp_f32	$s8, $s8;
	gcn_min_f32	$s9, $s4, $s3;
	mul_ftz_f32	$s8, $s9, $s8;
	mul_ftz_f32	$s7, $s7, $s8;
	mul_ftz_f32	$s8, $s7, $s7;
	nfma_f32	$s9, $s8, 0Fbb3f0fbc, 0Fbe3e8dcc;
	nfma_f32	$s9, $s8, $s9, 0Fbeaaaa68;
	mul_ftz_f32	$s9, $s9, $s8;
	mul_ftz_f32	$s9, $s7, $s9;
	nfma_f32	$s10, $s8, 0F3e8d38a6, 0F3f943e2b;
	nfma_f32	$s8, $s8, $s10, 0F3f800000;
	nrcp_f32	$s8, $s8;
	nfma_f32	$s7, $s9, $s8, $s7;
	sub_ftz_f32	$s8, 0F3fc90fdb, $s7;
	cmp_gt_ftz_b1_f32	$c1, $s3, $s4;
	cmov_b32	$s3, $c1, $s8, $s7;
	sub_ftz_f32	$s4, 0F40490fdb, $s3;
	cmp_lt_ftz_b1_f32	$c1, $s1, 0F00000000;
	cmov_b32	$s1, $c1, $s4, $s3;
	cmp_eq_ftz_b1_f32	$c1, $s0, 0F00000000;
	cmov_b32	$s1, $c1, $s6, $s1;
	cmov_b32	$s1, $c0, $s5, $s1;
	and_b32	$s2, $s2, 1;
	cvt_b1_u32	$c0, $s2;
	cmov_b32	$s1, $c0, 2143289344, $s1;
	copysign_f32	$s0, $s1, $s0;
	st_arg_align(4)_f32	$s0, [%_gcc_atan2];
	ret;
};

