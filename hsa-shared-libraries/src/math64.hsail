
decl function &_gcc_nan(arg_f64 %ret)(arg_u64 %nancode);


function &_gcc_nan(arg_f64 %_gcc_nan)(arg_u64 %nancode)
{

@_gcc_nan_entry:
	// BB#0:
	ld_arg_align(8)_u64	$d0, [%nancode];
	and_b64	$d0, $d0, 2251799813685247;
	or_b64	$d0, $d0, 9221120237041090560;
	st_arg_align(8)_f64	$d0, [%_gcc_nan];
	ret;
};


decl function &_gcc_ilogb(arg_u32 %ret)(arg_f64 %x);


function &_gcc_ilogb(arg_u32 %_gcc_ilogb)(arg_f64 %x)
{

@_gcc_ilogb_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	cvt_u32_u64	$s0, $d0;
	firstbit_u32_u32	$s1, $s0;
	add_u32	$s1, $s1, 32;
	cmp_eq_b1_s32	$c0, $s0, 0;
	cmov_b32	$s0, $c0, 64, $s1;
	shr_u64	$d1, $d0, 32;
	cvt_u32_u64	$s1, $d1;
	and_b32	$s1, $s1, 1048575;
	firstbit_u32_u32	$s2, $s1;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b32	$s0, $c0, $s0, $s2;
	sub_u32	$s0, 4294966285, $s0;
	and_b64	$d0, $d0, 9223372036854775807;
	shr_u64	$d1, $d0, 52;
	cvt_u32_u64	$s1, $d1;
	add_u32	$s1, $s1, 4294966273;
	cmp_lt_b1_u64	$c0, $d0, 4503599627370496;
	cmov_b32	$s0, $c0, $s0, $s1;
	cmp_eq_b1_s64	$c0, $d0, 0;
	cmp_gt_b1_u64	$c1, $d0, 9218868437227405312;
	or_b1	$c0, $c1, $c0;
	cmov_b32	$s0, $c0, 2147483648, $s0;
	cmp_eq_b1_s64	$c0, $d0, 9218868437227405312;
	cmov_b32	$s0, $c0, 2147483647, $s0;
	st_arg_align(4)_u32	$s0, [%_gcc_ilogb];
	ret;
};


decl function &_gcc_round(arg_f64 %ret)(arg_f64 %x);


function &_gcc_round(arg_f64 %_gcc_round)(arg_f64 %x)
{

@_gcc_round_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	shr_u64	$d1, $d0, 52;
	cvt_u32_u64	$s0, $d1;
	and_b32	$s0, $s0, 2047;
	add_u32	$s0, $s0, 4294966273;
	cvt_u64_u32	$d1, $s0;
	and_b64	$d1, $d1, 63;
	cvt_u32_u64	$s1, $d1;
	shr_u64	$d1, 4503599627370495, $s1;
	and_b64	$d2, $d1, $d0;
	shr_u64	$d3, 2251799813685248, $s1;
	cmp_ne_b1_s64	$c0, $d2, 0;
	cmov_b64	$d2, $c0, $d3, 0;
	cmp_eq_b1_s32	$c0, $s0, -1;
	cmov_b64	$d3, $c0, 4607182418800017408, 0;
	and_b64	$d4, $d0, 9223372036854775808;
	or_b64	$d3, $d3, $d4;
	add_u64	$d2, $d2, $d0;
	not_b64	$d1, $d1;
	and_b64	$d1, $d2, $d1;
	cmp_lt_b1_s32	$c0, $s0, 0;
	cmov_b64	$d1, $c0, $d3, $d1;
	cmp_gt_b1_s32	$c0, $s0, 51;
	cmov_b64	$d0, $c0, $d0, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_round];
	ret;
};


decl function &_gcc_fract(arg_f64 %ret)(
	arg_f64 %x,
	arg_u64 %ip);


function &_gcc_fract(arg_f64 %_gcc_fract)(
	arg_f64 %x,
	arg_u64 %ip)
{

@_gcc_fract_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	floor_f64	$d1, $d0;
	ld_arg_align(8)_u64	$d2, [%ip];
	st_align(8)_f64	$d1, [$d2];
	fract_f64	$d0, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_fract];
	ret;
};

align(16) readonly_f64 &__math64_TWO_TO_JBY64_EP[128] = f64[](0D3ff0000000000000, 0D0000000000000000, 0D3ff02c9a30000000, 0D3e6cef00c1dcdef9, 0D3ff059b0d0000000, 0D3e48ac2ba1d73e2a, 0D3ff0874510000000, 0D3e60eb37901186be, 0D3ff0b55860000000, 0D3e69f3121ec53172, 0D3ff0e3ec30000000, 0D3e469e8d10103a17, 0D3ff11301d0000000, 0D3df25b50a4ebbf1a, 0D3ff1429aa0000000, 0D3e6d525bbf668203, 0D3ff172b830000000, 0D3e68faa2f5b9bef9, 0D3ff1a35be0000000, 0D3e66df96ea796d31, 0D3ff1d48730000000, 0D3e368b9aa7805b80, 0D3ff2063b80000000, 0D3e60c519ac771dd6, 0D3ff2387a60000000, 0D3e6ceac470cd83f5, 0D3ff26b4560000000, 0D3e5789f37495e99c, 0D3ff29e9df0000000, 0D3e547f7b84b09745, 0D3ff2d285a0000000, 0D3e5b900c2d002475, 0D3ff306fe00000000, 0D3e64636e2a5bd1ab, 0D3ff33c08b0000000, 0D3e4320b7fa64e430, 0D3ff371a730000000, 0D3e5ceaa72a9c5154, 0D3ff3a7db30000000, 0D3e53967fdba86f24, 0D3ff3dea640000000, 0D3e682468446b6824, 0D3ff4160a20000000, 0D3e3f72e29f84325b, 0D3ff44e0860000000, 0D3e18624b40c4dbd0, 0D3ff486a2b0000000, 0D3e5704f3404f068e, 0D3ff4bfdad0000000, 0D3e54d8a89c750e5e, 0D3ff4f9b270000000, 0D3e5a74b29ab4cf62, 0D3ff5342b50000000, 0D3e5a753e077c2a0f, 0D3ff56f4730000000, 0D3e5ad49f699bb2c0, 0D3ff5ab07d0000000, 0D3e6a90a852b19260, 0D3ff5e76f10000000, 0D3e56b48521ba6f93, 0D3ff6247eb0000000, 0D3e0d2ac258f87d03, 0D3ff6623880000000, 0D3e42a91124893ecf, 0D3ff6a09e60000000, 0D3e59fcef32422cbe, 0D3ff6dfb230000000, 0D3e68ca345de441c5, 0D3ff71f75e0000000, 0D3e61d8bee7ba46e1, 0D3ff75feb50000000, 0D3e59099f22fdba6a, 0D3ff7a11470000000, 0D3e4f580c36bea881, 0D3ff7e2f330000000, 0D3e5b3d398841740a, 0D3ff8258990000000, 0D3e62999c25159f11, 0D3ff868d990000000, 0D3e668925d901c83b, 0D3ff8ace540000000, 0D3e415506dadd3e2a, 0D3ff8f1ae90000000, 0D3e622aee6c57304e, 0D3ff93737b0000000, 0D3e29b8bc9e8a0387, 0D3ff97d8290000000, 0D3e6fbc9c9f173d24, 0D3ff9c49180000000, 0D3e451f8480e3e235, 0D3ffa0c6670000000, 0D3e66bbcac96535b5, 0D3ffa5503b0000000, 0D3e41f12ae45a1224, 0D3ffa9e6b50000000, 0D3e55e7f6fd0fac90, 0D3ffae89f90000000, 0D3e62b5a75abd0e69, 0D3ffb33a2b0000000, 0D3e609e2bf5ed7fa1, 0D3ffb7f76f0000000, 0D3e47daf237553d84, 0D3ffbcc1e90000000, 0D3e12f074891ee83d, 0D3ffc199bd0000000, 0D3e6b0aa538444196, 0D3ffc67f120000000, 0D3e6cafa29694426f, 0D3ffcb720d0000000, 0D3e69df20d22a0797, 0D3ffd072d40000000, 0D3e640f12f71a1e45, 0D3ffd5818d0000000, 0D3e69f7490e4bb40b, 0D3ffda9e600000000, 0D3e4ed9942b84600d, 0D3ffdfc9730000000, 0D3e4bdcdaf5cb4656, 0D3ffe502ee0000000, 0D3e5e2cffd89cf44c, 0D3ffea4afa0000000, 0D3e452486cc2c7b9d, 0D3ffefa1be0000000, 0D3e6cc2b44eee3fa4, 0D3fff507650000000, 0D3e66dc8a80ce9f09, 0D3fffa7c180000000, 0D3e39e90d82e90a7e);

decl function &_gcc_exp2(arg_f64 %ret)(arg_f64 %x);


function &_gcc_exp2(arg_f64 %_gcc_exp2)(arg_f64 %x)
{

@_gcc_exp2_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s0, $s0, 1;
	mul_f64	$d1, $d0, 0D4050000000000000;
	cvt_s32_f64	$s1, $d1;
	cvt_near_f64_s32	$d1, $s1;
	fma_f64	$d1, 0Dbf90000000000000, $d1, $d0;
	mul_f64	$d1, $d1, 0D3fe62e42fefa39ef;
	fma_f64	$d2, $d1, 0D3f56c16c16c16c17, 0D3f81111111111111;
	fma_f64	$d2, $d1, $d2, 0D3fa5555555555555;
	fma_f64	$d2, $d1, $d2, 0D3fc5555555555555;
	fma_f64	$d2, $d1, $d2, 0D3fe0000000000000;
	and_b32	$s2, $s1, 63;
	fma_f64	$d2, $d1, $d2, 0D3ff0000000000000;
	cvt_u64_u32	$d3, $s2;
	mul_f64	$d1, $d1, $d2;
	shl_u64	$d4, $d3, 4;
	ld_v2_readonly_align(16)_f64	($d2, $d3), [&__math64_TWO_TO_JBY64_EP][$d4];
	add_f64	$d4, $d2, $d3;
	fma_f64	$d1, $d4, $d1, $d3;
	add_f64	$d1, $d1, $d2;
	mul_f64	$d2, $d1, 0D4340000000000000;
	mov_b64	$d3, $d2;
	shr_u64	$d2, $d3, 52;
	cvt_u32_u64	$s2, $d2;
	and_b32	$s2, $s2, 2047;
	add_u32	$s2, $s2, 4294967243;
	mov_b64	$d2, $d1;
	shr_u64	$d4, $d2, 52;
	cvt_u32_u64	$s3, $d4;
	and_b32	$s3, $s3, 2047;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cmov_b32	$s5, $c0, $s2, $s3;
	cmov_b64	$d3, $c0, $d3, $d2;
	shr_s32	$s2, $s1, 6;
	cmp_eq_b1_s32	$c0, $s2, -1022;
	cmp_lt_b1_f64	$c1, $d1, 0D3ff0000000000000;
	and_b1	$c0, $c0, $c1;
	cmp_eq_b1_s32	$c1, $s2, 0;
	cmp_eq_b1_f64	$c2, $d1, 0D0000000000000000;
	or_b1	$c1, $c1, $c2;
	class_b1_f64	$c2, $d1, 516;
	cvt_u32_b1	$s3, $c2;
	and_b32	$s3, $s3, 1;
	cvt_u32_b1	$s4, $c1;
	cmp_lt_b1_s32	$c1, $s2, -1022;
	or_b1	$c0, $c1, $c0;
	and_b64	$d3, $d3, 9227875636482146303;
	add_u32	$s5, $s5, $s2;
	max_s32	$s5, $s5, -2047;
	min_s32	$s5, $s5, 2047;
	cvt_u64_u32	$d4, $s5;
	shl_u64	$d4, $d4, 52;
	or_b64	$d4, $d3, $d4;
	add_u32	$s6, $s5, 53;
	cvt_u64_u32	$d5, $s6;
	shl_u64	$d5, $d5, 52;
	or_b64	$d3, $d3, $d5;
	mul_f64	$d3, $d3, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c1, $s5, 0;
	cmov_b64	$d3, $c1, $d4, $d3;
	and_b64	$d2, $d2, 9223372036854775808;
	or_b64	$d4, $d2, 9218868437227405312;
	cmp_eq_b1_s32	$c1, $s5, 2047;
	cmov_b64	$d3, $c1, $d4, $d3;
	cmp_lt_b1_s32	$c1, $s5, -53;
	cmov_b64	$d2, $c1, $d2, $d3;
	or_b32	$s3, $s4, $s3;
	cmp_ne_b1_s32	$c1, $s3, 0;
	cmov_b64	$d2, $c1, $d1, $d2;
	shr_s32	$s1, $s1, 8;
	sub_u32	$s3, 1023, $s1;
	add_u32	$s2, $s3, $s2;
	cvt_u64_u32	$d3, $s2;
	shl_u64	$d3, $d3, 52;
	add_u32	$s1, $s1, 1023;
	cvt_u64_u32	$d4, $s1;
	shl_u64	$d4, $d4, 52;
	mul_f64	$d1, $d4, $d1;
	mul_f64	$d1, $d3, $d1;
	cmov_b64	$d1, $c0, $d1, $d2;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d1, $c0, $d0, $d1;
	cmp_gt_b1_f64	$c0, $d0, 0D4090000000000000;
	cmov_b64	$d1, $c0, 9218868437227405312, $d1;
	cmp_lt_b1_f64	$c0, $d0, 0Dc090c80000000000;
	cmov_b64	$d0, $c0, 0, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_exp2];
	ret;
};


decl function &_gcc_frexp(arg_f64 %ret)(
	arg_f64 %x,
	arg_u64 %ep);


function &_gcc_frexp(arg_f64 %_gcc_frexp)(
	arg_f64 %x,
	arg_u64 %ep)
{

@_gcc_frexp_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	mov_b64	$d1, $d0;
	and_b64	$d2, $d1, 9223372036854775807;
	cmp_lt_b1_u64	$c0, $d2, 4503599627370496;
	cmp_ne_b1_s64	$c1, $d2, 0;
	and_b1	$c0, $c1, $c0;
	cmov_b32	$s0, $c0, 4294966220, 4294966274;
	or_b64	$d3, $d2, 247697979505377280;
	add_f64	$d3, $d3, 0D8370000000000000;
	cmov_b64	$d2, $c0, $d3, $d2;
	shr_s64	$d3, $d2, 52;
	cvt_u32_u64	$s1, $d3;
	add_u32	$s0, $s0, $s1;
	cmp_eq_b1_s32	$c0, $s0, 1025;
	cmp_eq_b1_s64	$c1, $d2, 0;
	or_b1	$c0, $c0, $c1;
	and_b64	$d1, $d1, 9223372036854775808;
	cmov_b32	$s0, $c0, 0, $s0;
	and_b64	$d2, $d2, 4503599627370495;
	or_b64	$d1, $d1, $d2;
	or_b64	$d1, $d1, 4602678819172646912;
	cmov_b64	$d0, $c0, $d0, $d1;
	ld_arg_align(8)_u64	$d1, [%ep];
	st_align(4)_u32	$s0, [$d1];
	st_arg_align(8)_f64	$d0, [%_gcc_frexp];
	ret;
};


decl function &_gcc_modf(arg_f64 %ret)(
	arg_f64 %x,
	arg_u64 %iptr);


function &_gcc_modf(arg_f64 %_gcc_modf)(
	arg_f64 %x,
	arg_u64 %iptr)
{

@_gcc_modf_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d2, [%x];
	mov_b64	$d0, $d2;
	shr_u64	$d1, $d0, 52;
	cvt_u32_u64	$s0, $d1;
	sub_u32	$s1, 1075, $s0;
	shl_u64	$d1, 18446744073709551615, $s1;
	and_b64	$d1, $d1, $d0;
	mov_b64	$d3, $d1;
	sub_f64	$d4, $d2, $d3;
	and_b64	$d3, $d0, 9223372036854775807;
	and_b64	$d2, $d0, 9223372036854775808;
	and_b32	$s0, $s0, 2047;
	add_u32	$s0, $s0, 4294966273;
	cmp_lt_b1_s32	$c0, $s0, 0;
	cmov_b64	$d4, $c0, $d0, $d4;
	cmp_gt_b1_s32	$c1, $s0, 51;
	cmov_b64	$d4, $c1, $d2, $d4;
	cmp_gt_b1_u64	$c2, $d3, 9218868437227405312;
	cmov_b64	$d3, $c2, $d0, $d4;
	cmov_b64	$d1, $c0, $d2, $d1;
	cmov_b64	$d0, $c1, $d0, $d1;
	ld_arg_align(8)_u64	$d1, [%iptr];
	st_align(8)_u64	$d0, [$d1];
	mov_b64	$d0, $d3;
	st_arg_align(8)_f64	$d0, [%_gcc_modf];
	ret;
};


decl function &_gcc_atanpi(arg_f64 %ret)(arg_f64 %x);


function &_gcc_atanpi(arg_f64 %_gcc_atanpi)(arg_f64 %x)
{

@_gcc_atanpi_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	abs_f64	$d1, $d0;
	mul_f64	$d2, $d1, 0D3ff8000000000000;
	add_f64	$d2, $d2, 0D3ff0000000000000;
	cmp_le_b1_f64	$c0, $d1, 0D4003800000000000;
	cmov_b64	$d2, $c0, $d2, $d1;
	add_f64	$d3, $d1, 0Dbff8000000000000;
	cmov_b64	$d5, $c0, $d3, 13830554455654793216;
	cmov_b64	$d3, $c0, 4354989122426817468, 4364452196894661638;
	cmov_b64	$d6, $c0, 4607027438436873883, 4609753056924675352;
	add_f64	$d4, $d1, 0D3ff0000000000000;
	cmp_le_b1_f64	$c0, $d1, 0D3ff3000000000000;
	cmov_b64	$d4, $c0, $d4, $d2;
	add_f64	$d2, $d1, 0Dbff0000000000000;
	cmov_b64	$d2, $c0, $d2, $d5;
	cmov_b64	$d5, $c0, 4605249457297304856, $d6;
	cmov_b64	$d6, $c0, 4359948597267291142, $d3;
	add_f64	$d7, $d1, $d1;
	add_f64	$d3, $d1, 0D4000000000000000;
	cmp_le_b1_f64	$c0, $d1, 0D3fe6000000000000;
	cmov_b64	$d3, $c0, $d3, $d4;
	add_f64	$d7, $d7, 0Dbff0000000000000;
	cmov_b64	$d4, $c0, 4357843414468748768, $d6;
	cmov_b64	$d5, $c0, 4602023952714414927, $d5;
	cmov_b64	$d6, $c0, $d7, $d2;
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s0, $s0, 1;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d2, $c0, $d0, 4602678819172646912;
	cmp_le_b1_f64	$c0, $d1, 0D3fdc000000000000;
	cmov_b64	$d7, $c0, 4607182418800017408, $d3;
	cmov_b64	$d6, $c0, $d1, $d6;
	cmov_b64	$d3, $c0, 0, $d5;
	cmov_b64	$d4, $c0, 0, $d4;
	div_f64	$d5, $d6, $d7;
	mul_f64	$d6, $d5, $d5;
	mul_f64	$d7, $d5, $d6;
	fma_f64	$d8, $d6, 0D3f22a75ce41b9f87, 0D3f9f2d2116f053f2;
	fma_f64	$d8, $d6, $d8, 0D3fcc3de43db425c0;
	fma_f64	$d8, $d6, $d8, 0D3fdca6be4c993b3c;
	fma_f64	$d8, $d6, $d8, 0D3fd12bcb0a9169f3;
	mul_f64	$d7, $d7, $d8;
	fma_f64	$d8, $d6, 0D3fa3f197f1e85ed9, 0D3fdb2cb05bf9beff;
	fma_f64	$d8, $d6, $d8, 0D3ff699c644c48d2e;
	fma_f64	$d8, $d6, $d8, 0D3ffd372a17cdf5a0;
	fma_f64	$d6, $d6, $d8, 0D3fe9c1b08fda1eec;
	div_f64	$d6, $d7, $d6;
	sub_f64	$d4, $d6, $d4;
	sub_f64	$d4, $d4, $d5;
	sub_f64	$d3, $d3, $d4;
	div_f64	$d3, $d3, 0D400921fb54442d18;
	cmp_le_b1_f64	$c0, $d1, 0D4370000000000000;
	cmov_b64	$d2, $c0, $d3, $d2;
	div_f64	$d3, $d1, 0D400921fb54442d18;
	cmp_lt_b1_f64	$c0, $d1, 0D3e50000000000000;
	cmov_b64	$d2, $c0, $d3, $d2;
	neg_f64	$d3, $d2;
	cmp_eq_b1_f64	$c0, $d1, $d0;
	cmov_b64	$d0, $c0, $d2, $d3;
	st_arg_align(8)_f64	$d0, [%_gcc_atanpi];
	ret;
};


decl function &_gcc_fma(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y,
	arg_f64 %z);


function &_gcc_fma(arg_f64 %_gcc_fma)(
	arg_f64 %x,
	arg_f64 %y,
	arg_f64 %z)
{

@_gcc_fma_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%z];
	ld_arg_align(8)_f64	$d1, [%y];
	ld_arg_align(8)_f64	$d2, [%x];
	fma_f64	$d0, $d2, $d1, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_fma];
	ret;
};


decl function &_gcc_tanpi(arg_f64 %ret)(arg_f64 %x);


function &_gcc_tanpi(arg_f64 %_gcc_tanpi)(arg_f64 %x)
{

@_gcc_tanpi_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	and_b64	$d4, $d0, 9223372036854775808;
	xor_b64	$d0, $d4, $d0;
	cmp_lt_b1_s64	$c0, $d0, 9218868437227405312;
	cmov_b64	$d1, $c0, $d4, 9221120237041090560;
	mov_b64	$d3, $d0;
	cvt_s64_f64	$d5, $d3;
	shl_u64	$d2, $d5, 63;
	xor_b64	$d2, $d2, $d4;
	cmp_lt_b1_s64	$c0, $d0, 4845873199050653696;
	cmov_b64	$d1, $c0, $d2, $d1;
	cvt_near_f64_s64	$d5, $d5;
	sub_f64	$d3, $d3, $d5;
	sub_f64	$d5, 0D3ff0000000000000, $d3;
	add_f64	$d6, $d3, 0Dbfe0000000000000;
	cmp_le_b1_f64	$c1, $d3, 0D3fe8000000000000;
	cmov_b64	$d5, $c1, $d6, $d5;
	sub_f64	$d6, 0D3fe0000000000000, $d3;
	cmp_lt_b1_f64	$c2, $d3, 0D3fe0000000000000;
	cmov_b64	$d5, $c2, $d6, $d5;
	cmp_le_b1_f64	$c3, $d3, 0D3fd0000000000000;
	cmov_b64	$d5, $c3, $d3, $d5;
	mul_f64	$d6, $d5, 0D400921fb54442d18;
	cmp_gt_b1_f64	$c0, $d6, 0D3fe5c28f5c28f5c3;
	cmov_b64	$d5, $c0, 4607182418800017408, 0;
	cmp_lt_b1_f64	$c4, $d6, 0Dbfe5c28f5c28f5c3;
	or_b1	$c0, $c0, $c4;
	cmov_b64	$d5, $c4, 13830554455654793216, $d5;
	xor_b64	$d7, $d4, 9223372036854775808;
	cmov_b64	$d8, $c1, $d4, $d7;
	cmov_b64	$d7, $c2, $d7, $d8;
	cmov_b64	$d4, $c3, $d4, $d7;
	cmp_gtu_b1_f64	$c2, $d3, 0D3fd0000000000000;
	and_b1	$c1, $c1, $c2;
	neg_f64	$d7, $d5;
	fma_f64	$d7, $d7, $d6, 0D3fe921fb54442d18;
	add_f64	$d7, $d7, 0D3c81a62633145c06;
	cmov_b64	$d7, $c0, $d7, $d6;
	mul_f64	$d6, $d7, $d7;
	fma_f64	$d8, $d6, 0D3f2d5daf289c385a, 0Dbf977c24c7569abb;
	fma_f64	$d8, $d6, $d8, 0D3fd7d50f6638564a;
	fma_f64	$d9, $d6, 0Dbf2e7517ef6d98f8, 0D3f9ab0f4f80a0acf;
	fma_f64	$d9, $d6, $d9, 0Dbfe08046499eb90f;
	fma_f64	$d9, $d6, $d9, 0D3ff1dfcb8caa40b8;
	div_f64	$d8, $d8, $d9;
	mul_f64	$d6, $d7, $d6;
	mul_f64	$d9, $d6, $d8;
	add_f64	$d6, $d7, $d9;
	mov_b64	$d8, $d6;
	and_b64	$d8, $d8, 18446744069414584320;
	sub_f64	$d7, $d8, $d7;
	sub_f64	$d9, $d9, $d7;
	div_f64	$d7, 0D3ff0000000000000, $d6;
	neg_f64	$d7, $d7;
	mov_b64	$d10, $d7;
	and_b64	$d10, $d10, 18446744069414584320;
	fma_f64	$d8, $d10, $d8, 0D3ff0000000000000;
	fma_f64	$d8, $d10, $d9, $d8;
	add_f64	$d11, $d6, 0D3ff0000000000000;
	add_f64	$d9, $d6, $d6;
	fma_f64	$d7, $d8, $d7, $d10;
	div_f64	$d8, $d9, $d11;
	add_f64	$d10, $d6, 0Dbff0000000000000;
	div_f64	$d9, $d9, $d10;
	add_f64	$d9, $d9, 0Dbff0000000000000;
	mul_f64	$d9, $d5, $d9;
	cmov_b64	$d7, $c0, $d9, $d7;
	sub_f64	$d8, 0D3ff0000000000000, $d8;
	mul_f64	$d5, $d5, $d8;
	cmov_b64	$d5, $c0, $d5, $d6;
	cmov_b64	$d5, $c1, $d7, $d5;
	or_b64	$d2, $d2, 9218868437227405312;
	xor_b64	$d4, $d5, $d4;
	cmp_eq_b1_f64	$c0, $d3, 0D3fe0000000000000;
	cmov_b64	$d2, $c0, $d2, $d4;
	cmp_lt_b1_s64	$c0, $d0, 4841369599423283200;
	cmov_b64	$d0, $c0, $d2, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_tanpi];
	ret;
};

readonly_f64 &__math64_CBRT_TBL_INV[257] = f64[](0D4000000000000000, 0D3fffe01fe01fe020, 0D3fffc07f01fc07f0, 0D3fffa11caa01fa12, 0D3fff81f81f81f820, 0D3fff6310aca0dbb5, 0D3fff44659e4a4271, 0D3fff25f644230ab5, 0D3fff07c1f07c1f08, 0D3ffee9c7f8458e02, 0D3ffecc07b301ecc0, 0D3ffeae807aba01eb, 0D3ffe9131abf0b767, 0D3ffe741aa59750e4, 0D3ffe573ac901e574, 0D3ffe3a9179dc1a73, 0D3ffe1e1e1e1e1e1e, 0D3ffe01e01e01e01e, 0D3ffde5d6e3f8868a, 0D3ffdca01dca01dca, 0D3ffdae6076b981db, 0D3ffd92f2231e7f8a, 0D3ffd77b654b82c34, 0D3ffd5cac807572b2, 0D3ffd41d41d41d41d, 0D3ffd272ca3fc5b1a, 0D3ffd0cb58f6ec074, 0D3ffcf26e5c44bfc6, 0D3ffcd85689039b0b, 0D3ffcbe6d9601cbe7, 0D3ffca4b3055ee191, 0D3ffc8b265afb8a42, 0D3ffc71c71c71c71c, 0D3ffc5894d10d4986, 0D3ffc3f8f01c3f8f0, 0D3ffc26b5392ea01c, 0D3ffc0e070381c0e0, 0D3ffbf583ee868d8b, 0D3ffbdd2b899406f7, 0D3ffbc4fd65883e7b, 0D3ffbacf914c1bad0, 0D3ffb951e2b18ff23, 0D3ffb7d6c3dda338b, 0D3ffb65e2e3beee05, 0D3ffb4e81b4e81b4f, 0D3ffb37484ad806ce, 0D3ffb2036406c80d9, 0D3ffb094b31d922a4, 0D3ffaf286bca1af28, 0D3ffadbe87f94905e, 0D3ffac5701ac5701b, 0D3ffaaf1d2f87ebfd, 0D3ffa98ef606a63be, 0D3ffa82e65130e159, 0D3ffa6d01a6d01a6d, 0D3ffa574107688a4a, 0D3ffa41a41a41a41a, 0D3ffa2c2a87c51ca0, 0D3ffa16d3f97a4b02, 0D3ffa01a01a01a01a, 0D3ff9ec8e951033d9, 0D3ff9d79f176b682d, 0D3ff9c2d14ee4a102, 0D3ff9ae24ea5510da, 0D3ff999999999999a, 0D3ff9852f0d8ec0ff, 0D3ff970e4f80cb872, 0D3ff95cbb0be377ae, 0D3ff948b0fcd6e9e0, 0D3ff934c67f9b2ce6, 0D3ff920fb49d0e229, 0D3ff90d4f120190d5, 0D3ff8f9c18f9c18fa, 0D3ff8e6527af1373f, 0D3ff8d3018d3018d3, 0D3ff8bfce8062ff3a, 0D3ff8acb90f6bf3aa, 0D3ff899c0f601899c, 0D3ff886e5f0abb04a, 0D3ff87427bcc092b9, 0D3ff8618618618618, 0D3ff84f00c2780614, 0D3ff83c977ab2bedd, 0D3ff82a4a0182a4a0, 0D3ff8181818181818, 0D3ff8060180601806, 0D3ff7f405fd017f40, 0D3ff7e225515a4f1d, 0D3ff7d05f417d05f4, 0D3ff7beb3922e017c, 0D3ff7ad2208e0ecc3, 0D3ff79baa6bb6398b, 0D3ff78a4c8178a4c8, 0D3ff77908119ac60d, 0D3ff767dce434a9b1, 0D3ff756cac201756d, 0D3ff745d1745d1746, 0D3ff734f0c541fe8d, 0D3ff724287f46debc, 0D3ff713786d9c7c09, 0D3ff702e05c0b8170, 0D3ff6f26016f26017, 0D3ff6e1f76b4337c7, 0D3ff6d1a62681c861, 0D3ff6c16c16c16c17, 0D3ff6b1490aa31a3d, 0D3ff6a13cd1537290, 0D3ff691473a88d0c0, 0D3ff6816816816817, 0D3ff6719f3601671a, 0D3ff661ec6a5122f9, 0D3ff6524f853b4aa3, 0D3ff642c8590b2164, 0D3ff63356b88ac0de, 0D3ff623fa77016240, 0D3ff614b36831ae94, 0D3ff6058160581606, 0D3ff5f66434292dfc, 0D3ff5e75bb8d015e7, 0D3ff5d867c3ece2a5, 0D3ff5c9882b931057, 0D3ff5babcc647fa91, 0D3ff5ac056b015ac0, 0D3ff59d61f123ccaa, 0D3ff58ed2308158ed, 0D3ff5805601580560, 0D3ff571ed3c506b3a, 0D3ff56397ba7c52e2, 0D3ff5555555555555, 0D3ff54725e6bb82fe, 0D3ff5390948f40feb, 0D3ff52aff56a8054b, 0D3ff51d07eae2f815, 0D3ff50f22e111c4c5, 0D3ff5015015015015, 0D3ff4f38f62dd4c9b, 0D3ff4e5e0a72f0539, 0D3ff4d843bedc2c4c, 0D3ff4cab88725af6e, 0D3ff4bd3edda68fe1, 0D3ff4afd6a052bf5b, 0D3ff4a27fad76014a, 0D3ff49539e3b2d067, 0D3ff4880522014880, 0D3ff47ae147ae147b, 0D3ff46dce34596066, 0D3ff460cbc7f5cf9a, 0D3ff453d9e2c776ca, 0D3ff446f86562d9fb, 0D3ff43a2730abee4d, 0D3ff42d6625d51f87, 0D3ff420b5265e5951, 0D3ff4141414141414, 0D3ff40782d10e6566, 0D3ff3fb013fb013fb, 0D3ff3ee8f42a5af07, 0D3ff3e22cbce4a902, 0D3ff3d5d991aa75c6, 0D3ff3c995a47babe7, 0D3ff3bd60d9232955, 0D3ff3b13b13b13b14, 0D3ff3a524387ac822, 0D3ff3991c2c187f63, 0D3ff38d22d366088e, 0D3ff3813813813814, 0D3ff3755bd1c945ee, 0D3ff3698df3de0748, 0D3ff35dce5f9f2af8, 0D3ff3521cfb2b78c1, 0D3ff34679ace01346, 0D3ff33ae45b57bcb2, 0D3ff32f5ced6a1dfa, 0D3ff323e34a2b10bf, 0D3ff3187758e9ebb6, 0D3ff30d190130d190, 0D3ff301c82ac40260, 0D3ff2f684bda12f68, 0D3ff2eb4ea1fed14b, 0D3ff2e025c04b8097, 0D3ff2d50a012d50a0, 0D3ff2c9fb4d812ca0, 0D3ff2bef98e5a3711, 0D3ff2b404ad012b40, 0D3ff2a91c92f3c105, 0D3ff29e4129e4129e, 0D3ff293725bb804a5, 0D3ff288b01288b013, 0D3ff27dfa38a1ce4d, 0D3ff27350b8812735, 0D3ff268b37cd60127, 0D3ff25e22708092f1, 0D3ff2539d7e9177b2, 0D3ff2492492492492, 0D3ff23eb79717605b, 0D3ff23456789abcdf, 0D3ff22a0122a0122a, 0D3ff21fb78121fb78, 0D3ff21579804855e6, 0D3ff20b470c67c0d9, 0D3ff2012012012012, 0D3ff1f7047dc11f70, 0D3ff1ecf43c7fb84c, 0D3ff1e2ef3b3fb874, 0D3ff1d8f5672e4abd, 0D3ff1cf06ada2811d, 0D3ff1c522fc1ce059, 0D3ff1bb4a4046ed29, 0D3ff1b17c67f2bae3, 0D3ff1a7b9611a7b96, 0D3ff19e0119e0119e, 0D3ff19453808ca29c, 0D3ff18ab083902bdb, 0D3ff1811811811812, 0D3ff1778a191bd684, 0D3ff16e0689427379, 0D3ff1648d50fc3201, 0D3ff15b1e5f75270d, 0D3ff151b9a3fdd5c9, 0D3ff1485f0e0acd3b, 0D3ff13f0e8d344724, 0D3ff135c81135c811, 0D3ff12c8b89edc0ac, 0D3ff12358e75d3033, 0D3ff11a3019a74826, 0D3ff1111111111111, 0D3ff107fbbe011080, 0D3ff0fef010fef011, 0D3ff0f5edfab325a2, 0D3ff0ecf56be69c90, 0D3ff0e40655826011, 0D3ff0db20a88f4696, 0D3ff0d24456359e3a, 0D3ff0c9714fbcda3b, 0D3ff0c0a7868b4171, 0D3ff0b7e6ec259dc8, 0D3ff0af2f722eecb5, 0D3ff0a6810a6810a7, 0D3ff09ddba6af8360, 0D3ff0953f39010954, 0D3ff08cabb37565e2, 0D3ff0842108421084, 0D3ff07b9f29b8eae2, 0D3ff073260a47f7c6, 0D3ff06ab59c7912fb, 0D3ff0624dd2f1a9fc, 0D3ff059eea0727586, 0D3ff05197f7d73404, 0D3ff04949cc1664c5, 0D3ff0410410410410, 0D3ff038c6b78247fc, 0D3ff03091b51f5e1a, 0D3ff02864fc7729e9, 0D3ff0204081020408, 0D3ff0182436517a37, 0D3ff0101010101010, 0D3ff0080402010080, 0D3ff0000000000000);
align(16) readonly_f64 &__math64_CBRT_TBL[514] = f64[](0D3ff0000000000000, 0D0000000000000000, 0D3ff0055380000000, 0D3e6e6a24c81e4294, 0D3ff00aa390000000, 0D3e58548511e3a785, 0D3ff00ff010000000, 0D3e64eb9336ec07f6, 0D3ff0153920000000, 0D3e40ea64b8b750e1, 0D3ff01a7eb0000000, 0D3e461637cff8a53c, 0D3ff01fc0d0000000, 0D3e40733bf7bd1943, 0D3ff024ff80000000, 0D3e5666911345cced, 0D3ff02a3ad0000000, 0D3e477b7a3f592f14, 0D3ff02f72b0000000, 0D3e6f18d3dd1a5402, 0D3ff034a750000000, 0D3e2be2f5a58ee9a4, 0D3ff039d880000000, 0D3e68901f8f085fa7, 0D3ff03f0670000000, 0D3e5c68b8cd5b5d69, 0D3ff0443110000000, 0D3e5a6b0e8624be42, 0D3ff0495870000000, 0D3dbc4b22b06f68e7, 0D3ff04e7c80000000, 0D3e60f3f0afcabe9b, 0D3ff0539d60000000, 0D3e548495bca4e1b7, 0D3ff058bb00000000, 0D3e66107f1abdfdc3, 0D3ff05dd570000000, 0D3e6e67261878288a, 0D3ff062ecc0000000, 0D3e5a6bc155286f1e, 0D3ff06800e0000000, 0D3e58a759c64a85f2, 0D3ff06d11e0000000, 0D3e45fce70a4a8d09, 0D3ff0721fc0000000, 0D3e32f9cbf373fe1d, 0D3ff0772a80000000, 0D3e590564ce4ac359, 0D3ff07c3230000000, 0D3e5ac29ce761b02f, 0D3ff08136d0000000, 0D3e5cb752f497381c, 0D3ff0863860000000, 0D3e68bb9e1cfb35e0, 0D3ff08b36f0000000, 0D3e65b4917099de90, 0D3ff0903280000000, 0D3e5cc77ac9c65ef2, 0D3ff0952b10000000, 0D3e57a0f3e7be3dba, 0D3ff09a20a0000000, 0D3e66ec851ee0c16f, 0D3ff09f1340000000, 0D3e689449bf2946da, 0D3ff0a402f0000000, 0D3e698f25301ba223, 0D3ff0a8efc0000000, 0D3e347d5ec651f549, 0D3ff0add990000000, 0D3e6c33ec9a86007a, 0D3ff0b2c090000000, 0D3e5e0b6653e92649, 0D3ff0b7a4b0000000, 0D3e3bd64ac09d755f, 0D3ff0bc85f0000000, 0D3e2f537506f78167, 0D3ff0c16450000000, 0D3e62c382d1b3735e, 0D3ff0c63fe0000000, 0D3e6e20ed659f99e1, 0D3ff0cb18b0000000, 0D3e586b633a9c182a, 0D3ff0cfeeb0000000, 0D3e445cfd5a65e777, 0D3ff0d4c1e0000000, 0D3e60c8770f58bca4, 0D3ff0d99250000000, 0D3e6739e44b0933c5, 0D3ff0de6010000000, 0D3e027dc3d9ce7bd8, 0D3ff0e32b00000000, 0D3e63c53c7c5a7b64, 0D3ff0e7f340000000, 0D3e69669683830cec, 0D3ff0ecb8d0000000, 0D3e68d772c39bdcc4, 0D3ff0f17bb0000000, 0D3e69b0008bcf6d7b, 0D3ff0f63bf0000000, 0D3e3bbb305825ce4f, 0D3ff0faf970000000, 0D3e6da3f4af13a406, 0D3ff0ffb460000000, 0D3e5f36b96f74ce86, 0D3ff1046cb0000000, 0D3e165c002303f790, 0D3ff1092250000000, 0D3e682f84095ba7d5, 0D3ff10dd560000000, 0D3e6d46433541b2c6, 0D3ff11285e0000000, 0D3e671c3d56e93a89, 0D3ff11733d0000000, 0D3e598dcef4e40012, 0D3ff11bdf30000000, 0D3e4530ebef17fe03, 0D3ff1208800000000, 0D3e4e8b8fa3715066, 0D3ff1252e40000000, 0D3e6ab26eb3b211dc, 0D3ff129d210000000, 0D3e454dd4dc906307, 0D3ff12e7350000000, 0D3e5c9f962387984e, 0D3ff1331210000000, 0D3e6c62a959afec09, 0D3ff137ae60000000, 0D3e6638d9ac6a866a, 0D3ff13c4840000000, 0D3e338704eca8a22d, 0D3ff140dfa0000000, 0D3e4e6c9e1db14f8f, 0D3ff1457490000000, 0D3e58744b7f9c9eaa, 0D3ff14a0710000000, 0D3e66c2893486373b, 0D3ff14e9730000000, 0D3e5b36bce31699b7, 0D3ff15324e0000000, 0D3e671e3813d200c7, 0D3ff157b030000000, 0D3e699755ab40aa88, 0D3ff15c3920000000, 0D3e6b45ca0e4bcfc0, 0D3ff160bfc0000000, 0D3e32dd090d869c5d, 0D3ff16543f0000000, 0D3e64fe0516b917da, 0D3ff169c5d0000000, 0D3e694563226317a2, 0D3ff16e4560000000, 0D3e653d8fafc2c851, 0D3ff172c2a0000000, 0D3e5dcbd41fbd41a3, 0D3ff1773d90000000, 0D3e5862ff5285f59c, 0D3ff17bb630000000, 0D3e63072ea97a1e1c, 0D3ff1802c90000000, 0D3e52839075184805, 0D3ff184a0a0000000, 0D3e64b0323e9eff42, 0D3ff1891270000000, 0D3e6b158893c45484, 0D3ff18d8210000000, 0D3e3149ef0fc35826, 0D3ff191ef60000000, 0D3e5f2e77ea96acaa, 0D3ff1965a80000000, 0D3e5200074c471a95, 0D3ff19ac360000000, 0D3e63f8cc517f6f04, 0D3ff19f2a10000000, 0D3e660ba2e311bb55, 0D3ff1a38e90000000, 0D3e64b788730bbec3, 0D3ff1a7f0e0000000, 0D3e657090795ee20c, 0D3ff1ac5100000000, 0D3e6d9ffe983670b1, 0D3ff1b0af00000000, 0D3e62a463ff61bfda, 0D3ff1b50ad0000000, 0D3e69d1bc6a5e65cf, 0D3ff1b96480000000, 0D3e68718abaa9e922, 0D3ff1bdbc10000000, 0D3e63c2f52ffa342e, 0D3ff1c21180000000, 0D3e60fae13ff42c80, 0D3ff1c664d0000000, 0D3e65440f0ef00d57, 0D3ff1cab610000000, 0D3e46fcd22d4e3c1e, 0D3ff1cf0530000000, 0D3e4e0c60b409e863, 0D3ff1d35230000000, 0D3e6f9cab5a5f0333, 0D3ff1d79d30000000, 0D3e630f24744c333d, 0D3ff1dbe620000000, 0D3e4b50622a76b2fe, 0D3ff1e02cf0000000, 0D3e6fdb94ba595375, 0D3ff1e471d0000000, 0D3e3861b9b945a171, 0D3ff1e8b490000000, 0D3e654348015188c4, 0D3ff1ecf550000000, 0D3e6b54d149865523, 0D3ff1f13410000000, 0D3e6a0bb783d9de33, 0D3ff1f570d0000000, 0D3e6629d12b1a2157, 0D3ff1f9ab90000000, 0D3e6467fe35d179df, 0D3ff1fde450000000, 0D3e69763f3e26c8f7, 0D3ff2021b20000000, 0D3e53f798bb9f7679, 0D3ff2064ff0000000, 0D3e552e577e855898, 0D3ff20a82c0000000, 0D3e6fde47e5502c3a, 0D3ff20eb3b0000000, 0D3e5cbd0b548d96a0, 0D3ff212e2a0000000, 0D3e6a9cd9f7be8de8, 0D3ff2170fb0000000, 0D3e522bbe704886de, 0D3ff21b3ac0000000, 0D3e6e3dea8317f020, 0D3ff21f63f0000000, 0D3e6e812085ac8855, 0D3ff2238b40000000, 0D3e5c87144f24cb07, 0D3ff227b0a0000000, 0D3e61e128ee311fa2, 0D3ff22bd420000000, 0D3e5b5c163d61a2d3, 0D3ff22ff5c0000000, 0D3e47d97e7fb90633, 0D3ff2341570000000, 0D3e6efe899d50f6a7, 0D3ff2383350000000, 0D3e6d0333eb75de5a, 0D3ff23c4f60000000, 0D3e40e590be73a573, 0D3ff2406980000000, 0D3e68ce8dcac3cdd2, 0D3ff24481d0000000, 0D3e6ee8a48954064b, 0D3ff2489850000000, 0D3e6aa62f18461e09, 0D3ff24cad00000000, 0D3e601e5940986a15, 0D3ff250bfe0000000, 0D3e3b082f4f9b8d4c, 0D3ff254d0e0000000, 0D3e6876e0e5527f5a, 0D3ff258e020000000, 0D3e63617080831e6b, 0D3ff25ced90000000, 0D3e681b26e34aa4a2, 0D3ff260f940000000, 0D3e552ee66dfab0c1, 0D3ff2650320000000, 0D3e5d85a5329e8819, 0D3ff2690b40000000, 0D3e5105c1b646b5d1, 0D3ff26d1190000000, 0D3e6bb6690c1a379c, 0D3ff2711630000000, 0D3e586aeba73ce3a9, 0D3ff2751900000000, 0D3e6dd16198294dd4, 0D3ff2791a20000000, 0D3e6454e675775e83, 0D3ff27d1980000000, 0D3e63842e026197ea, 0D3ff2811720000000, 0D3e6f1ce0e70c44d2, 0D3ff2851310000000, 0D3e6ad636441a5627, 0D3ff2890d50000000, 0D3e54c205d7212abb, 0D3ff28d05d0000000, 0D3e6167c86c116419, 0D3ff290fca0000000, 0D3e638ec3ef16e294, 0D3ff294f1c0000000, 0D3e6473fceace9321, 0D3ff298e530000000, 0D3e67af53a836dba7, 0D3ff29cd700000000, 0D3e1a51f3c383b652, 0D3ff2a0c710000000, 0D3e63696da190822d, 0D3ff2a4b580000000, 0D3e62f9adec77074b, 0D3ff2a8a250000000, 0D3e38190fd5bee55f, 0D3ff2ac8d70000000, 0D3e4bfee8fac68e55, 0D3ff2b076f0000000, 0D3e331c9d6bc5f68a, 0D3ff2b45ec0000000, 0D3e689d0523737edf, 0D3ff2b84500000000, 0D3e5a295943bf47bb, 0D3ff2bc29a0000000, 0D3e396be32e5b3207, 0D3ff2c00c90000000, 0D3e6e44c7d909fa0e, 0D3ff2c3ee00000000, 0D3e2b2505da94d9ea, 0D3ff2c7cdc0000000, 0D3e60c851f46c9c98, 0D3ff2cbabf0000000, 0D3e5da71f7d9aa3b7, 0D3ff2cf8880000000, 0D3e6f1b605d019ef1, 0D3ff2d36390000000, 0D3e4386e8a2189563, 0D3ff2d73d00000000, 0D3e3b19fa5d306ba7, 0D3ff2db14d0000000, 0D3e6dd749b67aef76, 0D3ff2deeb20000000, 0D3e676ff6f1dc04b0, 0D3ff2e2bfe0000000, 0D3e635a33d0b232a6, 0D3ff2e69310000000, 0D3e64bdc80024a4e1, 0D3ff2ea64b0000000, 0D3e6ebd61770fd723, 0D3ff2ee34d0000000, 0D3e64769fc537264d, 0D3ff2f20360000000, 0D3e69021f429f3b98, 0D3ff2f5d070000000, 0D3e5ee7083efbd606, 0D3ff2f99bf0000000, 0D3e6ad985552a6b1a, 0D3ff2fd65f0000000, 0D3e6e3df778772160, 0D3ff3012e70000000, 0D3e6ca5d76ddc9b34, 0D3ff304f570000000, 0D3e691154ffdbaf74, 0D3ff308baf0000000, 0D3e667bdd57fb306a, 0D3ff30c7ef0000000, 0D3e67dc255ac40886, 0D3ff3104180000000, 0D3df219f38e8afafe, 0D3ff3140280000000, 0D3e62416bf9669a04, 0D3ff317c210000000, 0D3e611c96b2b3987f, 0D3ff31b8020000000, 0D3e6f99ed447e1177, 0D3ff31f3cd0000000, 0D3e13245826328a11, 0D3ff322f7f0000000, 0D3e66f56dd1e645f8, 0D3ff326b1b0000000, 0D3e46164946945535, 0D3ff32a69f0000000, 0D3e5e37d59d190028, 0D3ff32e20c0000000, 0D3e668671f12bf828, 0D3ff331d620000000, 0D3e6e8ecbca6aabbd, 0D3ff3358a20000000, 0D3e53f49e109a5912, 0D3ff3393ca0000000, 0D3e6b8a0e11ec3043, 0D3ff33cedc0000000, 0D3e65fae00aed691a, 0D3ff3409d70000000, 0D3e6c0569bece3e4a, 0D3ff3444bc0000000, 0D3e605e26744efbfe, 0D3ff347f8a0000000, 0D3e65b570a94be5c5, 0D3ff34ba420000000, 0D3e5d6f156ea0e063, 0D3ff34f4e30000000, 0D3e6e0ca7612fc484, 0D3ff352f6f0000000, 0D3e4963c927b25258, 0D3ff3569e40000000, 0D3e547930aa725a5c, 0D3ff35a4430000000, 0D3e58a79fe3af43b3, 0D3ff35de8c0000000, 0D3e5e6dc29c41bdaf, 0D3ff3618bf0000000, 0D3e657a2e76f863a5, 0D3ff3652dd0000000, 0D3e2ae3b61716354d, 0D3ff368ce40000000, 0D3e665fb5df6906b1, 0D3ff36c6d60000000, 0D3e66177d7f588f7b, 0D3ff3700b30000000, 0D3e3ad55abd091b67, 0D3ff373a7a0000000, 0D3e155337b2422d76, 0D3ff37742b0000000, 0D3e6084ebe86972d5, 0D3ff37adc70000000, 0D3e656395808e1ea3, 0D3ff37e74e0000000, 0D3e61bce21b40fba7, 0D3ff3820c00000000, 0D3e5006f94605b515, 0D3ff385a1c0000000, 0D3e6aa676aceb1f7d, 0D3ff3893640000000, 0D3e58229f76554ce6, 0D3ff38cc960000000, 0D3e6eabfc6cf57330, 0D3ff3905b40000000, 0D3e64daed9c0ce8bc, 0D3ff393ebd0000000, 0D3e60ff1768237141, 0D3ff3977b10000000, 0D3e6575f83051b085, 0D3ff39b0910000000, 0D3e42667deb523e29, 0D3ff39e95c0000000, 0D3e1816996954f4fd, 0D3ff3a22120000000, 0D3e587cfccf4d9cd4, 0D3ff3a5ab40000000, 0D3e52c5d018198353, 0D3ff3a93410000000, 0D3e6a7a898dcc34aa, 0D3ff3acbbb0000000, 0D3e2cead6dadc36d1, 0D3ff3b04200000000, 0D3e2a55759c498bdf, 0D3ff3b3c700000000, 0D3e6c414a9ef6de04, 0D3ff3b74ad0000000, 0D3e63e2108a6e58fa, 0D3ff3bacd60000000, 0D3e5587fd7643d77c, 0D3ff3be4eb0000000, 0D3e3901eb1d3ff3df, 0D3ff3c1ceb0000000, 0D3e6f2ccd7c812fc6, 0D3ff3c54d90000000, 0D3e21c8ee70a01049, 0D3ff3c8cb20000000, 0D3e563e8d02831eec, 0D3ff3cc4770000000, 0D3e6f61a42a92c7ff, 0D3ff3cfc2a0000000, 0D3dda917399c84d24, 0D3ff3d33c80000000, 0D3e5e9197c8eec2f0, 0D3ff3d6b530000000, 0D3e5e6f842f5a1378, 0D3ff3da2cb0000000, 0D3e2fac242a90a0fc, 0D3ff3dda2f0000000, 0D3e535ed726610227, 0D3ff3e11800000000, 0D3e50e0d64804b15b, 0D3ff3e48be0000000, 0D3e0560675daba814, 0D3ff3e7fe80000000, 0D3e637388c8768032, 0D3ff3eb7000000000, 0D3e3ee3c89f9e01f5, 0D3ff3eee040000000, 0D3e639f6f0d09747c, 0D3ff3f24f60000000, 0D3e4322c327abb8f0, 0D3ff3f5bd40000000, 0D3e6961b347c8ac80, 0D3ff3f92a00000000, 0D3e63711fbbd0f118, 0D3ff3fc9590000000, 0D3e64fad8d7718ffb, 0D3ff3fffff0000000, 0D3e6fffffffffffff, 0D3ff4036930000000, 0D3e667efa79ec35b4, 0D3ff406d140000000, 0D3e6a737687a254a8, 0D3ff40a3830000000, 0D3e5bace0f87d924d, 0D3ff40d9df0000000, 0D3e629e37c237e392, 0D3ff4110290000000, 0D3e557ce7ac3f3012, 0D3ff4146600000000, 0D3e682829359f8fbd, 0D3ff417c850000000, 0D3e6cc9be42d14676, 0D3ff41b2980000000, 0D3e6a8f001c137d0b, 0D3ff41e8990000000, 0D3e636127687dda05, 0D3ff421e880000000, 0D3e524dba322646f0, 0D3ff4254640000000, 0D3e6dc43f1ed210b4, 0D3ff428a2f0000000, 0D3e631ae515c447bb);
align(16) readonly_f64 &__math64_CBRT_TBL_REM[10] = f64[](0D3fe428a2f0000000, 0D3e531ae515c447bb, 0D3fe965fea0000000, 0D3e44f5b8f20ac166, 0D3ff0000000000000, 0D0000000000000000, 0D3ff428a2f0000000, 0D3e631ae515c447bb, 0D3ff965fea0000000, 0D3e54f5b8f20ac166);

decl function &_gcc_cbrt(arg_f64 %ret)(arg_f64 %x);


function &_gcc_cbrt(arg_f64 %_gcc_cbrt)(arg_f64 %x)
{

@_gcc_cbrt_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	class_b1_f64	$c0, $d0, 516;
	cvt_u32_b1	$s0, $c0;
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s1, $c0;
	or_b32	$s2, $s1, $s0;
	cmp_eq_b1_f64	$c0, $d0, 0D0000000000000000;
	cvt_u32_b1	$s0, $c0;
	abs_f64	$d1, $d0;
	or_b64	$d2, $d1, 4607182418800017408;
	add_f64	$d2, $d2, 0Dbff0000000000000;
	shr_u64	$d3, $d1, 32;
	cvt_u32_u64	$s1, $d3;
	shr_s32	$s1, $s1, 20;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b64	$d1, $c0, $d2, $d1;
	shr_u64	$d2, $d2, 32;
	cvt_u32_u64	$s3, $d2;
	shr_s32	$s3, $s3, 20;
	add_u32	$s3, $s1, $s3;
	add_u32	$s3, $s3, 4294965251;
	add_u32	$s1, $s1, 4294966273;
	cmov_b32	$s1, $c0, $s3, $s1;
	and_b64	$d2, $d1, 4503599627370495;
	shr_u64	$d1, $d2, 43;
	and_b32	$s2, $s2, 1;
	cvt_u32_u64	$s3, $d1;
	or_b64	$d1, $d2, 4602678819172646912;
	or_b32	$s0, $s2, $s0;
	and_b32	$s2, $s3, 1;
	shr_u64	$d2, $d2, 44;
	cvt_u32_u64	$s3, $d2;
	or_b32	$s3, $s3, 256;
	add_u32	$s2, $s3, $s2;
	cvt_near_f64_s32	$d2, $s2;
	mul_f64	$d2, $d2, 0Dbf60000000000000;
	add_f64	$d1, $d1, $d2;
	add_u32	$s2, $s2, 4294967040;
	cvt_s64_s32	$d2, $s2;
	shl_u64	$d3, $d2, 3;
	ld_readonly_align(8)_f64	$d3, [&__math64_CBRT_TBL_INV][$d3];
	mul_f64	$d1, $d3, $d1;
	fma_f64	$d3, $d1, 0Dbf98090d6221a247, 0D3f9ee7113506ac13;
	fma_f64	$d3, $d1, $d3, 0Dbfa511e8d2b3183b;
	fma_f64	$d3, $d1, $d3, 0D3faf9add3c0ca458;
	fma_f64	$d3, $d1, $d3, 0Dbfbc71c71c71c71c;
	shl_u64	$d4, $d2, 4;
	cvt_s64_s32	$d2, $s1;
	mul_u64	$d2, $d2, 1431655766;
	shr_u64	$d6, $d2, 63;
	fma_f64	$d5, $d1, $d3, 0D3fd5555555555555;
	cvt_u32_u64	$s2, $d6;
	shr_u64	$d2, $d2, 32;
	cvt_u32_u64	$s3, $d2;
	ld_v2_readonly_align(16)_f64	($d2, $d3), [&__math64_CBRT_TBL][$d4];
	add_u32	$s2, $s3, $s2;
	mad_u32	$s1, $s2, 4294967293, $s1;
	mul_f64	$d1, $d5, $d1;
	add_u32	$s1, $s1, 2;
	cvt_s64_s32	$d4, $s1;
	shl_u64	$d6, $d4, 4;
	ld_v2_readonly_align(16)_f64	($d4, $d5), [&__math64_CBRT_TBL_REM][$d6];
	mul_f64	$d6, $d5, $d3;
	fma_f64	$d3, $d3, $d4, $d6;
	fma_f64	$d3, $d5, $d2, $d3;
	fma_f64	$d3, $d1, $d3, $d3;
	mul_f64	$d2, $d4, $d2;
	add_u32	$s1, $s2, 1023;
	cvt_u64_u32	$d4, $s1;
	shl_u64	$d4, $d4, 52;
	fma_f64	$d1, $d1, $d2, $d3;
	mov_b64	$d3, $d4;
	add_f64	$d1, $d2, $d1;
	mul_f64	$d1, $d3, $d1;
	copysign_f64	$d1, $d1, $d0;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d0, $c0, $d0, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_cbrt];
	ret;
};


decl function &_gcc_ldexp(arg_f64 %ret)(
	arg_f64 %x,
	arg_u32 %n);


function &_gcc_ldexp(arg_f64 %_gcc_ldexp)(
	arg_f64 %x,
	arg_u32 %n)
{

@_gcc_ldexp_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	mul_f64	$d1, $d0, 0D4340000000000000;
	mov_b64	$d2, $d1;
	shr_u64	$d1, $d2, 52;
	cvt_u32_u64	$s0, $d1;
	and_b32	$s0, $s0, 2047;
	add_u32	$s0, $s0, 4294967243;
	mov_b64	$d1, $d0;
	shr_u64	$d3, $d1, 52;
	cvt_u32_u64	$s1, $d3;
	and_b32	$s1, $s1, 2047;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b32	$s2, $c0, $s0, $s1;
	cmov_b64	$d2, $c0, $d2, $d1;
	ld_arg_align(4)_u32	$s3, [%n];
	cmp_eq_b1_f64	$c0, $d0, 0D0000000000000000;
	cmp_eq_b1_s32	$c1, $s3, 0;
	or_b1	$c0, $c1, $c0;
	cvt_u32_b1	$s0, $c0;
	class_b1_f64	$c0, $d0, 516;
	cvt_u32_b1	$s1, $c0;
	and_b32	$s1, $s1, 1;
	and_b64	$d2, $d2, 9227875636482146303;
	add_u32	$s2, $s2, $s3;
	max_s32	$s2, $s2, -2047;
	min_s32	$s2, $s2, 2047;
	cvt_u64_u32	$d3, $s2;
	shl_u64	$d3, $d3, 52;
	or_b64	$d3, $d3, $d2;
	add_u32	$s3, $s2, 53;
	cvt_u64_u32	$d4, $s3;
	shl_u64	$d4, $d4, 52;
	or_b64	$d2, $d4, $d2;
	mul_f64	$d2, $d2, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c0, $s2, 0;
	cmov_b64	$d2, $c0, $d3, $d2;
	and_b64	$d1, $d1, 9223372036854775808;
	or_b64	$d3, $d1, 9218868437227405312;
	cmp_eq_b1_s32	$c0, $s2, 2047;
	cmov_b64	$d2, $c0, $d3, $d2;
	cmp_lt_b1_s32	$c0, $s2, -53;
	cmov_b64	$d1, $c0, $d1, $d2;
	or_b32	$s0, $s0, $s1;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d0, $c0, $d0, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_ldexp];
	ret;
};

align(16) readonly_f64 &__math64_SINH_TBL[74] = f64[](0D0000000000000000, 0D0000000000000000, 0D3ff2cd9fc0000000, 0D3e513ae6096a0092, 0D400d03cf60000000, 0D3e5db70cfb79a640, 0D40240926e0000000, 0D3e8c2526b66dc067, 0D403b4a3800000000, 0D3e8b81b18647f380, 0D40528d0160000000, 0D3ebbc1cdd1e1eb08, 0D406936d228000000, 0D3ecd9f201534fb09, 0D4081228768000000, 0D3edd1c064a4e9954, 0D409749ea50000000, 0D3ed4eca65d06ea74, 0D40afa71570000000, 0D3f00c259bcc0ecc5, 0D40c5829dc8000000, 0D3f2b5a6647cf9016, 0D40dd3c4488000000, 0D3f09691adefb0870, 0D40f3de1650000000, 0D3f53410fc29cde38, 0D410b00b590000000, 0D3f46a31a50b6fb3c, 0D412259ac48000000, 0D3f57defc71805c40, 0D4138f0cca8000000, 0D3f9eb49fd80e0bab, 0D4150f2ebd0000000, 0D3f84fffc7bcd5920, 0D4167093488000000, 0D3fc03a93b6c63435, 0D417f4f2208000000, 0D3fb1940bb255fd1c, 0D419546d8f8000000, 0D3fded26e14260b50, 0D41aceb0888000000, 0D3ffb47401fc9f2a2, 0D41c3a6e1f8000000, 0D40267bb3f55634f1, 0D41dab5adb8000000, 0D401c435ff8194ddc, 0D41f226af30000000, 0D404d8fee052ba63a, 0D4208ab7fb0000000, 0D40651d7edccde3f6, 0D4220c3d390000000, 0D40704b1644557d1a, 0D4236c93268000000, 0D4076a6b5ca0a9dc4, 0D424ef822f0000000, 0D40afd9cc72249aba, 0D42650bba30000000, 0D40ce58de693edab5, 0D427c9aae40000000, 0D40d8c70158ac6363, 0D4293704708000000, 0D40e7614764f43e20, 0D42aa6b7658000000, 0D4106337db36fc718, 0D42c1f43fc8000000, 0D41212d98b1f611e2, 0D42d866f348000000, 0D412392bc108b37cc, 0D42f0953e28000000, 0D415ce87bdc3473dc, 0D430689e220000000, 0D414bc8d5ae99ad14, 0D431ea215a0000000, 0D415d20d76744835c);
align(16) readonly_f64 &__math64_COSH_TBL[74] = f64[](0D3ff0000000000000, 0D0000000000000000, 0D3ff8b07550000000, 0D3e3d9f5504c2bd28, 0D400e18fa08000000, 0D3e67cb66f0a4c9fd, 0D402422a490000000, 0D3e8f58617928e588, 0D403b4ee858000000, 0D3e6bc7d000c38d48, 0D40528d6fc8000000, 0D3eaf7f9d4e329998, 0D406936e678000000, 0D3ec6e6e464885269, 0D4081228948000000, 0D3ecba3a8b946c154, 0D409749eaa8000000, 0D3ed3f4e76110d5a4, 0D40afa71580000000, 0D3f017622515a3e2b, 0D40c5829dd0000000, 0D3ee4dc4b528af3d0, 0D40dd3c4488000000, 0D3f11156278615e10, 0D40f3de1650000000, 0D3f535ad50ed821f5, 0D410b00b590000000, 0D3f46b61055f2935c, 0D412259ac48000000, 0D3f57e2794a601240, 0D4138f0cca8000000, 0D3f9eb4b45f6aadd3, 0D4150f2ebd0000000, 0D3f85000b967b3698, 0D4167093488000000, 0D3fc03a940fadc092, 0D417f4f2208000000, 0D3fb1940bf3bf874c, 0D419546d8f8000000, 0D3fded26e1a2a2110, 0D41aceb0888000000, 0D3ffb4740205796d6, 0D41c3a6e1f8000000, 0D40267bb3f55cb85d, 0D41dab5adb8000000, 0D401c435ff81e18ac, 0D41f226af30000000, 0D404d8fee052bdea4, 0D4208ab7fb0000000, 0D40651d7edccde926, 0D4220c3d390000000, 0D40704b1644557e0e, 0D4236c93268000000, 0D4076a6b5ca0a9e1c, 0D424ef822f0000000, 0D40afd9cc72249abe, 0D42650bba30000000, 0D40ce58de693edab5, 0D427c9aae40000000, 0D40d8c70158ac6364, 0D4293704708000000, 0D40e7614764f43e20, 0D42aa6b7658000000, 0D4106337db36fc718, 0D42c1f43fc8000000, 0D41212d98b1f611e2, 0D42d866f348000000, 0D412392bc108b37cc, 0D42f0953e28000000, 0D415ce87bdc3473dc, 0D430689e220000000, 0D414bc8d5ae99ad14, 0D431ea215a0000000, 0D415d20d76744835c);

decl function &_gcc_cosh(arg_f64 %ret)(arg_f64 %x);


function &_gcc_cosh(arg_f64 %_gcc_cosh)(arg_f64 %x)
{

@_gcc_cosh_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	class_b1_f64	$c0, $d0, 516;
	cvt_u32_b1	$s0, $c0;
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s1, $c0;
	or_b32	$s0, $s1, $s0;
	abs_f64	$d0, $d0;
	add_f64	$d1, $d0, 0Dbfe62e42fefa3800;
	class_b1_f64	$c0, $d1, 3;
	cvt_u32_b1	$s1, $c0;
	and_b32	$s1, $s1, 1;
	mul_f64	$d2, $d1, 0D40571547652b82fe;
	cvt_s32_f64	$s2, $d2;
	cvt_near_f64_s32	$d2, $s2;
	fma_f64	$d3, 0Dbf862e42fefa0000, $d2, $d1;
	fma_f64	$d2, 0Dbd1cf79abc9e3b39, $d2, $d3;
	fma_f64	$d3, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111;
	fma_f64	$d3, $d2, $d3, 0D3fa5555555555555;
	fma_f64	$d3, $d2, $d3, 0D3fc5555555555555;
	fma_f64	$d3, $d2, $d3, 0D3fe0000000000000;
	and_b32	$s4, $s2, 63;
	shr_s32	$s3, $s2, 6;
	fma_f64	$d3, $d2, $d3, 0D3ff0000000000000;
	cvt_u64_u32	$d4, $s4;
	mul_f64	$d2, $d2, $d3;
	shl_u64	$d5, $d4, 4;
	ld_v2_readonly_align(16)_f64	($d3, $d4), [&__math64_TWO_TO_JBY64_EP][$d5];
	add_f64	$d5, $d3, $d4;
	fma_f64	$d2, $d5, $d2, $d4;
	add_f64	$d2, $d2, $d3;
	cmp_eq_b1_s32	$c0, $s3, -1022;
	cmp_lt_b1_f64	$c1, $d2, 0D3ff0000000000000;
	and_b1	$c0, $c0, $c1;
	cmp_eq_b1_s32	$c1, $s3, 0;
	cmp_eq_b1_f64	$c2, $d2, 0D0000000000000000;
	or_b1	$c1, $c1, $c2;
	mul_f64	$d3, $d2, 0D4340000000000000;
	mov_b64	$d4, $d3;
	shr_u64	$d3, $d4, 52;
	cvt_u32_u64	$s4, $d3;
	and_b32	$s4, $s4, 2047;
	add_u32	$s4, $s4, 4294967243;
	mov_b64	$d3, $d2;
	shr_u64	$d5, $d3, 52;
	cvt_u32_u64	$s5, $d5;
	and_b32	$s5, $s5, 2047;
	cmp_eq_b1_s32	$c2, $s5, 0;
	cmov_b32	$s6, $c2, $s4, $s5;
	cmov_b64	$d5, $c2, $d4, $d3;
	class_b1_f64	$c2, $d2, 516;
	cvt_u32_b1	$s4, $c2;
	and_b32	$s4, $s4, 1;
	cvt_u32_b1	$s5, $c1;
	cmp_lt_b1_s32	$c1, $s3, -1022;
	or_b1	$c0, $c1, $c0;
	cvt_s32_f64	$s7, $d0;
	min_s32	$s7, $s7, 36;
	cvt_near_f64_s32	$d4, $s7;
	sub_f64	$d4, $d0, $d4;
	mul_f64	$d6, $d4, $d4;
	fma_f64	$d7, $d6, 0D3d6b4125921ea08b, 0D3de611cb2bdcb7be;
	fma_f64	$d7, $d6, $d7, 0D3e5ae6460fbe61c0;
	fma_f64	$d7, $d6, $d7, 0D3ec71de3a4e13e7d;
	fma_f64	$d7, $d6, $d7, 0D3f2a01a01a01ee80;
	mul_f64	$d9, $d4, $d6;
	fma_f64	$d7, $d6, $d7, 0D3f811111111110fd;
	fma_f64	$d12, $d6, $d7, 0D3fc5555555555555;
	fma_f64	$d13, $d6, 0D3da9984b7f63fcd7, 0D3e21ee56385b7b20;
	cvt_s64_s32	$d7, $s7;
	shl_u64	$d14, $d7, 4;
	ld_v2_readonly_align(16)_f64	($d7, $d10), [&__math64_SINH_TBL][$d14];
	ld_v2_readonly_align(16)_f64	($d8, $d11), [&__math64_COSH_TBL][$d14];
	mul_f64	$d9, $d9, $d12;
	fma_f64	$d12, $d6, $d13, 0D3e927e5069f1cb55;
	fma_f64	$d12, $d6, $d12, 0D3efa01a019079011;
	fma_f64	$d12, $d6, $d12, 0D3f56c16c16c212e5;
	fma_f64	$d12, $d6, $d12, 0D3fa5555555555502;
	fma_f64	$d12, $d6, $d12, 0D3fe0000000000000;
	mul_f64	$d6, $d6, $d12;
	mul_f64	$d12, $d6, $d11;
	fma_f64	$d12, $d10, $d9, $d12;
	fma_f64	$d10, $d10, $d4, $d12;
	add_f64	$d10, $d11, $d10;
	fma_f64	$d6, $d8, $d6, $d10;
	fma_f64	$d6, $d7, $d9, $d6;
	fma_f64	$d4, $d7, $d4, $d6;
	add_f64	$d4, $d8, $d4;
	cmp_lt_b1_f64	$c1, $d0, 0D3e30000000000000;
	cmov_b64	$d4, $c1, 4607182418800017408, $d4;
	and_b64	$d5, $d5, 9227875636482146303;
	add_u32	$s6, $s6, $s3;
	max_s32	$s6, $s6, -2047;
	min_s32	$s6, $s6, 2047;
	cvt_u64_u32	$d6, $s6;
	shl_u64	$d6, $d6, 52;
	or_b64	$d6, $d5, $d6;
	add_u32	$s7, $s6, 53;
	cvt_u64_u32	$d7, $s7;
	shl_u64	$d7, $d7, 52;
	or_b64	$d5, $d5, $d7;
	mul_f64	$d5, $d5, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c1, $s6, 0;
	cmov_b64	$d5, $c1, $d6, $d5;
	and_b64	$d3, $d3, 9223372036854775808;
	or_b64	$d6, $d3, 9218868437227405312;
	cmp_eq_b1_s32	$c1, $s6, 2047;
	cmov_b64	$d5, $c1, $d6, $d5;
	cmp_lt_b1_s32	$c1, $s6, -53;
	cmov_b64	$d3, $c1, $d3, $d5;
	or_b32	$s4, $s5, $s4;
	cmp_ne_b1_s32	$c1, $s4, 0;
	cmov_b64	$d3, $c1, $d2, $d3;
	shr_s32	$s2, $s2, 8;
	sub_u32	$s4, 1023, $s2;
	add_u32	$s3, $s4, $s3;
	cvt_u64_u32	$d5, $s3;
	shl_u64	$d5, $d5, 52;
	add_u32	$s2, $s2, 1023;
	cvt_u64_u32	$d6, $s2;
	shl_u64	$d6, $d6, 52;
	mul_f64	$d2, $d6, $d2;
	mul_f64	$d2, $d5, $d2;
	cmov_b64	$d2, $c0, $d2, $d3;
	cvt_b1_u32	$c0, $s1;
	cmov_b64	$d2, $c0, $d1, $d2;
	cmp_gt_b1_f64	$c0, $d1, 0D40862e42fefa39ef;
	cmov_b64	$d2, $c0, 9218868437227405312, $d2;
	cmp_lt_b1_f64	$c0, $d1, 0Dc0874910d52d3051;
	cmov_b64	$d1, $c0, 0, $d2;
	fma_f64	$d1, $d1, 0Dbd2ef35793c76641, $d1;
	cmp_ge_b1_f64	$c0, $d0, 0D4032b708872320e2;
	cmov_b64	$d1, $c0, $d1, $d4;
	cmp_ge_b1_f64	$c0, $d0, 0D408633ce8fb9f87e;
	cmov_b64	$d1, $c0, 9218868437227405312, $d1;
	and_b32	$s0, $s0, 1;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d0, $c0, $d0, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_cosh];
	ret;
};

align(16) readonly_f64 &__math64_POWLOG_TBL[516] = f64[](0D0000000000000000, 0D0000000000000000, 0D3f6ff00aa0000000, 0D3db5885e0250435a, 0D3f7fe02a60000000, 0D3de620cf11f86ed2, 0D3f87dc4750000000, 0D3dff0214edba4a25, 0D3f8fc0a8b0000000, 0D3dbf807c79f3db4e, 0D3f93cea440000000, 0D3dea352ba779a52b, 0D3f97b91b00000000, 0D3dff56c46aa49fd5, 0D3f9b9fc020000000, 0D3dfebe465fef5196, 0D3f9f829b00000000, 0D3e0cf0660099f1f8, 0D3fa1b0d980000000, 0D3e1247b2ff85945d, 0D3fa39e87b0000000, 0D3e13fd7abf5202b6, 0D3fa58a5ba0000000, 0D3e1f91c9a918d51e, 0D3fa77458f0000000, 0D3e08cb73f118d3ca, 0D3fa95c8300000000, 0D3e1d91c7d6fad074, 0D3fab42dd70000000, 0D3de1971bec28d14c, 0D3fad276b80000000, 0D3e15b616a423c78a, 0D3faf0a30c0000000, 0D3da162a6617cc971, 0D3fb0759830000000, 0D3e166391c4c06d29, 0D3fb16536e0000000, 0D3e2d46f5c1d0c4b8, 0D3fb253f620000000, 0D3e2e14282df1f6d3, 0D3fb341d790000000, 0D3e186f47424a660d, 0D3fb42edcb0000000, 0D3e2d4c8de077753e, 0D3fb51b0730000000, 0D3e2e0c307ed24f1c, 0D3fb60658a0000000, 0D3e226ea18763bdd3, 0D3fb6f0d280000000, 0D3e25cad69737c933, 0D3fb7da7660000000, 0D3e2af62599088901, 0D3fb8c345d0000000, 0D3e18c66c83d6b2d0, 0D3fb9ab4240000000, 0D3e1880ceb36fb30f, 0D3fba926d30000000, 0D3e2495aac6ca17a4, 0D3fbb78c820000000, 0D3e2761db4210878c, 0D3fbc5e5480000000, 0D3e2eb78e862bac2f, 0D3fbd4313d0000000, 0D3e19b2cd75790dd9, 0D3fbe270760000000, 0D3e2c55e5cbd3d50f, 0D3fbf0a30c0000000, 0D3db162a6617cc971, 0D3fbfec9130000000, 0D3dfdbeabaaa2e519, 0D3fc0671510000000, 0D3e1652cb7150c647, 0D3fc0d77e70000000, 0D3e39a11cb2cd2ee2, 0D3fc1478580000000, 0D3e219d0ab1a28813, 0D3fc1b72ad0000000, 0D3e24bd9e80a41811, 0D3fc2266f10000000, 0D3e3214b596faa3df, 0D3fc29552f0000000, 0D3e303fea46980bb8, 0D3fc303d710000000, 0D3e31c8ffa5fd28c7, 0D3fc371fc20000000, 0D3dce8f743bcd96c5, 0D3fc3dfc2b0000000, 0D3dfd98c5395315c6, 0D3fc44d2b60000000, 0D3e3996fa3ccfa7b2, 0D3fc4ba36f0000000, 0D3e1cd2af2ad13037, 0D3fc526e5e0000000, 0D3e1d0da1bd17200e, 0D3fc59338d0000000, 0D3e3330410ba68b75, 0D3fc5ff3070000000, 0D3df4f27a790e7c41, 0D3fc66acd40000000, 0D3e13956a86f6ff1b, 0D3fc6d60fe0000000, 0D3e2c6748723551d9, 0D3fc740f8f0000000, 0D3e2500de9326cdfc, 0D3fc7ab8900000000, 0D3e1086c848df1b59, 0D3fc815c0a0000000, 0D3e04357ead6836ff, 0D3fc87fa060000000, 0D3e24832442408024, 0D3fc8e928d0000000, 0D3e3d10da8154b13d, 0D3fc9525a90000000, 0D3e39e8ad68ec8260, 0D3fc9bb3620000000, 0D3e3cfbf706abaf18, 0D3fca23bc10000000, 0D3e3fc56ac6326e23, 0D3fca8becf0000000, 0D3e39105e3185cf21, 0D3fcaf3c940000000, 0D3e3d017fe5b19cc0, 0D3fcb5b5190000000, 0D3e3d1f6b48dd13fe, 0D3fcbc28670000000, 0D3e20b63358a7e73a, 0D3fcc296850000000, 0D3e263063028c211c, 0D3fcc8ff7c0000000, 0D3e2e6a6886b09760, 0D3fccf63540000000, 0D3e3c138bb891cd03, 0D3fcd5c2160000000, 0D3e369f7722b7221a, 0D3fcdc1bca0000000, 0D3df57d8fac1a628c, 0D3fce270760000000, 0D3e3c55e5cbd3d50f, 0D3fce8c0250000000, 0D3e1552d2ff48fe2e, 0D3fcef0adc0000000, 0D3e37b8b26ca431bc, 0D3fcf550a50000000, 0D3e292decdc1c5f6d, 0D3fcfb91860000000, 0D3e3abc7c551aaa8c, 0D3fd00e6c40000000, 0D3e36b540731a354b, 0D3fd0402590000000, 0D3e32d341036b89ef, 0D3fd071b850000000, 0D3e4f9ab21a3a2e0f, 0D3fd0a324e0000000, 0D3e239c871afb9fbd, 0D3fd0d46b50000000, 0D3e3e6add2c81f640, 0D3fd1058bf0000000, 0D3e435c95aa313f41, 0D3fd1368700000000, 0D3e249d4582f6cc53, 0D3fd1675ca0000000, 0D3e47574c1c07398f, 0D3fd1980d20000000, 0D3e4ba846dece9e8d, 0D3fd1c898c0000000, 0D3e16999fafbc68e7, 0D3fd1f8ff90000000, 0D3e4c9145e51b0103, 0D3fd22941f0000000, 0D3e479ef2cb44850a, 0D3fd2596010000000, 0D3e0beec73de11275, 0D3fd2895a10000000, 0D3e2ef4351af5a498, 0D3fd2b93030000000, 0D3e45713a493b4a50, 0D3fd2e8e2b0000000, 0D3e45c23a61385992, 0D3fd31871c0000000, 0D3e42a88309f57299, 0D3fd347dd90000000, 0D3e4530faa9ac8ace, 0D3fd3772660000000, 0D3e25fec2d792a758, 0D3fd3a64c50000000, 0D3e35a517a71cbcd7, 0D3fd3d54fa0000000, 0D3e3707dc3e1cd9a3, 0D3fd4043080000000, 0D3e3a1a9f8ef43049, 0D3fd432ef20000000, 0D3e4409d0276b3674, 0D3fd4618bc0000000, 0D3e20e2f613e85bd9, 0D3fd4900680000000, 0D3df0027433001e5f, 0D3fd4be5f90000000, 0D3e35dde2836d3265, 0D3fd4ec9730000000, 0D3e2300134d7aaf04, 0D3fd51aad80000000, 0D3e3cb7e0b42724f5, 0D3fd548a2c0000000, 0D3e2d6e93167e6308, 0D3fd5767710000000, 0D3e3d1569b1526adb, 0D3fd5a42ab0000000, 0D3e0e99fc338a1a41, 0D3fd5d1bdb0000000, 0D3e4eb01394a11b1c, 0D3fd5ff3070000000, 0D3e04f27a790e7c41, 0D3fd62c82f0000000, 0D3e25ce3ca97b7af9, 0D3fd659b570000000, 0D3e281f0f940ed857, 0D3fd686c810000000, 0D3e4d36295d88857c, 0D3fd6b3bb20000000, 0D3e21aca1ec4af526, 0D3fd6e08ea0000000, 0D3e445743c7182726, 0D3fd70d42e0000000, 0D3e23c491aead337e, 0D3fd739d7f0000000, 0D3e3aef401a738931, 0D3fd7664e10000000, 0D3e21cede76092a29, 0D3fd792a550000000, 0D3e4fba8f44f82bb4, 0D3fd7bede00000000, 0D3e446f5f7f3c3e1a, 0D3fd7eaf830000000, 0D3e47055f86c9674b, 0D3fd816f410000000, 0D3e4b41a92b6b6e1a, 0D3fd842d1d0000000, 0D3e443d162e927628, 0D3fd86e9190000000, 0D3e4466174013f9b1, 0D3fd89a3380000000, 0D3e3b05096ad69c62, 0D3fd8c5b7c0000000, 0D3e40b169150faa58, 0D3fd8f11e80000000, 0D3e3cd98b1df85da7, 0D3fd91c67e0000000, 0D3e468b507b0f8fa8, 0D3fd9479410000000, 0D3e48422df57499ba, 0D3fd972a340000000, 0D3e11351586970274, 0D3fd99d9580000000, 0D3e117e08acba92ee, 0D3fd9c86b00000000, 0D3e26e04314dd0229, 0D3fd9f323e0000000, 0D3e497f3097e56d1a, 0D3fda1dc060000000, 0D3e3356e655901286, 0D3fda484090000000, 0D3e0cb761457f94d6, 0D3fda72a490000000, 0D3e39af67a85a9dac, 0D3fda9cec90000000, 0D3e453410931a909f, 0D3fdac718c0000000, 0D3e22c587206058f5, 0D3fdaf12930000000, 0D3e223bc358899c22, 0D3fdb1b1e00000000, 0D3e4d7bf8b6d223cb, 0D3fdb44f770000000, 0D3e47991ec5197ddb, 0D3fdb6eb590000000, 0D3e4a79e6bb3a9219, 0D3fdb985890000000, 0D3e3a4c43ed663ec5, 0D3fdbc1e080000000, 0D3e461b5a1484f438, 0D3fdbeb4d90000000, 0D3e4b4e36f7ef0c3a, 0D3fdc149ff0000000, 0D3e115f026acd0d1b, 0D3fdc3dd7a0000000, 0D3e3f36b535cecf05, 0D3fdc66f4e0000000, 0D3e2ffb7fbf3eb5c6, 0D3fdc8ff7c0000000, 0D3e3e6a6886b09760, 0D3fdcb8e070000000, 0D3e3135eb27f5bbc3, 0D3fdce1af00000000, 0D3e470be7d6f6fa57, 0D3fdd0a63a0000000, 0D3e4ce43cc84ab338, 0D3fdd32fe70000000, 0D3e4c01d7aac3bd91, 0D3fdd5b7f90000000, 0D3e45c58d07961060, 0D3fdd83e720000000, 0D3e3628bcf941456e, 0D3fddac3530000000, 0D3e4c58b2a8461cd2, 0D3fddd46a00000000, 0D3e33071282fb989a, 0D3fddfc8590000000, 0D3e420dab6a80f09c, 0D3fde248810000000, 0D3e44f8d84c397b1e, 0D3fde4c71a0000000, 0D3e40d0ee08599e48, 0D3fde744260000000, 0D3e1d68787e37da36, 0D3fde9bfa60000000, 0D3e366187d591bafc, 0D3fdec399d0000000, 0D3e22346600bae772, 0D3fdeeb20c0000000, 0D3e390377d0d61b8e, 0D3fdf128f50000000, 0D3e4f5e0dd966b907, 0D3fdf39e5b0000000, 0D3e49023cb79a00e2, 0D3fdf6123f0000000, 0D3e44e05158c28ad8, 0D3fdf884a30000000, 0D3e3bfa7b08b18ae4, 0D3fdfaf5880000000, 0D3e4ef1e63db35f67, 0D3fdfd64f20000000, 0D3e0ec2ae39493d4f, 0D3fdffd2e00000000, 0D3e40afe930ab2fa0, 0D3fe011fab0000000, 0D3e225ff8a1810dd4, 0D3fe02552a0000000, 0D3e469743fb1a71a5, 0D3fe0389ee0000000, 0D3e5f9cc676785571, 0D3fe04bdf90000000, 0D3e5b524da4cbf982, 0D3fe05f14b0000000, 0D3e5a4c8b381535b8, 0D3fe0723e50000000, 0D3e5839be809caf2c, 0D3fe0855c80000000, 0D3e50968a1cb82c13, 0D3fe0986f40000000, 0D3e5eae6a41723fb5, 0D3fe0ab76b0000000, 0D3e5d9c29a380a4db, 0D3fe0be72e0000000, 0D3e4094aa0ada625e, 0D3fe0d163c0000000, 0D3e5973ad6fc108ca, 0D3fe0e44980000000, 0D3e4747322fdbab97, 0D3fe0f72410000000, 0D3e593692fa9d4221, 0D3fe109f390000000, 0D3e5c5a992dfbc7d9, 0D3fe11cb810000000, 0D3e4e1f33e102387a, 0D3fe12f7190000000, 0D3e464fbef14c048c, 0D3fe1422020000000, 0D3e4490f513ca5e3b, 0D3fe154c3d0000000, 0D3e37a6af4d4c799d, 0D3fe1675ca0000000, 0D3e57574c1c07398f, 0D3fe179eab0000000, 0D3e57b133417f8c1c, 0D3fe18c6e00000000, 0D3e5feb9e0c176514, 0D3fe19ee6b0000000, 0D3e419f25bb3172f7, 0D3fe1b154b0000000, 0D3e45f68a7bbfb852, 0D3fe1c3b810000000, 0D3e5ee278497929f1, 0D3fe1d610f0000000, 0D3e5ccee006109d58, 0D3fe1e85f50000000, 0D3e5ce081a07bd8b3, 0D3fe1faa340000000, 0D3e570e12981817b8, 0D3fe20cdcd0000000, 0D3e292ab6d93503d0, 0D3fe21f0bf0000000, 0D3e58cb7dd7c3b61e, 0D3fe23130d0000000, 0D3e4efafd0a0b78da, 0D3fe2434b60000000, 0D3e5e907267c4288e, 0D3fe2555bc0000000, 0D3e5d31ef96780875, 0D3fe2676200000000, 0D3e23430dfcd2ad50, 0D3fe2795e10000000, 0D3e344d88d75bc1f9, 0D3fe28b5000000000, 0D3e5bec0f055e04fc, 0D3fe29d37f0000000, 0D3e5d85611590b9ad, 0D3fe2af15f0000000, 0D3df320568e583229, 0D3fe2c0e9e0000000, 0D3e5a891d1772f538, 0D3fe2d2b400000000, 0D3e22edc9dabba74d, 0D3fe2e47430000000, 0D3e4b9009a1015086, 0D3fe2f62a90000000, 0D3e52a12a8c5b1a19, 0D3fe307d730000000, 0D3e3a7885f0fdac85, 0D3fe3197a00000000, 0D3e5f4ffcd43ac691, 0D3fe32b1330000000, 0D3e52243ae2640aad, 0D3fe33ca2b0000000, 0D3e546513299035d3, 0D3fe34e2890000000, 0D3e5b39c3a62dd725, 0D3fe35fa4e0000000, 0D3e5ba6dd40049f51, 0D3fe37117b0000000, 0D3e451d1ed7177409, 0D3fe38280f0000000, 0D3e5cb0f2fd7f5216, 0D3fe393e0d0000000, 0D3e3ab150cd4e2213, 0D3fe3a53730000000, 0D3e5cfd7bf3193844, 0D3fe3b68440000000, 0D3e53fff8455f1dbd, 0D3fe3c7c7f0000000, 0D3e5fee640b905fc9, 0D3fe3d90260000000, 0D3e54e2adf548084c, 0D3fe3ea3390000000, 0D3e3b597adc1ecdd2, 0D3fe3fb5b80000000, 0D3e4345bd096d3a75, 0D3fe40c7a40000000, 0D3e5101b9d2453c8b, 0D3fe41d8fe0000000, 0D3e508ce55cc8c979, 0D3fe42e9c60000000, 0D3e5bbf017e595f71, 0D3fe43f9fe0000000, 0D3e37ce733bd393dc, 0D3fe4509a50000000, 0D3e233bb0a503f8a1, 0D3fe4618bc0000000, 0D3e30e2f613e85bd9, 0D3fe4727430000000, 0D3e5e67555a635b3c, 0D3fe48353d0000000, 0D3e2ea88df73d5e8b, 0D3fe4942a80000000, 0D3e3d17e03bda18a8, 0D3fe4a4f850000000, 0D3e5b607d76044f7e, 0D3fe4b5bd60000000, 0D3e52adc4e71bc2fc, 0D3fe4c679a0000000, 0D3e5f99dc7362d1d9, 0D3fe4d72d30000000, 0D3e5473fa008e6a6a, 0D3fe4e7d810000000, 0D3e2b75bb09cb0985, 0D3fe4f87a30000000, 0D3e5ea04dd10b9aba, 0D3fe50913c0000000, 0D3e5802d0d6979674, 0D3fe519a4c0000000, 0D3e174688ccd99094, 0D3fe52a2d20000000, 0D3e496f16abb9df22, 0D3fe53aad00000000, 0D3e46e66df2aa374f, 0D3fe54b2460000000, 0D3e4e66525ea4550a, 0D3fe55b9350000000, 0D3e42d02f34f20cbd, 0D3fe56bf9d0000000, 0D3e46cfce65047188, 0D3fe57c57f0000000, 0D3e39b78c842d58b8, 0D3fe58cadb0000000, 0D3e4735e624c24bc9, 0D3fe59cfb20000000, 0D3e47eba1f7dd1adf, 0D3fe5ad4040000000, 0D3e586b3e59f65355, 0D3fe5bd7d30000000, 0D3e1ce38e637f1b4d, 0D3fe5cdb1d0000000, 0D3e58d82ec919edc7, 0D3fe5ddde50000000, 0D3e4c52648ddcfa37, 0D3fe5ee02a0000000, 0D3e52482ceae1ac12, 0D3fe5fe1ed0000000, 0D3e55a312311aba4f, 0D3fe60e32f0000000, 0D3e411e236329f225, 0D3fe61e3ef0000000, 0D3e5b48c8cd2f246c, 0D3fe62e42e0000000, 0D3e6efa39ef35793c, 0D0000000000000000, 0D0000000000000000);
align(16) readonly_f64 &__math64_LOG_F_INV_TBL[516] = f64[](0D4000000000000000, 0D0000000000000000, 0D3fffe00000000000, 0D3effe01fe01fe020, 0D3fffc00000000000, 0D3f1fc07f01fc07f0, 0D3fffa00000000000, 0D3f31caa01fa11caa, 0D3fff800000000000, 0D3f3f81f81f81f820, 0D3fff600000000000, 0D3f48856506ddaba6, 0D3fff400000000000, 0D3f5196792909c560, 0D3fff200000000000, 0D3f57d9108c2ad433, 0D3fff000000000000, 0D3f5f07c1f07c1f08, 0D3ffee00000000000, 0D3f638ff08b1c03dd, 0D3ffec00000000000, 0D3f680f6603d980f6, 0D3ffea00000000000, 0D3f6d00f57403d5d0, 0D3ffe900000000000, 0D3f331abf0b7672a0, 0D3ffe700000000000, 0D3f506a965d43919b, 0D3ffe500000000000, 0D3f5ceb240795ceb2, 0D3ffe300000000000, 0D3f6522f3b834e67f, 0D3ffe100000000000, 0D3f6c3c3c3c3c3c3c, 0D3ffe000000000000, 0D3f3e01e01e01e01e, 0D3ffde00000000000, 0D3f575b8fe21a291c, 0D3ffdc00000000000, 0D3f6403b9403b9404, 0D3ffda00000000000, 0D3f6cc0ed7303b5cc, 0D3ffd900000000000, 0D3f479118f3fc4da2, 0D3ffd700000000000, 0D3f5ed952e0b0ce46, 0D3ffd500000000000, 0D3f695900eae56404, 0D3ffd400000000000, 0D3f3d41d41d41d41d, 0D3ffd200000000000, 0D3f5cb28ff16c69ae, 0D3ffd000000000000, 0D3f696b1edd80e866, 0D3ffcf00000000000, 0D3f4372e225fe30d9, 0D3ffcd00000000000, 0D3f60ad12073615a2, 0D3ffcb00000000000, 0D3f6cdb2c0397cdb3, 0D3ffca00000000000, 0D3f52cc157b864407, 0D3ffc800000000000, 0D3f664cb5f7148404, 0D3ffc700000000000, 0D3f3c71c71c71c71c, 0D3ffc500000000000, 0D3f6129a21a930b84, 0D3ffc300000000000, 0D3f6f1e0387f1e038, 0D3ffc200000000000, 0D3f5ad4e4ba80709b, 0D3ffc000000000000, 0D3f6c0e070381c0e0, 0D3ffbf00000000000, 0D3f560fba1a362bb0, 0D3ffbd00000000000, 0D3f6a5713280dee96, 0D3ffbc00000000000, 0D3f53f59620f9ece9, 0D3ffba00000000000, 0D3f69f22983759f23, 0D3ffb900000000000, 0D3f5478ac63fc8d5c, 0D3ffb700000000000, 0D3f6ad87bb4671656, 0D3ffb600000000000, 0D3f578b8efbb8148c, 0D3ffb400000000000, 0D3f6d0369d0369d03, 0D3ffb300000000000, 0D3f5d212b601b3748, 0D3ffb200000000000, 0D3f0b2036406c80d9, 0D3ffb000000000000, 0D3f629663b24547d1, 0D3ffaf00000000000, 0D3f4435e50d79435e, 0D3ffad00000000000, 0D3f67d0ff2920bc03, 0D3ffac00000000000, 0D3f55c06b15c06b16, 0D3ffaa00000000000, 0D3f6e3a5f0fd7f954, 0D3ffa900000000000, 0D3f61dec0d4c77b03, 0D3ffa800000000000, 0D3f473289870ac52e, 0D3ffa600000000000, 0D3f6a034da034da03, 0D3ffa500000000000, 0D3f5d041da2292856, 0D3ffa400000000000, 0D3f3a41a41a41a41a, 0D3ffa200000000000, 0D3f68550f8a39409d, 0D3ffa100000000000, 0D3f5b4fe5e92c0686, 0D3ffa000000000000, 0D3f3a01a01a01a01a, 0D3ff9e00000000000, 0D3f691d2a2067b23a, 0D3ff9d00000000000, 0D3f5e7c5dada0b4e5, 0D3ff9c00000000000, 0D3f468a7725080ce1, 0D3ff9a00000000000, 0D3f6c49d4aa21b490, 0D3ff9900000000000, 0D3f63333333333333, 0D3ff9800000000000, 0D3f54bc363b03fccf, 0D3ff9700000000000, 0D3f2c9f01970e4f81, 0D3ff9500000000000, 0D3f697617c6ef5b25, 0D3ff9400000000000, 0D3f6161f9add3c0ca, 0D3ff9300000000000, 0D3f5319fe6cb39806, 0D3ff9200000000000, 0D3f2f693a1c451ab3, 0D3ff9000000000000, 0D3f6a9e240321a9e2, 0D3ff8f00000000000, 0D3f63831f3831f383, 0D3ff8e00000000000, 0D3f5949ebc4dcfc1c, 0D3ff8d00000000000, 0D3f480c6980c6980c, 0D3ff8b00000000000, 0D3f6f9d00c5fe7403, 0D3ff8a00000000000, 0D3f69721ed7e75347, 0D3ff8900000000000, 0D3f6381ec0313381f, 0D3ff8800000000000, 0D3f5b97c2aec12653, 0D3ff8700000000000, 0D3f509ef3024ae3ba, 0D3ff8600000000000, 0D3f38618618618618, 0D3ff8400000000000, 0D3f6e0184f00c2780, 0D3ff8300000000000, 0D3f692ef5657dba52, 0D3ff8200000000000, 0D3f64940305494030, 0D3ff8100000000000, 0D3f60303030303030, 0D3ff8000000000000, 0D3f58060180601806, 0D3ff7f00000000000, 0D3f5017f405fd017f, 0D3ff7e00000000000, 0D3f412a8ad278e8dd, 0D3ff7d00000000000, 0D3f17d05f417d05f4, 0D3ff7b00000000000, 0D3f6d67245c02f7d6, 0D3ff7a00000000000, 0D3f6a4411c1d986a9, 0D3ff7900000000000, 0D3f6754d76c7316df, 0D3ff7800000000000, 0D3f649902f149902f, 0D3ff7700000000000, 0D3f621023358c1a68, 0D3ff7600000000000, 0D3f5f7390d2a6c406, 0D3ff7500000000000, 0D3f5b2b0805d5b2b1, 0D3ff7400000000000, 0D3f5745d1745d1746, 0D3ff7300000000000, 0D3f53c31507fa32c4, 0D3ff7200000000000, 0D3f50a1fd1b7af017, 0D3ff7100000000000, 0D3f4bc36ce3e0453a, 0D3ff7000000000000, 0D3f4702e05c0b8170, 0D3ff6f00000000000, 0D3f4300b79300b793, 0D3ff6e00000000000, 0D3f3f76b4337c6cb1, 0D3ff6d00000000000, 0D3f3a62681c860fb0, 0D3ff6c00000000000, 0D3f36c16c16c16c17, 0D3ff6b00000000000, 0D3f3490aa31a3cfc7, 0D3ff6a00000000000, 0D3f33cd153729043e, 0D3ff6900000000000, 0D3f3473a88d0bfd2e, 0D3ff6800000000000, 0D3f36816816816817, 0D3ff6700000000000, 0D3f39f36016719f36, 0D3ff6600000000000, 0D3f3ec6a5122f9016, 0D3ff6500000000000, 0D3f427c29da5519cf, 0D3ff6400000000000, 0D3f4642c8590b2164, 0D3ff6300000000000, 0D3f4ab5c45606f00b, 0D3ff6200000000000, 0D3f4fd3b80b11fd3c, 0D3ff6100000000000, 0D3f52cda0c6ba4eaa, 0D3ff6000000000000, 0D3f56058160581606, 0D3ff5f00000000000, 0D3f5990d0a4b7ef87, 0D3ff5e00000000000, 0D3f5d6ee340579d6f, 0D3ff5d00000000000, 0D3f60cf87d9c54a69, 0D3ff5c00000000000, 0D3f6310572620ae4c, 0D3ff5b00000000000, 0D3f65798c8ff522a2, 0D3ff5a00000000000, 0D3f680ad602b580ad, 0D3ff5900000000000, 0D3f6ac3e24799546f, 0D3ff5800000000000, 0D3f6da46102b1da46, 0D3ff5800000000000, 0D3f15805601580560, 0D3ff5700000000000, 0D3f3ed3c506b39a23, 0D3ff5600000000000, 0D3f4cbdd3e2970f60, 0D3ff5500000000000, 0D3f55555555555555, 0D3ff5400000000000, 0D3f5c979aee0bf805, 0D3ff5300000000000, 0D3f621291e81fd58e, 0D3ff5200000000000, 0D3f65fead500a9580, 0D3ff5100000000000, 0D3f6a0fd5c5f02a3a, 0D3ff5000000000000, 0D3f6e45c223898adc, 0D3ff5000000000000, 0D3f35015015015015, 0D3ff4f00000000000, 0D3f4c7b16ea64d422, 0D3ff4e00000000000, 0D3f57829cbc14e5e1, 0D3ff4d00000000000, 0D3f60877db8589720, 0D3ff4c00000000000, 0D3f65710e4b5edcea, 0D3ff4b00000000000, 0D3f6a7dbb4d1fc1c8, 0D3ff4a00000000000, 0D3f6fad40a57eb503, 0D3ff4a00000000000, 0D3f43fd6bb00a5140, 0D3ff4900000000000, 0D3f54e78ecb419ba9, 0D3ff4800000000000, 0D3f600a44029100a4, 0D3ff4700000000000, 0D3f65c28f5c28f5c3, 0D3ff4600000000000, 0D3f6b9c68b2c0cc4a, 0D3ff4600000000000, 0D3f2978feb9f34381, 0D3ff4500000000000, 0D3f4ecf163bb6500a, 0D3ff4400000000000, 0D3f5be1958b67ebb9, 0D3ff4300000000000, 0D3f644e6157dc9a3b, 0D3ff4200000000000, 0D3f6acc4baa3f0ddf, 0D3ff4200000000000, 0D3f26a4cbcb2a247b, 0D3ff4100000000000, 0D3f50505050505050, 0D3ff4000000000000, 0D3f5e0b4439959819, 0D3ff3f00000000000, 0D3f66027f6027f602, 0D3ff3e00000000000, 0D3f6d1e854b5e0db4, 0D3ff3e00000000000, 0D3f4165e7254813e2, 0D3ff3d00000000000, 0D3f576646a9d716ef, 0D3ff3c00000000000, 0D3f632b48f757ce88, 0D3ff3b00000000000, 0D3f6ac1b24652a906, 0D3ff3b00000000000, 0D3f33b13b13b13b14, 0D3ff3a00000000000, 0D3f5490e1eb208984, 0D3ff3900000000000, 0D3f62385830fec66e, 0D3ff3800000000000, 0D3f6a45a6cc111b7e, 0D3ff3800000000000, 0D3f33813813813814, 0D3ff3700000000000, 0D3f556f472517b708, 0D3ff3600000000000, 0D3f631be7bc0e8f2a, 0D3ff3500000000000, 0D3f6b9cbf3e55f044, 0D3ff3500000000000, 0D3f40e7d95bc609a9, 0D3ff3400000000000, 0D3f59e6b3804d19e7, 0D3ff3300000000000, 0D3f65c8b6af7963c2, 0D3ff3200000000000, 0D3f6eb9dad43bf402, 0D3ff3200000000000, 0D3f4f1a515885fb37, 0D3ff3100000000000, 0D3f60eeb1d3d76c02, 0D3ff3000000000000, 0D3f6a320261a32026, 0D3ff3000000000000, 0D3f3c82ac40260390, 0D3ff2f00000000000, 0D3f5a12f684bda12f, 0D3ff2e00000000000, 0D3f669d43fda2962c, 0D3ff2e00000000000, 0D3f02e025c04b8097, 0D3ff2d00000000000, 0D3f542804b542804b, 0D3ff2c00000000000, 0D3f63f69b02593f6a, 0D3ff2b00000000000, 0D3f6df31cb46e21fa, 0D3ff2b00000000000, 0D3f5012b404ad012b, 0D3ff2a00000000000, 0D3f623925e7820a7f, 0D3ff2900000000000, 0D3f6c8253c8253c82, 0D3ff2900000000000, 0D3f4b92ddc02526e5, 0D3ff2800000000000, 0D3f61602511602511, 0D3ff2700000000000, 0D3f6bf471439c9adf, 0D3ff2700000000000, 0D3f4a85c40939a85c, 0D3ff2600000000000, 0D3f6166f9ac024d16, 0D3ff2500000000000, 0D3f6c44e10125e227, 0D3ff2500000000000, 0D3f4cebf48bbd90e5, 0D3ff2400000000000, 0D3f62492492492492, 0D3ff2300000000000, 0D3f6d6f2e2ec0b673, 0D3ff2300000000000, 0D3f5159e26af37c05, 0D3ff2200000000000, 0D3f64024540245402, 0D3ff2100000000000, 0D3f6f6f0243f6f024, 0D3ff2100000000000, 0D3f55e60121579805, 0D3ff2000000000000, 0D3f668e18cf81b10f, 0D3ff2000000000000, 0D3f32012012012012, 0D3ff1f00000000000, 0D3f5c11f7047dc11f, 0D3ff1e00000000000, 0D3f69e878ff70985e, 0D3ff1e00000000000, 0D3f4779d9fdc3a219, 0D3ff1d00000000000, 0D3f61eace5c957907, 0D3ff1c00000000000, 0D3f6e0d5b450239e1, 0D3ff1c00000000000, 0D3f548bf073816367, 0D3ff1b00000000000, 0D3f6694808dda5202, 0D3ff1b00000000000, 0D3f37c67f2bae2b21, 0D3ff1a00000000000, 0D3f5ee58469ee5847, 0D3ff1900000000000, 0D3f6c0233c0233c02, 0D3ff1900000000000, 0D3f514e02328a7012, 0D3ff1800000000000, 0D3f6561072057b573, 0D3ff1800000000000, 0D3f31811811811812, 0D3ff1700000000000, 0D3f5e28646f5a1060, 0D3ff1600000000000, 0D3f6c0d1284e6f1d7, 0D3ff1600000000000, 0D3f523543f0c80459, 0D3ff1500000000000, 0D3f663cbeea4e1a09, 0D3ff1500000000000, 0D3f3b9a3fdd5c8cb8, 0D3ff1400000000000, 0D3f60be1c159a76d2, 0D3ff1300000000000, 0D3f6e1d1a688e4838, 0D3ff1300000000000, 0D3f572044d72044d7, 0D3ff1200000000000, 0D3f691713db81577b, 0D3ff1200000000000, 0D3f4ac73ae9819b50, 0D3ff1100000000000, 0D3f6460334e904cf6, 0D3ff1100000000000, 0D3f31111111111111, 0D3ff1000000000000, 0D3f5feef80441fef0, 0D3ff0f00000000000, 0D3f6de021fde021fe, 0D3ff0f00000000000, 0D3f57b7eacc9686a0, 0D3ff0e00000000000, 0D3f69ead7cd391fbc, 0D3ff0e00000000000, 0D3f50195609804390, 0D3ff0d00000000000, 0D3f6641511e8d2b32, 0D3ff0d00000000000, 0D3f4222b1acf1ce96, 0D3ff0c00000000000, 0D3f62e29f79b47582, 0D3ff0c00000000000, 0D3f24f0d1682e11cd, 0D3ff0b00000000000, 0D3f5f9bb096771e4d, 0D3ff0a00000000000, 0D3f6e5ee45dd96ae2, 0D3ff0a00000000000, 0D3f5a0429a0429a04, 0D3ff0900000000000, 0D3f6bb74d5f06c021, 0D3ff0900000000000, 0D3f54fce404254fce, 0D3ff0800000000000, 0D3f695766eacbc402, 0D3ff0800000000000, 0D3f50842108421084, 0D3ff0700000000000, 0D3f673e5371d5c338, 0D3ff0700000000000, 0D3f4930523fbe3368, 0D3ff0600000000000, 0D3f656b38f225f6c4, 0D3ff0600000000000, 0D3f426e978d4fdf3b, 0D3ff0500000000000, 0D3f63dd40e4eb0cc6, 0D3ff0500000000000, 0D3f397f7d73404146, 0D3ff0400000000000, 0D3f6293982cc98af1, 0D3ff0400000000000, 0D3f30410410410410, 0D3ff0300000000000, 0D3f618d6f048ff7e4, 0D3ff0300000000000, 0D3f2236a3ebc349de, 0D3ff0200000000000, 0D3f60c9f8ee53d18c, 0D3ff0200000000000, 0D3f10204081020408, 0D3ff0100000000000, 0D3f60486ca2f46ea6, 0D3ff0100000000000, 0D3ef0101010101010, 0D3ff0000000000000, 0D3f60080402010080, 0D3ff0000000000000, 0D0000000000000000, 0D0000000000000000, 0D0000000000000000);

decl function &_gcc_pow(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y);


function &_gcc_pow(arg_f64 %_gcc_pow)(
	arg_f64 %x,
	arg_f64 %y)
{
	align(4) spill_u8 %__spillStack[44];

@_gcc_pow_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d7, [%y];
	mov_b64	$d1, $d7;
	and_b64	$d0, $d1, 9223372036854775807;
	shr_u64	$d2, $d0, 52;
	cvt_u32_u64	$s2, $d2;
	sub_u32	$s0, 1075, $s2;
	shl_u64	$d2, 1, $s0;
	and_b64	$d3, $d2, $d0;
	cmp_ne_b1_s64	$c0, $d3, 0;
	cmov_b32	$s0, $c0, 1, 2;
	add_u64	$d2, $d2, 9223372036854775807;
	and_b64	$d2, $d2, $d0;
	cmp_ne_b1_s64	$c0, $d2, 0;
	cmov_b32	$s1, $c0, 0, $s0;
	ld_arg_align(8)_f64	$d2, [%x];
	and_b64	$d3, $d2, 9223372036854775807;
	cmp_ne_b1_s64	$c0, $d3, $d2;
	cvt_u32_b1	$s0, $c0;
	add_u32	$s2, $s2, 4294966274;
	cmp_lt_b1_s32	$c0, $s2, 1;
	cmov_b32	$s3, $c0, 0, 2;
	cmp_gt_b1_s32	$c1, $s2, 53;
	cmov_b32	$s3, $c1, 2, $s3;
	cmp_lt_b1_s32	$c1, $s2, 54;
	cvt_u32_b1	$s4, $c1;
	cvt_u32_b1	$s5, $c0;
	and_b64	$d4, $d2, 4503599627370495;
	or_b64	$d5, $d4, 4607182418800017408;
	add_f64	$d5, $d5, 0Dbff0000000000000;
	shr_u64	$d6, $d3, 52;
	cvt_u32_u64	$s6, $d6;
	add_u32	$s2, $s6, 4294966273;
	bitextract_u64	$d6, $d5, 52, 11;
	add_u64	$d6, $d6, 4294965251;
	cvt_u32_u64	$s7, $d6;
	and_b64	$d5, $d5, 4503599627370495;
	cmp_eq_b1_s32	$c0, $s6, 0;
	cmov_b64	$d9, $c0, $d5, $d4;
	cmov_b32	$s2, $c0, $s7, $s2;
	cmp_eq_b1_s64	$c0, $d2, -4616189618054758400;
	cmp_eq_b1_s64	$c1, $d0, 9218868437227405312;
	and_b1	$c0, $c0, $c1;
	cvt_u32_b1	$s6, $c0;
	st_spill_align(4)_u32	$s6, [%__spillStack];
	cmp_eq_b1_s64	$c0, $d3, $d2;
	cmov_b64	$d4, $c0, 0, 9223372036854775808;
	cmov_b64	$d5, $c0, 9218868437227405312, 18442240474082181120;
	cmp_eq_b1_s64	$c0, $d0, $d1;
	cmp_ne_b1_s64	$c2, $d0, $d1;
	cmp_eq_b1_s64	$c1, $d2, -4503599627370496;
	and_b1	$c3, $c2, $c1;
	and_b1	$c1, $c1, $c0;
	cmp_eq_b1_s64	$c5, $d2, 9218868437227405312;
	cmp_eq_b1_s64	$c4, $d3, 0;
	and_b1	$c7, $c2, $c4;
	and_b1	$c2, $c2, $c5;
	cvt_u32_b1	$s6, $c2;
	st_spill_align(4)_u32	$s6, [%__spillStack][8];
	and_b1	$c2, $c5, $c0;
	cvt_u32_b1	$s6, $c2;
	st_spill_align(4)_u32	$s6, [%__spillStack][12];
	and_b1	$c5, $c4, $c0;
	cmp_eq_b1_s64	$c0, $d1, -4503599627370496;
	and_b1	$c2, $c4, $c0;
	cvt_u32_b1	$s6, $c2;
	st_spill_align(4)_u32	$s6, [%__spillStack][16];
	cmp_eq_b1_s64	$c2, $d1, 9218868437227405312;
	cmp_gt_b1_u64	$c4, $d3, 4607182418800017408;
	and_b1	$c6, $c4, $c0;
	cvt_u32_b1	$s6, $c6;
	st_spill_align(4)_u32	$s6, [%__spillStack][24];
	and_b1	$c4, $c4, $c2;
	cvt_u32_b1	$s6, $c4;
	st_spill_align(4)_u32	$s6, [%__spillStack][20];
	cmp_lt_b1_u64	$c4, $d3, 4607182418800017408;
	and_b1	$c0, $c4, $c0;
	cvt_u32_b1	$s6, $c0;
	st_spill_align(4)_u32	$s6, [%__spillStack][32];
	and_b1	$c0, $c4, $c2;
	cvt_u32_b1	$s6, $c0;
	st_spill_align(4)_u32	$s6, [%__spillStack][28];
	not_b32	$s5, $s5;
	and_b32	$s4, $s5, $s4;
	cmp_ne_b1_s32	$c0, $s4, 0;
	cmov_b32	$s3, $c0, $s1, $s3;
	cmp_eq_b1_s32	$c0, $s3, 1;
	cvt_u32_b1	$s1, $c0;
	and_b32	$s1, $s1, $s0;
	cmp_ne_b1_s32	$c2, $s1, 0;
	cmov_b64	$d6, $c2, 13830554455654793216, 4607182418800017408;
	cmp_eq_b1_s32	$c2, $s3, 0;
	cvt_u32_b1	$s1, $c2;
	cmp_ne_b1_s32	$c6, $s3, 1;
	and_b1	$c2, $c1, $c6;
	cvt_u32_b1	$s3, $c2;
	st_spill_align(4)_u32	$s3, [%__spillStack][36];
	and_b1	$c1, $c1, $c0;
	cvt_u32_b1	$s3, $c1;
	st_spill_align(4)_u32	$s3, [%__spillStack][40];
	and_b1	$c2, $c6, $c3;
	and_b1	$c3, $c0, $c3;
	and_b1	$c4, $c5, $c6;
	and_b1	$c5, $c5, $c0;
	and_b1	$c6, $c6, $c7;
	and_b1	$c7, $c0, $c7;
	and_b64	$d8, $d1, 18446744073575333888;
	and_b64	$d10, $d9, 4486007441326080;
	shl_u64	$d11, $d9, 1;
	and_b64	$d11, $d11, 17592186044416;
	sub_f64	$d7, $d7, $d8;
	add_u64	$d11, $d11, $d10;
	or_b64	$d10, $d11, 4602678819172646912;
	or_b64	$d9, $d9, 4602678819172646912;
	sub_f64	$d9, $d10, $d9;
	shr_u64	$d14, $d11, 40;
	ld_v2_readonly_align(16)_f64	($d11, $d12), [&__math64_LOG_F_INV_TBL][$d14];
	add_f64	$d11, $d11, $d12;
	mul_f64	$d12, $d9, $d11;
	and_b64	$d15, $d12, 18446744073575333888;
	ld_v2_readonly_align(16)_f64	($d13, $d12), [&__math64_POWLOG_TBL][$d14];
	neg_f64	$d16, $d10;
	cvt_near_f64_s32	$d14, $s2;
	mov_b64	$d10, $d15;
	fma_f64	$d9, $d16, $d10, $d9;
	mul_f64	$d11, $d9, $d11;
	fma_f64	$d9, $d14, 0D3fe62e42e0000000, $d13;
	fma_f64	$d12, $d14, 0D3e6efa39ef35793c, $d12;
	add_f64	$d13, $d11, $d10;
	fma_f64	$d14, $d13, 0D3fc2492492492492, 0D3fc5555555555555;
	fma_f64	$d14, $d13, $d14, 0D3fc999999999999a;
	fma_f64	$d14, $d13, $d14, 0D3fd0000000000000;
	fma_f64	$d16, $d13, $d14, 0D3fd5555555555555;
	mul_f64	$d14, $d10, 0D3fe0000000000000;
	mul_f64	$d15, $d10, $d14;
	add_f64	$d14, $d10, $d15;
	sub_f64	$d17, $d10, $d14;
	add_f64	$d15, $d15, $d17;
	mul_f64	$d16, $d16, $d13;
	mul_f64	$d16, $d13, $d16;
	mul_f64	$d17, $d11, 0D3fe0000000000000;
	mul_f64	$d13, $d13, $d16;
	fma_f64	$d13, $d17, $d11, $d13;
	fma_f64	$d10, $d10, $d11, $d13;
	add_f64	$d10, $d11, $d10;
	add_f64	$d10, $d10, $d15;
	sub_f64	$d10, $d12, $d10;
	sub_f64	$d11, $d10, $d14;
	add_f64	$d12, $d14, $d11;
	sub_f64	$d12, $d10, $d12;
	add_f64	$d10, $d9, $d11;
	sub_f64	$d9, $d9, $d10;
	add_f64	$d9, $d11, $d9;
	add_f64	$d11, $d12, $d9;
	mov_b64	$d9, $d10;
	and_b64	$d9, $d9, 18446744073575333888;
	sub_f64	$d10, $d10, $d9;
	add_f64	$d10, $d11, $d10;
	mul_f64	$d11, $d7, $d10;
	fma_f64	$d10, $d8, $d10, $d11;
	fma_f64	$d10, $d7, $d9, $d10;
	fma_f64	$d7, $d8, $d9, $d10;
	neg_f64	$d11, $d7;
	fma_f64	$d8, $d8, $d9, $d11;
	add_f64	$d8, $d10, $d8;
	mul_f64	$d9, $d7, 0D40571547652b82fe;
	cvt_s32_f64	$s2, $d9;
	cvt_near_f64_s32	$d9, $s2;
	fma_f64	$d10, $d9, 0Dbf862e42f0000000, $d7;
	mul_f64	$d9, $d9, 0Dbdfdf473de6af278;
	add_f64	$d9, $d10, $d9;
	add_f64	$d8, $d8, $d9;
	fma_f64	$d9, $d8, 0D3f56c1728d739765, 0D3f811115b7aa905e;
	fma_f64	$d9, $d8, $d9, 0D3fa5555555545d4e;
	fma_f64	$d9, $d8, $d9, 0D3fc5555555548f7c;
	fma_f64	$d9, $d8, $d9, 0D3fe0000000000000;
	mul_f64	$d10, $d8, $d8;
	and_b32	$s3, $s2, 63;
	cvt_u64_u32	$d11, $s3;
	fma_f64	$d8, $d10, $d9, $d8;
	shl_u64	$d11, $d11, 4;
	ld_v2_readonly_align(16)_f64	($d9, $d10), [&__math64_TWO_TO_JBY64_EP][$d11];
	add_f64	$d11, $d9, $d10;
	fma_f64	$d8, $d11, $d8, $d10;
	add_f64	$d8, $d9, $d8;
	mul_f64	$d9, $d8, 0D4340000000000000;
	mov_b64	$d10, $d9;
	shr_u64	$d9, $d10, 52;
	cvt_u32_u64	$s3, $d9;
	and_b32	$s3, $s3, 2047;
	add_u32	$s3, $s3, 4294967243;
	mov_b64	$d9, $d8;
	shr_u64	$d11, $d9, 52;
	cvt_u32_u64	$s4, $d11;
	and_b32	$s4, $s4, 2047;
	cmp_eq_b1_s32	$c0, $s4, 0;
	cmov_b32	$s4, $c0, $s3, $s4;
	cmov_b64	$d10, $c0, $d10, $d9;
	shr_s32	$s5, $s2, 6;
	cmp_eq_b1_s32	$c0, $s5, 0;
	cmp_eq_b1_f64	$c1, $d8, 0D0000000000000000;
	or_b1	$c0, $c0, $c1;
	class_b1_f64	$c1, $d8, 516;
	cvt_u32_b1	$s2, $c1;
	and_b32	$s2, $s2, 1;
	cvt_u32_b1	$s3, $c0;
	and_b64	$d10, $d10, 9227875636482146303;
	add_u32	$s4, $s4, $s5;
	max_s32	$s4, $s4, -2047;
	min_s32	$s4, $s4, 2047;
	cvt_u64_u32	$d11, $s4;
	shl_u64	$d11, $d11, 52;
	or_b64	$d11, $d10, $d11;
	add_u32	$s5, $s4, 53;
	cvt_u64_u32	$d12, $s5;
	shl_u64	$d12, $d12, 52;
	or_b64	$d10, $d10, $d12;
	mul_f64	$d10, $d10, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c0, $s4, 0;
	cmov_b64	$d10, $c0, $d11, $d10;
	and_b64	$d9, $d9, 9223372036854775808;
	or_b64	$d11, $d9, 9218868437227405312;
	cmp_eq_b1_s32	$c0, $s4, 2047;
	cmov_b64	$d10, $c0, $d11, $d10;
	cmp_lt_b1_s32	$c0, $s4, -53;
	cmov_b64	$d9, $c0, $d9, $d10;
	or_b32	$s2, $s3, $s2;
	cmp_ne_b1_s32	$c0, $s2, 0;
	cmov_b64	$d8, $c0, $d8, $d9;
	cmp_gt_b1_f64	$c0, $d7, 0D40862e42fefa39ef;
	cmov_b64	$d8, $c0, 9218868437227405312, $d8;
	cmp_lt_b1_f64	$c0, $d7, 0Dc0874910d52d3051;
	cmov_b64	$d7, $c0, 0, $d8;
	and_b32	$s0, $s1, $s0;
	mul_f64	$d6, $d6, $d7;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d6, $c0, 9221120237041090560, $d6;
	ld_spill_align(4)_u32	$s0, [%__spillStack][32];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d6, $c0, 9218868437227405312, $d6;
	ld_spill_align(4)_u32	$s0, [%__spillStack][24];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d6, $c0, 0, $d6;
	ld_spill_align(4)_u32	$s0, [%__spillStack][28];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d6, $c0, 0, $d6;
	ld_spill_align(4)_u32	$s0, [%__spillStack][20];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d6, $c0, 9218868437227405312, $d6;
	cmov_b64	$d5, $c7, $d5, $d6;
	cmov_b64	$d5, $c6, 9218868437227405312, $d5;
	cmov_b64	$d4, $c5, $d4, $d5;
	cmov_b64	$d4, $c4, 0, $d4;
	ld_spill_align(4)_u32	$s0, [%__spillStack][16];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, 9218868437227405312, $d4;
	ld_spill_align(4)_u32	$s0, [%__spillStack];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, 4607182418800017408, $d4;
	cmov_b64	$d4, $c3, 9223372036854775808, $d4;
	cmov_b64	$d4, $c2, 0, $d4;
	ld_spill_align(4)_u32	$s0, [%__spillStack][40];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, 18442240474082181120, $d4;
	ld_spill_align(4)_u32	$s0, [%__spillStack][36];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, 9218868437227405312, $d4;
	ld_spill_align(4)_u32	$s0, [%__spillStack][8];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, 0, $d4;
	ld_spill_align(4)_u32	$s0, [%__spillStack][12];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, 9218868437227405312, $d4;
	cmp_gt_b1_u64	$c0, $d3, 9218868437227405312;
	cmov_b64	$d3, $c0, $d2, $d4;
	cmp_gt_b1_u64	$c0, $d0, 9218868437227405312;
	cmov_b64	$d1, $c0, $d1, $d3;
	cmp_eq_b1_s64	$c0, $d0, 0;
	cmov_b64	$d0, $c0, 4607182418800017408, $d1;
	cmp_eq_b1_s64	$c0, $d2, 4607182418800017408;
	cmov_b64	$d0, $c0, 4607182418800017408, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_pow];
	ret;
};


decl function &_gcc_fmin(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y);


function &_gcc_fmin(arg_f64 %_gcc_fmin)(
	arg_f64 %x,
	arg_f64 %y)
{

@_gcc_fmin_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%y];
	mul_f64	$d0, $d0, 0D3ff0000000000000;
	ld_arg_align(8)_f64	$d1, [%x];
	mul_f64	$d1, $d1, 0D3ff0000000000000;
	min_f64	$d0, $d1, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_fmin];
	ret;
};


decl function &_gcc_asin(arg_f64 %ret)(arg_f64 %x);


function &_gcc_asin(arg_f64 %_gcc_asin)(arg_f64 %x)
{

@_gcc_asin_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	abs_f64	$d1, $d0;
	sub_f64	$d3, 0D3ff0000000000000, $d1;
	mul_f64	$d2, $d1, $d1;
	mul_f64	$d3, $d3, 0D3fe0000000000000;
	mov_b64	$d4, $d1;
	shr_u64	$d4, $d4, 32;
	cvt_u32_u64	$s0, $d4;
	shr_s32	$s0, $s0, 20;
	add_u32	$s0, $s0, 4294966273;
	cmp_gt_b1_s32	$c0, $s0, -2;
	cmov_b64	$d2, $c0, $d3, $d2;
	fma_f64	$d3, $d2, 0D3fbb1a422982ce76, 0Dbfee324ab418f78d;
	fma_f64	$d3, $d2, $d3, 0D40062021571dccfc;
	fma_f64	$d3, $d2, $d3, 0Dc00a4646f903cdea;
	fma_f64	$d3, $d2, $d3, 0D3ff5d6b12001f228;
	fma_f64	$d4, $d2, 0D3f0951665d321061, 0D3f51e5f887a62135;
	fma_f64	$d4, $d2, $d4, 0Dbfac28d390c29690;
	fma_f64	$d4, $d2, $d4, 0D3fd1a2bec1b7ef59;
	fma_f64	$d4, $d2, $d4, 0Dbfdc7b297e269eac;
	fma_f64	$d4, $d2, $d4, 0D3fcd1e4180029834;
	div_f64	$d3, $d4, $d3;
	sqrt_f64	$d4, $d2;
	mov_b64	$d5, $d4;
	and_b64	$d5, $d5, 18446744069414584320;
	mul_f64	$d3, $d2, $d3;
	neg_f64	$d6, $d5;
	fma_f64	$d2, $d6, $d5, $d2;
	add_f64	$d6, $d4, $d5;
	div_f64	$d2, $d2, $d6;
	fma_f64	$d2, 0Dc000000000000000, $d2, 0D3c91a62633145c07;
	add_f64	$d4, $d4, $d4;
	neg_f64	$d2, $d2;
	fma_f64	$d2, $d4, $d3, $d2;
	fma_f64	$d4, 0Dc000000000000000, $d5, 0D3fe921fb54442d18;
	sub_f64	$d2, $d2, $d4;
	sub_f64	$d2, 0D3fe921fb54442d18, $d2;
	fma_f64	$d3, $d1, $d3, $d1;
	cmov_b64	$d2, $c0, $d2, $d3;
	cmp_lt_b1_s32	$c0, $s0, -28;
	cmov_b64	$d2, $c0, $d1, $d2;
	cmp_gt_b1_s32	$c0, $s0, -1;
	cmov_b64	$d2, $c0, 9221120237041090560, $d2;
	cmp_eq_b1_f64	$c0, $d1, 0D3ff0000000000000;
	cmov_b64	$d1, $c0, 4609753056924675352, $d2;
	shr_u64	$d0, $d0, 32;
	cvt_u32_u64	$s0, $d0;
	neg_f64	$d0, $d1;
	cmp_lt_b1_s32	$c0, $s0, 0;
	cmov_b64	$d0, $c0, $d0, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_asin];
	ret;
};


decl function &_gcc_erf(arg_f64 %ret)(arg_f64 %y);


function &_gcc_erf(arg_f64 %_gcc_erf)(arg_f64 %y)
{

@_gcc_erf_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%y];
	abs_f64	$d1, $d0;
	mov_b64	$d2, $d1;
	and_b64	$d2, $d2, 18446744069414584320;
	mov_b64	$d3, $d2;
	mul_f64	$d2, $d3, $d3;
	sub_f64	$d2, 0Dbfe2000000000000, $d2;
	class_b1_f64	$c0, $d2, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s1, $s0, 1;
	class_b1_f64	$c0, $d1, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s0, $s0, 1;
	add_f64	$d5, $d1, 0Dbff0000000000000;
	mul_f64	$d4, $d1, $d1;
	div_f64	$d6, 0D3ff0000000000000, $d4;
	cmp_lt_b1_f64	$c0, $d1, 0D3ff4000000000000;
	cmov_b64	$d5, $c0, $d5, $d6;
	cmp_lt_b1_f64	$c1, $d1, 0D3feb000000000000;
	cmov_b64	$d4, $c1, $d4, $d5;
	fma_f64	$d5, $d4, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2;
	fma_f64	$d5, $d4, $d5, 0Dc067135cebccabb2;
	fma_f64	$d5, $d4, $d5, 0Dc0644cb184282266;
	fma_f64	$d5, $d4, $d5, 0Dc04f300ae4cba38d;
	fma_f64	$d6, $d4, $d5, 0Dc0251e0441b0e726;
	fma_f64	$d5, $d4, 0Dc03670e242712d62, 0D407da874e79fe763;
	fma_f64	$d5, $d4, $d5, 0D40a3f219cedf3be6;
	fma_f64	$d5, $d4, $d5, 0D40a8ffb7688c246a;
	fma_f64	$d5, $d4, $d5, 0D409802eb189d5118;
	fma_f64	$d5, $d4, $d5, 0D40745cae221b9f0a;
	fma_f64	$d7, $d4, $d6, 0Dbfe63416e4ba7360;
	fma_f64	$d6, $d4, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992;
	fma_f64	$d6, $d4, $d6, 0Dc083ec881375f228;
	fma_f64	$d6, $d4, $d6, 0Dc064145d43c5ed98;
	fma_f64	$d6, $d4, $d6, 0Dc031c209555f995a;
	fma_f64	$d6, $d4, $d6, 0Dbfe993ba70c285de;
	fma_f64	$d8, $d4, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93;
	fma_f64	$d6, $d4, $d6, 0Dbf84341239e86f4a;
	fma_f64	$d7, $d4, $d7, 0Dbf843412600d6435;
	fma_f64	$d5, $d4, $d5, 0D403e568b261d5190;
	fma_f64	$d8, $d4, $d8, 0D405b28a3ee48ae2c;
	fma_f64	$d8, $d4, $d8, 0D407ad02157700314;
	fma_f64	$d8, $d4, $d8, 0D40842b1921ec2868;
	fma_f64	$d8, $d4, $d8, 0D407b290dd58a1a71;
	fma_f64	$d8, $d4, $d8, 0D4061350c526ae721;
	fma_f64	$d8, $d4, $d8, 0D4033a6b9bd707687;
	cmp_lt_b1_f64	$c2, $d1, 0D4006db6e00000000;
	cmov_b64	$d5, $c2, $d8, $d5;
	cmov_b64	$d7, $c2, $d7, $d6;
	mul_f64	$d6, $d2, 0D40571547652b82fe;
	cvt_s32_f64	$s3, $d6;
	cvt_near_f64_s32	$d6, $s3;
	fma_f64	$d8, 0Dbf862e42fefa0000, $d6, $d2;
	fma_f64	$d6, 0Dbd1cf79abc9e3b39, $d6, $d8;
	fma_f64	$d8, $d6, 0D3f56c16c16c16c17, 0D3f81111111111111;
	fma_f64	$d8, $d6, $d8, 0D3fa5555555555555;
	fma_f64	$d8, $d6, $d8, 0D3fc5555555555555;
	fma_f64	$d8, $d6, $d8, 0D3fe0000000000000;
	and_b32	$s2, $s3, 63;
	shr_s32	$s4, $s3, 6;
	fma_f64	$d8, $d6, $d8, 0D3ff0000000000000;
	cvt_u64_u32	$d9, $s2;
	mul_f64	$d6, $d6, $d8;
	shl_u64	$d10, $d9, 4;
	ld_v2_readonly_align(16)_f64	($d8, $d9), [&__math64_TWO_TO_JBY64_EP][$d10];
	add_f64	$d10, $d8, $d9;
	fma_f64	$d6, $d10, $d6, $d9;
	add_f64	$d6, $d6, $d8;
	cmp_eq_b1_s32	$c2, $s4, -1022;
	cmp_lt_b1_f64	$c3, $d6, 0D3ff0000000000000;
	and_b1	$c2, $c2, $c3;
	cmp_eq_b1_s32	$c3, $s4, 0;
	cmp_eq_b1_f64	$c4, $d6, 0D0000000000000000;
	or_b1	$c3, $c3, $c4;
	class_b1_f64	$c4, $d6, 516;
	cvt_u32_b1	$s2, $c4;
	and_b32	$s5, $s2, 1;
	cvt_u32_b1	$s6, $c3;
	cmp_lt_b1_s32	$c3, $s4, -1022;
	or_b1	$c2, $c3, $c2;
	fma_f64	$d8, $d4, 0Dbef8ead6120016ac, 0Dbf77a291236668e4;
	fma_f64	$d8, $d4, $d8, 0Dbf9d2a51dbd7194f;
	fma_f64	$d9, $d4, 0Dbf61bf380a96073f, 0D3fa22a36599795eb;
	fma_f64	$d9, $d4, $d9, 0Dbfbc63983d3e28ec;
	fma_f64	$d9, $d4, $d9, 0D3fd45fca805120e4;
	fma_f64	$d11, $d4, $d8, 0Dbfd4cd7d691cb913;
	fma_f64	$d8, $d4, 0D3f888b545735151d, 0D3f8bedc26b51dd1c;
	fma_f64	$d10, $d4, $d8, 0D3fc02660e763351f;
	fma_f64	$d8, $d4, 0Dbed09c4342a26120, 0D3f215dc9221c1a10;
	fma_f64	$d8, $d4, $d8, 0D3f74d022c4d36b0f;
	fma_f64	$d10, $d4, $d10, 0D3fb2635cd99fe9a7;
	fma_f64	$d11, $d4, $d11, 0D3fc06eba8214db68;
	fma_f64	$d9, $d4, $d9, 0Dbfd7d240fbb8c3f1;
	fma_f64	$d9, $d4, $d9, 0D3fda8d00ad92b34d;
	fma_f64	$d12, $d4, $d9, 0Dbf6359b8bef77538;
	add_f64	$d9, $d1, $d3;
	sub_f64	$d3, $d3, $d1;
	mul_f64	$d9, $d3, $d9;
	cmov_b64	$d3, $c0, $d12, $d7;
	cmov_b64	$d3, $c1, $d11, $d3;
	fma_f64	$d7, $d4, $d10, 0D3fe14af092eb6f33;
	fma_f64	$d7, $d4, $d7, 0D3fbb3e6618eee323;
	cmov_b64	$d5, $c0, $d7, $d5;
	fma_f64	$d7, $d4, $d8, 0D3fb0a54c5536ceba;
	fma_f64	$d7, $d4, $d7, 0D3fd97779cddadc09;
	cmov_b64	$d5, $c1, $d7, $d5;
	fma_f64	$d4, $d4, $d5, 0D3ff0000000000000;
	div_f64	$d3, $d3, $d4;
	add_f64	$d5, $d9, $d3;
	class_b1_f64	$c3, $d5, 3;
	cvt_u32_b1	$s2, $c3;
	and_b32	$s2, $s2, 1;
	cmp_lt_b1_f64	$c3, $d1, 0D3e30000000000000;
	cmov_b64	$d4, $c3, 4593793367243283305, $d3;
	mul_f64	$d7, $d6, 0D4340000000000000;
	mov_b64	$d8, $d7;
	shr_u64	$d7, $d8, 52;
	cvt_u32_u64	$s7, $d7;
	and_b32	$s7, $s7, 2047;
	add_u32	$s7, $s7, 4294967243;
	mov_b64	$d7, $d6;
	shr_u64	$d9, $d7, 52;
	cvt_u32_u64	$s8, $d9;
	and_b32	$s8, $s8, 2047;
	cmp_eq_b1_s32	$c3, $s8, 0;
	cmov_b32	$s7, $c3, $s7, $s8;
	cmov_b64	$d8, $c3, $d8, $d7;
	and_b64	$d8, $d8, 9227875636482146303;
	add_u32	$s7, $s7, $s4;
	max_s32	$s7, $s7, -2047;
	min_s32	$s7, $s7, 2047;
	cvt_u64_u32	$d9, $s7;
	shl_u64	$d9, $d9, 52;
	or_b64	$d9, $d8, $d9;
	add_u32	$s8, $s7, 53;
	cvt_u64_u32	$d10, $s8;
	shl_u64	$d10, $d10, 52;
	or_b64	$d8, $d8, $d10;
	mul_f64	$d8, $d8, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c3, $s7, 0;
	cmov_b64	$d8, $c3, $d9, $d8;
	and_b64	$d7, $d7, 9223372036854775808;
	or_b64	$d9, $d7, 9218868437227405312;
	cmp_eq_b1_s32	$c3, $s7, 2047;
	cmov_b64	$d8, $c3, $d9, $d8;
	cmp_lt_b1_s32	$c3, $s7, -53;
	cmov_b64	$d8, $c3, $d7, $d8;
	mul_f64	$d7, $d5, 0D40571547652b82fe;
	cvt_s32_f64	$s7, $d7;
	cvt_near_f64_s32	$d7, $s7;
	fma_f64	$d9, 0Dbf862e42fefa0000, $d7, $d5;
	fma_f64	$d7, 0Dbd1cf79abc9e3b39, $d7, $d9;
	fma_f64	$d9, $d7, 0D3f56c16c16c16c17, 0D3f81111111111111;
	fma_f64	$d9, $d7, $d9, 0D3fa5555555555555;
	fma_f64	$d9, $d7, $d9, 0D3fc5555555555555;
	fma_f64	$d9, $d7, $d9, 0D3fe0000000000000;
	and_b32	$s9, $s7, 63;
	shr_s32	$s8, $s7, 6;
	fma_f64	$d9, $d7, $d9, 0D3ff0000000000000;
	cvt_u64_u32	$d10, $s9;
	mul_f64	$d7, $d7, $d9;
	shl_u64	$d11, $d10, 4;
	ld_v2_readonly_align(16)_f64	($d9, $d10), [&__math64_TWO_TO_JBY64_EP][$d11];
	add_f64	$d11, $d9, $d10;
	fma_f64	$d7, $d11, $d7, $d10;
	add_f64	$d7, $d7, $d9;
	cmp_eq_b1_s32	$c3, $s8, -1022;
	cmp_lt_b1_f64	$c4, $d7, 0D3ff0000000000000;
	and_b1	$c3, $c3, $c4;
	or_b32	$s5, $s6, $s5;
	cmp_ne_b1_s32	$c4, $s5, 0;
	cmov_b64	$d9, $c4, $d6, $d8;
	mul_f64	$d8, $d7, 0D4340000000000000;
	mov_b64	$d10, $d8;
	shr_u64	$d8, $d10, 52;
	cvt_u32_u64	$s5, $d8;
	and_b32	$s5, $s5, 2047;
	add_u32	$s5, $s5, 4294967243;
	mov_b64	$d8, $d7;
	shr_u64	$d11, $d8, 52;
	cvt_u32_u64	$s6, $d11;
	and_b32	$s6, $s6, 2047;
	cmp_eq_b1_s32	$c4, $s6, 0;
	cmov_b64	$d10, $c4, $d10, $d8;
	cmov_b32	$s6, $c4, $s5, $s6;
	cmp_eq_b1_s32	$c4, $s8, 0;
	cmp_eq_b1_f64	$c5, $d7, 0D0000000000000000;
	or_b1	$c4, $c4, $c5;
	class_b1_f64	$c5, $d7, 516;
	cvt_u32_b1	$s5, $c5;
	and_b32	$s5, $s5, 1;
	shr_s32	$s3, $s3, 8;
	sub_u32	$s9, 1023, $s3;
	add_u32	$s4, $s9, $s4;
	cvt_u64_u32	$d11, $s4;
	shl_u64	$d11, $d11, 52;
	add_u32	$s3, $s3, 1023;
	cvt_u64_u32	$d12, $s3;
	shl_u64	$d12, $d12, 52;
	mul_f64	$d6, $d12, $d6;
	mul_f64	$d6, $d11, $d6;
	cmov_b64	$d6, $c2, $d6, $d9;
	cvt_u32_b1	$s3, $c4;
	cmp_lt_b1_s32	$c2, $s8, -1022;
	or_b1	$c2, $c2, $c3;
	cvt_b1_u32	$c3, $s1;
	cmov_b64	$d6, $c3, $d2, $d6;
	and_b64	$d9, $d10, 9227875636482146303;
	add_u32	$s1, $s6, $s8;
	max_s32	$s1, $s1, -2047;
	min_s32	$s1, $s1, 2047;
	cvt_u64_u32	$d10, $s1;
	shl_u64	$d10, $d10, 52;
	or_b64	$d10, $d9, $d10;
	add_u32	$s4, $s1, 53;
	cvt_u64_u32	$d11, $s4;
	shl_u64	$d11, $d11, 52;
	or_b64	$d9, $d9, $d11;
	mul_f64	$d9, $d9, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c3, $s1, 0;
	cmov_b64	$d9, $c3, $d10, $d9;
	cmp_gt_b1_f64	$c3, $d2, 0D40862e42fefa39ef;
	cmov_b64	$d6, $c3, 9218868437227405312, $d6;
	and_b64	$d8, $d8, 9223372036854775808;
	or_b64	$d10, $d8, 9218868437227405312;
	cmp_eq_b1_s32	$c3, $s1, 2047;
	cmov_b64	$d9, $c3, $d10, $d9;
	cmp_lt_b1_f64	$c3, $d2, 0Dc0874910d52d3051;
	cmov_b64	$d2, $c3, 0, $d6;
	mov_b64	$d6, $d8;
	cmp_lt_b1_s32	$c3, $s1, -53;
	cmov_b64	$d6, $c3, $d6, $d9;
	or_b32	$s1, $s3, $s5;
	cmp_ne_b1_s32	$c3, $s1, 0;
	cmov_b64	$d6, $c3, $d7, $d6;
	shr_s32	$s1, $s7, 8;
	sub_u32	$s3, 1023, $s1;
	add_u32	$s3, $s3, $s8;
	cvt_u64_u32	$d8, $s3;
	shl_u64	$d8, $d8, 52;
	add_u32	$s1, $s1, 1023;
	cvt_u64_u32	$d9, $s1;
	shl_u64	$d9, $d9, 52;
	mul_f64	$d7, $d9, $d7;
	mul_f64	$d7, $d8, $d7;
	cmov_b64	$d6, $c2, $d7, $d6;
	cvt_b1_u32	$c2, $s2;
	cmov_b64	$d6, $c2, $d5, $d6;
	cmp_gt_b1_f64	$c2, $d5, 0D40862e42fefa39ef;
	cmov_b64	$d6, $c2, 9218868437227405312, $d6;
	cmp_lt_b1_f64	$c2, $d5, 0Dc0874910d52d3051;
	cmov_b64	$d5, $c2, 0, $d6;
	mul_f64	$d2, $d2, $d5;
	div_f64	$d2, $d2, $d1;
	sub_f64	$d2, 0D3ff0000000000000, $d2;
	cmp_lt_b1_f64	$c2, $d1, 0D4018000000000000;
	cmov_b64	$d2, $c2, $d2, 4607182418800017408;
	add_f64	$d3, $d3, 0D3feb0ac160000000;
	cmov_b64	$d2, $c0, $d3, $d2;
	fma_f64	$d3, $d1, $d4, $d1;
	cmov_b64	$d2, $c1, $d3, $d2;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d1, $c0, $d1, $d2;
	neg_f64	$d2, $d1;
	cmp_lt_b1_f64	$c0, $d0, 0D0000000000000000;
	cmov_b64	$d0, $c0, $d2, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_erf];
	ret;
};

align(16) readonly_f64 &__math64_ATAN_JBY256_TBL[482] = f64[](0D3faff55b00000000, 0D3e56e59fbd38db2c, 0D3fb0f99e00000000, 0D3e64e3aa54dedf96, 0D3fb1f86d00000000, 0D3e67e105ab1bda88, 0D3fb2f71900000000, 0D3e48c5254d013fd0, 0D3fb3f59f00000000, 0D3e2cf8ab3ad62670, 0D3fb4f3fd00000000, 0D3e59dca4bec80468, 0D3fb5f23200000000, 0D3e53f4b5ec98a8da, 0D3fb6f03b00000000, 0D3e6b9d49619d81fe, 0D3fb7ee1800000000, 0D3e43017887460934, 0D3fb8ebc500000000, 0D3e511e3eca0b9944, 0D3fb9e94100000000, 0D3e54f3f73c5a332e, 0D3fbae68a00000000, 0D3e5c71c8ae0e00a6, 0D3fbbe39e00000000, 0D3e67cde0f86fbdc7, 0D3fbce07c00000000, 0D3e570f328c889c72, 0D3fbddd2100000000, 0D3e5c07ae9b994efe, 0D3fbed98c00000000, 0D3e40c8021d7b1698, 0D3fbfd5ba00000000, 0D3e635585edb8cb22, 0D3fc068d500000000, 0D3e70842567b30e96, 0D3fc0e6ad00000000, 0D3e799e811031472e, 0D3fc1646500000000, 0D3e6041821416bcee, 0D3fc1e1fa00000000, 0D3e7f6086e4dc96f4, 0D3fc25f6e00000000, 0D3e471a535c5f1b58, 0D3fc2dcbd00000000, 0D3e765f743fe63ca1, 0D3fc359e800000000, 0D3e7dbd733472d014, 0D3fc3d6ee00000000, 0D3e7d18cc4d8b0d1d, 0D3fc453ce00000000, 0D3e78c12553c8fb29, 0D3fc4d08700000000, 0D3e753b49e2e8f991, 0D3fc54d1800000000, 0D3e77422ae148c141, 0D3fc5c98100000000, 0D3e4e3ec269df56a8, 0D3fc645bf00000000, 0D3e7ff6754e7e0ac9, 0D3fc6c1d400000000, 0D3e7131267b1b5aad, 0D3fc73dbd00000000, 0D3e7d14fa403a94bc, 0D3fc7b97b00000000, 0D3e62f396c089a3d8, 0D3fc8350b00000000, 0D3e7c731d78fa95bb, 0D3fc8b06e00000000, 0D3e7c50f385177399, 0D3fc92ba300000000, 0D3e6f41409c6f2c20, 0D3fc9a6a800000000, 0D3e7d2d90c4c39ec0, 0D3fca217e00000000, 0D3e680420696f2106, 0D3fca9c2300000000, 0D3e4b40327943a2e8, 0D3fcb169600000000, 0D3e65d35e02f3d2a2, 0D3fcb90d700000000, 0D3e64a498288117b0, 0D3fcc0ae500000000, 0D3e635da119afb324, 0D3fcc84bf00000000, 0D3e714e85cdb9a908, 0D3fccfe6500000000, 0D3e638754e5547b9a, 0D3fcd77d500000000, 0D3e7be40ae6ce3246, 0D3fcdf11000000000, 0D3e70c993b3bea7e7, 0D3fce6a1400000000, 0D3e71d2dd89ac3359, 0D3fcee2e100000000, 0D3e61476603332c46, 0D3fcf5b7500000000, 0D3e7f25901bac55b7, 0D3fcfd3d100000000, 0D3e7f881b7c826e28, 0D3fd025fa00000000, 0D3e7441996d698d20, 0D3fd061ee00000000, 0D3e8407ac521ea089, 0D3fd09dc500000000, 0D3e82fb0c6c4b1723, 0D3fd0d97e00000000, 0D3e8ca135966a3e18, 0D3fd1151a00000000, 0D3e6b1218e4d646e4, 0D3fd1509700000000, 0D3e6d4e72a350d288, 0D3fd18bf500000000, 0D3e84617e2f04c329, 0D3fd1c73500000000, 0D3e6096ec41e82650, 0D3fd2025500000000, 0D3e79f91f25773e6e, 0D3fd23d5600000000, 0D3e659c0820f1d674, 0D3fd2783700000000, 0D3e602bf7a2df1064, 0D3fd2b2f700000000, 0D3e8fb36bfc40508f, 0D3fd2ed9800000000, 0D3e7ea08f3f8dc892, 0D3fd3281800000000, 0D3e73ed6254656a0e, 0D3fd3627700000000, 0D3e6b83f5e5e69c58, 0D3fd39cb400000000, 0D3e8d6ec2af768592, 0D3fd3d6d100000000, 0D3e6493889a226f94, 0D3fd410cb00000000, 0D3e85ad8fa65279ba, 0D3fd44aa400000000, 0D3e6b615784d45434, 0D3fd4845a00000000, 0D3e809a184368f145, 0D3fd4bdee00000000, 0D3e761a2439b0d91c, 0D3fd4f75f00000000, 0D3e7ce1a65e39a978, 0D3fd530ad00000000, 0D3e832a39a93b6a66, 0D3fd569d800000000, 0D3e81c3699af804e7, 0D3fd5a2e000000000, 0D3e575e0f4e44ede8, 0D3fd5dbc300000000, 0D3e8f77ced1a7a83b, 0D3fd6148400000000, 0D3e284e7f0cb1b500, 0D3fd64d1f00000000, 0D3e8ec6b838b02dfe, 0D3fd6859700000000, 0D3e83ebf4dfbeda87, 0D3fd6bdea00000000, 0D3e89397aed9cb475, 0D3fd6f61900000000, 0D3e707937bc239c54, 0D3fd72e2200000000, 0D3e8aa754553131b6, 0D3fd7660700000000, 0D3e74a05d407c45dc, 0D3fd79dc600000000, 0D3e8132231a206dd0, 0D3fd7d56000000000, 0D3e72d8ecfdd69c88, 0D3fd80cd400000000, 0D3e7a852c74218606, 0D3fd8442200000000, 0D3e871bf2baeebb50, 0D3fd87b4b00000000, 0D3e483d7db7491820, 0D3fd8b24d00000000, 0D3e6ca50d92b6da14, 0D3fd8e92900000000, 0D3e56f5cde8530298, 0D3fd91fde00000000, 0D3e7f343198910740, 0D3fd9566d00000000, 0D3e70e8d241ccd80a, 0D3fd98cd500000000, 0D3e71535ac619e6c8, 0D3fd9c31600000000, 0D3e77316041c36cd2, 0D3fd9f93000000000, 0D3e7985a000637d8e, 0D3fda2f2300000000, 0D3e6f2f29858c0a68, 0D3fda64ee00000000, 0D3e8879847f96d909, 0D3fda9a9200000000, 0D3e8ab3d319e12e42, 0D3fdad00f00000000, 0D3e75088162dfc4c2, 0D3fdb056400000000, 0D3e605749a1cd9d8c, 0D3fdb3a9100000000, 0D3e5da65c6c6b8618, 0D3fdb6f9600000000, 0D3e6739bf7df1ad64, 0D3fdba47300000000, 0D3e6bc31252aa3340, 0D3fdbd92800000000, 0D3e5e528191ad3aa8, 0D3fdc0db400000000, 0D3e8929d93df19f18, 0D3fdc421900000000, 0D3e5ff11eb693a080, 0D3fdc765500000000, 0D3e455ae3f145a3a0, 0D3fdcaa6800000000, 0D3e7cbcd8c6c0ca82, 0D3fdcde5300000000, 0D3e70cb04d425d304, 0D3fdd121500000000, 0D3e79adfcab5be678, 0D3fdd45ae00000000, 0D3e893d90c5662508, 0D3fdd791f00000000, 0D3e768489bd35ff40, 0D3fddac6700000000, 0D3e3586ed3da2b7e0, 0D3fdddf8500000000, 0D3e87604d2e850eee, 0D3fde127b00000000, 0D3e7ac1d12bfb53d8, 0D3fde454800000000, 0D3e39b3d468274740, 0D3fde77eb00000000, 0D3e7fc5d68d10e53c, 0D3fdeaa6500000000, 0D3e88f9e51884becb, 0D3fdedcb600000000, 0D3e8a87f0869c06d1, 0D3fdf0ede00000000, 0D3e831e7279f685fa, 0D3fdf40dd00000000, 0D3e46a8282f9719b0, 0D3fdf72b200000000, 0D3e60d2724a8a44e0, 0D3fdfa45d00000000, 0D3e8a60524b11ad4e, 0D3fdfd5e000000000, 0D3e575fdf832750f0, 0D3fe0039c00000000, 0D3e8cf06902e4cd36, 0D3fe01c3400000000, 0D3e6e82422d4f6d10, 0D3fe034b700000000, 0D3e524a091063e6c0, 0D3fe04d2500000000, 0D3e78a1a172dc6f38, 0D3fe0657e00000000, 0D3e929b6619f8a92d, 0D3fe07dc300000000, 0D3e79274d9c1b70c8, 0D3fe095f300000000, 0D3e50c34b1fbb7930, 0D3fe0ae0e00000000, 0D3e6639866c20eb50, 0D3fe0c61400000000, 0D3e86d6d0f6832e9e, 0D3fe0de0500000000, 0D3e9af54def99f25e, 0D3fe0f5e200000000, 0D3e916cfc52a00262, 0D3fe10daa00000000, 0D3e8dcc1e83569c32, 0D3fe1255d00000000, 0D3e937f7a551ed425, 0D3fe13cfb00000000, 0D3e9f6360adc98887, 0D3fe1548500000000, 0D3e92c6ec8d35a2c1, 0D3fe16bfa00000000, 0D3e8bd44df84cb036, 0D3fe1835a00000000, 0D3e9117cf826e310e, 0D3fe19aa500000000, 0D3e9ca533f332cfc9, 0D3fe1b1dc00000000, 0D3e90f208509dbc2e, 0D3fe1c8fe00000000, 0D3e8cd07d93c945de, 0D3fe1e00b00000000, 0D3e957bdfd67e6d72, 0D3fe1f70400000000, 0D3e7aab89c516c658, 0D3fe20de800000000, 0D3e63e823b1a1b8a0, 0D3fe224b700000000, 0D3e8307464a9d6d3c, 0D3fe23b7100000000, 0D3e9c5993cd438843, 0D3fe2521700000000, 0D3e9ba2fca02ab554, 0D3fe268a900000000, 0D3e801a5b6983a268, 0D3fe27f2600000000, 0D3e6273d1b350efc8, 0D3fe2958e00000000, 0D3e864c238c37b0c6, 0D3fe2abe200000000, 0D3e6aded07370a300, 0D3fe2c22100000000, 0D3e878091197eb47e, 0D3fe2d84c00000000, 0D3e74b0f245e0dabc, 0D3fe2ee6200000000, 0D3e9080d9794e2eaf, 0D3fe3046400000000, 0D3e8d4ec242b60c76, 0D3fe31a5200000000, 0D3e4221d2f940caa0, 0D3fe3302b00000000, 0D3e7cdbc42b2bba5c, 0D3fe345f000000000, 0D3e6cce37bb440840, 0D3fe35ba000000000, 0D3e96c1d999cf1dd0, 0D3fe3713d00000000, 0D3e5bed8a07eb0870, 0D3fe386c500000000, 0D3e769ed88f490e3c, 0D3fe39c3900000000, 0D3e6cd41719b73ef0, 0D3fe3b19800000000, 0D3e9cbc4ac95b41b7, 0D3fe3c6e400000000, 0D3e9238f1b890f5d7, 0D3fe3dc1c00000000, 0D3e750c4282259cc4, 0D3fe3f13f00000000, 0D3e9713d2de87b3e2, 0D3fe4064f00000000, 0D3e81d5a7d2255276, 0D3fe41b4a00000000, 0D3e9c0dfd48227ac1, 0D3fe4303200000000, 0D3e91c964dab76753, 0D3fe4450600000000, 0D3e86de56d5704496, 0D3fe459c600000000, 0D3e84aeb71fd19968, 0D3fe46e7200000000, 0D3e8fbf91c57b1918, 0D3fe4830a00000000, 0D3e9d6bef7fbe5d9a, 0D3fe4978f00000000, 0D3e9464d3dc249066, 0D3fe4ac0000000000, 0D3e9638e2ec4d9073, 0D3fe4c05e00000000, 0D3e716f4a7247ea7c, 0D3fe4d4a800000000, 0D3e31a0a740f1d440, 0D3fe4e8de00000000, 0D3e86edbb0114a33c, 0D3fe4fd0100000000, 0D3e7dbee8bf1d513c, 0D3fe5111000000000, 0D3e95b8bdb0248f73, 0D3fe5250c00000000, 0D3e97de3d3f5eac64, 0D3fe538f500000000, 0D3e8ee24187ae448a, 0D3fe54cca00000000, 0D3e9e06c591ec5192, 0D3fe5608d00000000, 0D3e74e3861a332738, 0D3fe5743c00000000, 0D3e7a9599dcc2bfe4, 0D3fe587d800000000, 0D3e6f732fbad43468, 0D3fe59b6000000000, 0D3e9eb9f573b727d9, 0D3fe5aed600000000, 0D3e98b212a2eb9897, 0D3fe5c23900000000, 0D3e9384884c167215, 0D3fe5d58900000000, 0D3e90e2d363020051, 0D3fe5e8c600000000, 0D3e92820879fbd022, 0D3fe5fbf000000000, 0D3e9a1ab9893e4b30, 0D3fe60f0800000000, 0D3e82d1b817a24478, 0D3fe6220d00000000, 0D3e615d7b8ded4878, 0D3fe634ff00000000, 0D3e78968f9db3a5e4, 0D3fe647de00000000, 0D3e971c4171fe135f, 0D3fe65aab00000000, 0D3e96d80f605d0d8c, 0D3fe66d6600000000, 0D3e7c91f043691590, 0D3fe6800e00000000, 0D3e839f8a15fce2b2, 0D3fe692a400000000, 0D3e455beda9d94b80, 0D3fe6a52700000000, 0D3e8b12c15d60949a, 0D3fe6b79800000000, 0D3e924167b312bfe3, 0D3fe6c9f700000000, 0D3e90ab8633070277, 0D3fe6dc4400000000, 0D3e854554ebbc80ee, 0D3fe6ee7f00000000, 0D3e60204aef5a4bb8, 0D3fe700a700000000, 0D3e98af08c679cf2c, 0D3fe712be00000000, 0D3e90852a330ae6c8, 0D3fe724c300000000, 0D3e86d3eb9ec32916, 0D3fe736b600000000, 0D3e8685cb7fcbbafe, 0D3fe7489700000000, 0D3e91f751c1e0bd95, 0D3fe75a6700000000, 0D3e5705b1b0f72560, 0D3fe76c2400000000, 0D3e9b98d8d808ca92, 0D3fe77dd100000000, 0D3e62ea22c75cc980, 0D3fe78f6b00000000, 0D3e97aba62bca0350, 0D3fe7a0f400000000, 0D3e9d73833442278c, 0D3fe7b26c00000000, 0D3e95a5ca1fb18bf9, 0D3fe7c3d300000000, 0D3e61a6092b6ecf28, 0D3fe7d52800000000, 0D3e744fd049aac104, 0D3fe7e66c00000000, 0D3e2c114fd8df5180, 0D3fe7f79e00000000, 0D3e95972f130feae5, 0D3fe808c000000000, 0D3e7ca034a55fe198, 0D3fe819d000000000, 0D3e96e2b149990227, 0D3fe82ad000000000, 0D3e7b00000294592c, 0D3fe83bbe00000000, 0D3e98b9bdc442620e, 0D3fe84c9c00000000, 0D3e8d94fdfabf3e4e, 0D3fe85d6900000000, 0D3e85db30b145ad9a, 0D3fe86e2500000000, 0D3e8e3e1eb95022b0, 0D3fe87ed000000000, 0D3e9d5b8b45442bd6, 0D3fe88f6b00000000, 0D3e97a046231ecd2e, 0D3fe89ff500000000, 0D3e9feafe3ef55232, 0D3fe8b06f00000000, 0D3e9839e7bfd78267, 0D3fe8c0d900000000, 0D3e645cf49d6fa900, 0D3fe8d13200000000, 0D3e4be3132b27f380, 0D3fe8e17a00000000, 0D3e9533980bb84f9f, 0D3fe8f1b300000000, 0D3e5889e2ce3ba390, 0D3fe901db00000000, 0D3e7f7778c3ad0cc8, 0D3fe911f300000000, 0D3e846660cec4eba2, 0D3fe921fb00000000, 0D3e85110b4611a626);

decl function &_gcc_atan2(arg_f64 %ret)(
	arg_f64 %y,
	arg_f64 %x);


function &_gcc_atan2(arg_f64 %_gcc_atan2)(
	arg_f64 %y,
	arg_f64 %x)
{

@_gcc_atan2_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	mul_f64	$d1, $d0, 0D4340000000000000;
	shr_u64	$d2, $d1, 52;
	cvt_u32_u64	$s0, $d2;
	and_b32	$s0, $s0, 2047;
	add_u32	$s0, $s0, 4294967243;
	mov_b64	$d2, $d0;
	shr_u64	$d3, $d2, 52;
	cvt_u32_u64	$s1, $d3;
	and_b32	$s3, $s1, 2047;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cmov_b32	$s7, $c0, $s0, $s3;
	cmov_b64	$d5, $c0, $d1, $d2;
	ld_arg_align(8)_f64	$d1, [%y];
	class_b1_f64	$c0, $d1, 516;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s5, $s0, 1;
	mul_f64	$d3, $d1, 0D4340000000000000;
	mov_b64	$d4, $d3;
	shr_u64	$d3, $d4, 52;
	cvt_u32_u64	$s0, $d3;
	and_b32	$s0, $s0, 2047;
	add_u32	$s0, $s0, 4294967243;
	mov_b64	$d3, $d1;
	shr_u64	$d6, $d3, 52;
	cvt_u32_u64	$s1, $d6;
	and_b32	$s4, $s1, 2047;
	cmp_eq_b1_s32	$c0, $s4, 0;
	cmov_b32	$s8, $c0, $s0, $s4;
	cmov_b64	$d4, $c0, $d4, $d3;
	cmp_lt_b1_u32	$c0, $s4, 1021;
	cmp_lt_b1_u32	$c1, $s3, 1021;
	and_b1	$c2, $c1, $c0;
	class_b1_f64	$c0, $d0, 516;
	cvt_u32_b1	$s0, $c0;
	cvt_u32_b1	$s1, $c0;
	and_b32	$s6, $s1, 1;
	and_b32	$s2, $s5, $s0;
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s0, $s0, 1;
	class_b1_f64	$c0, $d1, 3;
	cvt_u32_b1	$s1, $c0;
	and_b32	$s1, $s1, 1;
	and_b64	$d5, $d5, 9227875636482146303;
	add_u32	$s7, $s7, 1024;
	max_s32	$s7, $s7, -2047;
	min_s32	$s7, $s7, 2047;
	cvt_u64_u32	$d6, $s7;
	shl_u64	$d6, $d6, 52;
	or_b64	$d6, $d6, $d5;
	add_u32	$s9, $s7, 53;
	cvt_u64_u32	$d7, $s9;
	shl_u64	$d7, $d7, 52;
	or_b64	$d5, $d7, $d5;
	mul_f64	$d5, $d5, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c0, $s7, 0;
	cmov_b64	$d6, $c0, $d6, $d5;
	and_b64	$d5, $d2, 9223372036854775808;
	or_b64	$d7, $d5, 9218868437227405312;
	cmp_eq_b1_s32	$c0, $s7, 2047;
	cmov_b64	$d6, $c0, $d7, $d6;
	and_b64	$d4, $d4, 9227875636482146303;
	add_u32	$s8, $s8, 1024;
	max_s32	$s8, $s8, -2047;
	min_s32	$s8, $s8, 2047;
	cvt_u64_u32	$d7, $s8;
	shl_u64	$d7, $d7, 52;
	or_b64	$d7, $d7, $d4;
	add_u32	$s9, $s8, 53;
	cvt_u64_u32	$d8, $s9;
	shl_u64	$d8, $d8, 52;
	or_b64	$d4, $d8, $d4;
	mul_f64	$d4, $d4, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c0, $s8, 0;
	cmov_b64	$d7, $c0, $d7, $d4;
	and_b64	$d4, $d3, 9223372036854775808;
	or_b64	$d8, $d4, 9218868437227405312;
	cmp_eq_b1_s32	$c0, $s8, 2047;
	cmov_b64	$d7, $c0, $d8, $d7;
	cmp_lt_b1_s32	$c0, $s7, -53;
	cmov_b64	$d5, $c0, $d5, $d6;
	cmp_eq_b1_f64	$c0, $d0, 0D0000000000000000;
	cvt_u32_b1	$s7, $c0;
	or_b32	$s6, $s6, $s7;
	cmp_ne_b1_s32	$c1, $s6, 0;
	cmov_b64	$d14, $c1, $d0, $d5;
	cmp_lt_b1_s32	$c1, $s8, -53;
	cmov_b64	$d4, $c1, $d4, $d7;
	cmp_eq_b1_f64	$c1, $d1, 0D0000000000000000;
	cvt_u32_b1	$s6, $c1;
	or_b32	$s5, $s5, $s6;
	cmp_ne_b1_s32	$c3, $s5, 0;
	cmov_b64	$d16, $c3, $d1, $d4;
	cmov_b64	$d4, $c2, $d16, $d1;
	abs_f64	$d6, $d4;
	cmov_b64	$d5, $c2, $d14, $d0;
	abs_f64	$d7, $d5;
	max_f64	$d8, $d7, $d6;
	min_f64	$d10, $d7, $d6;
	div_f64	$d9, $d10, $d8;
	mov_b64	$d11, $d9;
	and_b64	$d11, $d11, 18446744069414584320;
	mov_b64	$d17, $d11;
	mov_b64	$d12, $d8;
	and_b64	$d11, $d12, 18446744069414584320;
	neg_f64	$d13, $d11;
	fma_f64	$d13, $d13, $d17, $d10;
	sub_f64	$d11, $d8, $d11;
	neg_f64	$d15, $d11;
	mov_b64	$d11, $d10;
	fma_f64	$d18, $d15, $d17, $d13;
	shr_u64	$d13, $d12, 52;
	cvt_u32_u64	$s7, $d13;
	shr_u64	$d13, $d11, 52;
	cvt_u32_u64	$s5, $d13;
	mul_f64	$d13, $d10, 0D4340000000000000;
	shr_u64	$d15, $d13, 52;
	cvt_u32_u64	$s6, $d15;
	mul_f64	$d15, $d8, 0D4340000000000000;
	shr_u64	$d19, $d15, 52;
	cvt_u32_u64	$s8, $d19;
	shr_u64	$d16, $d16, 52;
	cvt_u32_u64	$s9, $d16;
	mov_b64	$d16, $d14;
	sub_f64	$d14, $d9, $d17;
	shr_u64	$d16, $d16, 52;
	cvt_u32_u64	$s10, $d16;
	neg_f64	$d16, $d9;
	neg_f64	$d17, $d8;
	fma_f64	$d14, $d17, $d14, $d18;
	mul_f64	$d17, $d9, $d9;
	mul_f64	$d16, $d17, $d16;
	neg_f64	$d17, $d17;
	fma_f64	$d18, $d17, 0D3fb70c3192d751c2, 0D3fbc718839b8c4eb;
	fma_f64	$d18, $d17, $d18, 0D3fc2492482bd6be1;
	fma_f64	$d18, $d17, $d18, 0D3fc99999999643a3;
	fma_f64	$d17, $d17, $d18, 0D3fd5555555555538;
	cmp_eq_b1_f64	$c3, $d8, 0D0000000000000000;
	cmp_eq_b1_s32	$c4, $s7, 1023;
	or_b1	$c3, $c4, $c3;
	cmp_eq_b1_f64	$c5, $d10, 0D0000000000000000;
	or_b1	$c4, $c4, $c5;
	sub_u32	$s3, $s4, $s3;
	and_b32	$s4, $s10, 2047;
	and_b32	$s9, $s9, 2047;
	sub_u32	$s4, $s9, $s4;
	cmov_b32	$s3, $c2, $s4, $s3;
	and_b32	$s4, $s8, 2047;
	add_u32	$s4, $s4, 4294967243;
	and_b32	$s8, $s7, 2047;
	cmp_eq_b1_s32	$c2, $s8, 0;
	cmov_b32	$s12, $c2, $s4, $s8;
	cmov_b64	$d18, $c2, $d15, $d12;
	and_b32	$s4, $s6, 2047;
	add_u32	$s4, $s4, 4294967243;
	and_b32	$s5, $s5, 2047;
	cmp_eq_b1_s32	$c2, $s5, 0;
	cmov_b32	$s11, $c2, $s4, $s5;
	cmov_b64	$d15, $c2, $d13, $d11;
	cvt_u32_b1	$s6, $c3;
	cvt_u32_b1	$s8, $c4;
	class_b1_f64	$c2, $d8, 516;
	cvt_u32_b1	$s4, $c2;
	and_b32	$s9, $s4, 1;
	class_b1_f64	$c2, $d10, 516;
	cvt_u32_b1	$s4, $c2;
	and_b32	$s10, $s4, 1;
	div_f64	$d13, $d14, $d8;
	fma_f64	$d13, $d16, $d17, $d13;
	add_f64	$d13, $d9, $d13;
	cmp_lt_b1_f64	$c2, $d9, 0D3e4d12ed0af1a27f;
	cmov_b64	$d13, $c2, $d9, $d13;
	cmp_lt_b1_s32	$c2, $s3, -28;
	cvt_u32_b1	$s4, $c2;
	shr_u64	$d14, $d2, 32;
	cvt_u32_u64	$s5, $d14;
	cmp_gt_b1_s32	$c2, $s5, -1;
	cmp_gt_b1_s32	$c3, $s3, -57;
	or_b1	$c2, $c3, $c2;
	and_b64	$d14, $d18, 9227875636482146303;
	sub_u32	$s13, 1023, $s7;
	add_u32	$s7, $s12, $s13;
	max_s32	$s7, $s7, -2047;
	min_s32	$s7, $s7, 2047;
	cvt_u64_u32	$d16, $s7;
	shl_u64	$d16, $d16, 52;
	or_b64	$d16, $d14, $d16;
	add_u32	$s12, $s7, 53;
	cvt_u64_u32	$d17, $s12;
	shl_u64	$d17, $d17, 52;
	or_b64	$d14, $d14, $d17;
	mul_f64	$d14, $d14, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c3, $s7, 0;
	cmov_b64	$d14, $c3, $d16, $d14;
	and_b64	$d15, $d15, 9227875636482146303;
	add_u32	$s11, $s11, $s13;
	max_s32	$s11, $s11, -2047;
	min_s32	$s11, $s11, 2047;
	cvt_u64_u32	$d16, $s11;
	shl_u64	$d16, $d16, 52;
	or_b64	$d16, $d16, $d15;
	add_u32	$s12, $s11, 53;
	cvt_u64_u32	$d17, $s12;
	shl_u64	$d17, $d17, 52;
	or_b64	$d15, $d17, $d15;
	mul_f64	$d15, $d15, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c3, $s11, 0;
	cmov_b64	$d15, $c3, $d16, $d15;
	and_b64	$d12, $d12, 9223372036854775808;
	or_b64	$d16, $d12, 9218868437227405312;
	cmp_eq_b1_s32	$c3, $s7, 2047;
	cmov_b64	$d14, $c3, $d16, $d14;
	cmp_lt_b1_s32	$c3, $s7, -53;
	cmov_b64	$d12, $c3, $d12, $d14;
	and_b64	$d11, $d11, 9223372036854775808;
	or_b64	$d14, $d11, 9218868437227405312;
	cmp_eq_b1_s32	$c3, $s11, 2047;
	cmov_b64	$d14, $c3, $d14, $d15;
	cmp_lt_b1_s32	$c3, $s11, -53;
	cmov_b64	$d11, $c3, $d11, $d14;
	or_b32	$s7, $s10, $s8;
	cmp_ne_b1_s32	$c3, $s7, 0;
	cmov_b64	$d10, $c3, $d10, $d11;
	or_b32	$s6, $s6, $s9;
	cmp_ne_b1_s32	$c3, $s6, 0;
	cmov_b64	$d8, $c3, $d8, $d12;
	cmp_gt_b1_f64	$c3, $d9, 0D3fb0000000000000;
	cmov_b64	$d9, $c3, $d9, 4589204049087554388;
	fma_f64	$d9, 0D4070000000000000, $d9, 0D3fe0000000000000;
	cvt_s32_f64	$s7, $d9;
	add_u32	$s6, $s7, 4294967280;
	cvt_near_f64_s32	$d9, $s7;
	mul_f64	$d12, $d9, 0D3f70000000000000;
	mul_f64	$d14, $d9, 0Dbf70000000000000;
	cvt_s64_s32	$d9, $s6;
	shl_u64	$d15, $d9, 4;
	ld_v2_readonly_align(16)_f64	($d9, $d11), [&__math64_ATAN_JBY256_TBL][$d15];
	cmov_b64	$d9, $c3, $d9, 0;
	mov_b64	$d15, $d8;
	and_b64	$d15, $d15, 18446744073575333888;
	fma_f64	$d16, $d14, $d15, $d10;
	sub_f64	$d15, $d8, $d15;
	fma_f64	$d14, $d14, $d15, $d16;
	fma_f64	$d8, $d12, $d10, $d8;
	div_f64	$d8, $d14, $d8;
	mul_f64	$d10, $d8, $d8;
	neg_f64	$d12, $d10;
	fma_f64	$d12, $d12, 0D3fc99992b9802d7d, 0D3fd5555555550877;
	mul_f64	$d10, $d10, $d12;
	neg_f64	$d12, $d8;
	fma_f64	$d8, $d10, $d12, $d8;
	add_f64	$d8, $d11, $d8;
	cmov_b64	$d8, $c3, $d8, $d13;
	sub_f64	$d10, 0D3ff921fb54442d18, $d9;
	cmp_lt_b1_f64	$c3, $d7, $d6;
	cmov_b64	$d7, $c3, $d10, $d9;
	sub_f64	$d6, 0D3c91a62633145c07, $d8;
	cmov_b64	$d8, $c3, $d6, $d8;
	shr_u64	$d3, $d3, 32;
	cvt_u32_u64	$s6, $d3;
	cmp_lt_b1_s32	$c3, $s6, 0;
	cmov_b64	$d6, $c3, 13837628693406821656, 4614256656552045848;
	cmov_b64	$d3, $c3, 13828621494152080664, 4605249457297304856;
	cmov_b64	$d9, $c3, 13835860133968814546, 4612488097114038738;
	cmp_lt_b1_s32	$c4, $s5, 0;
	cmov_b64	$d9, $c4, $d9, $d3;
	cmov_b64	$d3, $c4, $d6, $d1;
	sub_f64	$d10, 0D400921fb50000000, $d7;
	cmov_b64	$d10, $c4, $d10, $d7;
	sub_f64	$d7, 0D3e6110b4611a6263, $d8;
	cmov_b64	$d8, $c4, $d7, $d8;
	cmov_b64	$d7, $c3, 13833125093779451160, 4609753056924675352;
	add_f64	$d8, $d10, $d8;
	neg_f64	$d10, $d8;
	cmov_b64	$d8, $c3, $d10, $d8;
	cmp_ne_b1_s32	$c3, $s2, 0;
	cmov_b64	$d8, $c3, $d9, $d8;
	cmov_b64	$d6, $c2, $d8, $d6;
	shr_u64	$d2, $d2, 63;
	cvt_u32_u64	$s2, $d2;
	xor_b32	$s2, $s2, 1;
	div_f64	$d2, $d4, $d5;
	and_b32	$s2, $s4, $s2;
	cmp_ne_b1_s32	$c2, $s2, 0;
	cmov_b64	$d2, $c2, $d2, $d6;
	cmp_gt_b1_s32	$c2, $s3, 56;
	cmov_b64	$d2, $c2, $d7, $d2;
	cmov_b64	$d2, $c0, $d7, $d2;
	cmov_b64	$d2, $c1, $d3, $d2;
	cvt_b1_u32	$c0, $s1;
	cmov_b64	$d1, $c0, $d1, $d2;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d0, $c0, $d0, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_atan2];
	ret;
};

align(16) readonly_f64 &__math64_LN_TBL[130] = f64[](0D0000000000000000, 0D0000000000000000, 0D3f8fc0a800000000, 0D3e361f807c79f3db, 0D3f9f829800000000, 0D3e6873c1980267c8, 0D3fa7745800000000, 0D3e5ec65b9f88c69e, 0D3faf0a3000000000, 0D3e58022c54cc2f99, 0D3fb341d700000000, 0D3e62c37a3a125330, 0D3fb6f0d200000000, 0D3e615cad69737c93, 0D3fba926d00000000, 0D3e4d256ab1b285e9, 0D3fbe270700000000, 0D3e5b8abcb97a7aa2, 0D3fc0d77e00000000, 0D3e6f34239659a5dc, 0D3fc2955280000000, 0D3e6e07fd48d30177, 0D3fc44d2b00000000, 0D3e6b32df4799f4f6, 0D3fc5ff3000000000, 0D3e6c29e4f4f21cf8, 0D3fc7ab8900000000, 0D3e1086c848df1b59, 0D3fc9525a80000000, 0D3e4cf456b4764130, 0D3fcaf3c900000000, 0D3e63a02ffcb63398, 0D3fcc8ff780000000, 0D3e61e6a6886b0976, 0D3fce270700000000, 0D3e6b8abcb97a7aa2, 0D3fcfb91800000000, 0D3e6b578f8aa35552, 0D3fd0a324c0000000, 0D3e6139c871afb9fc, 0D3fd1675c80000000, 0D3e65d5d30701ce64, 0D3fd22941c0000000, 0D3e6de7bcb2d12142, 0D3fd2e8e280000000, 0D3e6d708e984e1664, 0D3fd3a64c40000000, 0D3e556945e9c72f36, 0D3fd4618bc0000000, 0D3e20e2f613e85bda, 0D3fd51aad80000000, 0D3e3cb7e0b42724f6, 0D3fd5d1bd80000000, 0D3e6fac04e52846c7, 0D3fd686c800000000, 0D3e5e9b14aec442be, 0D3fd739d7c0000000, 0D3e6b5de8034e7126, 0D3fd7eaf800000000, 0D3e6dc157e1b259d3, 0D3fd89a3380000000, 0D3e3b05096ad69c62, 0D3fd9479400000000, 0D3e5c2116faba4cdd, 0D3fd9f323c0000000, 0D3e665fcc25f95b47, 0D3fda9cec80000000, 0D3e5a9a08498d4850, 0D3fdb44f740000000, 0D3e6de647b1465f77, 0D3fdbeb4d80000000, 0D3e5da71b7bf7861d, 0D3fdc8ff7c0000000, 0D3e3e6a6886b09760, 0D3fdd32fe40000000, 0D3e6f0075eab0ef64, 0D3fddd46a00000000, 0D3e33071282fb989b, 0D3fde744240000000, 0D3e60eb43c3f1bed2, 0D3fdf128f40000000, 0D3e5faf06ecb35c84, 0D3fdfaf5880000000, 0D3e4ef1e63db35f68, 0D3fe02552a0000000, 0D3e469743fb1a71a5, 0D3fe0723e40000000, 0D3e6c1cdf404e5796, 0D3fe0be72e0000000, 0D3e4094aa0ada625e, 0D3fe109f380000000, 0D3e6e2d4c96fde3ec, 0D3fe154c3c0000000, 0D3e62f4d5e9a98f34, 0D3fe19ee6a0000000, 0D3e6467c96ecc5cbe, 0D3fe1e85f40000000, 0D3e6e7040d03dec5a, 0D3fe23130c0000000, 0D3e67bebf4282de36, 0D3fe2795e00000000, 0D3e6289b11aeb783f, 0D3fe2c0e9e0000000, 0D3e5a891d1772f538, 0D3fe307d720000000, 0D3e634f10be1fb591, 0D3fe34e2880000000, 0D3e6d9ce1d316eb93, 0D3fe393e0c0000000, 0D3e63562a19a9c442, 0D3fe3d90260000000, 0D3e54e2adf548084c, 0D3fe41d8fe0000000, 0D3e508ce55cc8c97a, 0D3fe4618bc0000000, 0D3e30e2f613e85bda, 0D3fe4a4f840000000, 0D3e6db03ebb0227bf, 0D3fe4e7d800000000, 0D3e61b75bb09cb098, 0D3fe52a2d20000000, 0D3e496f16abb9df22, 0D3fe56bf9c0000000, 0D3e65b3f399411c62, 0D3fe5ad4040000000, 0D3e586b3e59f65355, 0D3fe5ee02a0000000, 0D3e52482ceae1ac12, 0D3fe62e42e0000000, 0D3e6efa39ef35793c);

decl function &_gcc_asinh(arg_f64 %ret)(arg_f64 %x);


function &_gcc_asinh(arg_f64 %_gcc_asinh)(arg_f64 %x)
{

@_gcc_asinh_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	mul_f64	$d2, $d0, $d0;
	fma_f64	$d1, $d2, 0Db9e4635196a31a02, 0Dbdf26cfd638648ee;
	fma_f64	$d1, $d2, $d1, 0Dbdf2cef5283494a7;
	fma_f64	$d3, $d2, 0D3ee4a77fdc18d549, 0D3ef02001519f68b0;
	fma_f64	$d3, $d2, $d3, 0D3edcbfcf360ce1f0;
	fma_f64	$d4, $d2, 0D3e289151da08613e, 0D3e335d014925611c;
	fma_f64	$d4, $d2, $d4, 0D3e217cc1d362637a;
	fma_f64	$d7, $d2, 0D3b75f9c5e037dc9c, 0Dbbf6ea70f1d0b1a8;
	fma_f64	$d5, $d2, $d4, 0D3df05c68347fb4c9;
	fma_f64	$d6, $d2, $d3, 0D3eaa65a7ef307b54;
	fma_f64	$d4, $d2, $d1, 0Dbdcd93bac43ec438;
	fma_f64	$d1, $d2, $d7, 0Dbeaefb3fca23fc20;
	fma_f64	$d1, $d2, $d1, 0Dbeaf29c41318bb02;
	fma_f64	$d7, $d2, $d1, 0Dbe87edcc59b2c48a;
	mov_b64	$d1, $d0;
	and_b64	$d3, $d1, 9223372036854775807;
	mov_b64	$d1, $d3;
	cmp_lt_b1_f64	$c0, $d1, 0D4020000000000000;
	cmov_b64	$d4, $c0, $d7, $d4;
	cmov_b64	$d5, $c0, $d6, $d5;
	fma_f64	$d6, $d2, 0D3bed0e75de58f1b4, 0Dbc536c70dad71a45;
	fma_f64	$d6, $d2, $d6, 0Dbed008eaf3d3fd82;
	fma_f64	$d6, $d2, $d6, 0Dbed7233550498cf2;
	fma_f64	$d6, $d2, $d6, 0Dbec2646895d97377;
	fma_f64	$d6, $d2, $d6, 0Dbe8c24dfec272810;
	fma_f64	$d7, $d2, 0D3f056139451e79e5, 0D3f155d253a567c3d;
	fma_f64	$d7, $d2, $d7, 0D3f0c34523a01e2d9;
	fma_f64	$d7, $d2, $d7, 0D3eeb812db8e664a3;
	fma_f64	$d7, $d2, $d7, 0D3eadd5fc13df322c;
	cmp_lt_b1_f64	$c0, $d1, 0D4010000000000000;
	cmov_b64	$d5, $c0, $d7, $d5;
	cmov_b64	$d4, $c0, $d6, $d4;
	fma_f64	$d6, $d2, 0D3f74ecf3d6ca8bfa, 0D3f83e9460ee0e2a7;
	fma_f64	$d6, $d2, $d6, 0D3f78b02dd5c6f528;
	fma_f64	$d6, $d2, $d6, 0D3f562cd57610735c;
	fma_f64	$d6, $d2, $d6, 0D3f158d778035f6d3;
	fma_f64	$d7, $d2, 0D3d1bbed21d03b101, 0Dbd6c54e772cdc564;
	fma_f64	$d7, $d2, $d7, 0Dbf3f636db4fd8e6b;
	fma_f64	$d7, $d2, $d7, 0Dbf4525d90d9e8a77;
	fma_f64	$d7, $d2, $d7, 0Dbf2e94c5039d8c62;
	fma_f64	$d7, $d2, $d7, 0Dbef47e36287fd195;
	cmp_lt_b1_f64	$c0, $d1, 0D4000000000000000;
	cmov_b64	$d4, $c0, $d7, $d4;
	cmov_b64	$d5, $c0, $d6, $d5;
	fma_f64	$d6, $d2, 0Dbd6f603535c00237, 0Dbf5c9e3a829bef98;
	fma_f64	$d6, $d2, $d6, 0Dbf67f08b3b7870e3;
	fma_f64	$d6, $d2, $d6, 0Dbf590bb4ba126416;
	fma_f64	$d6, $d2, $d6, 0Dbf31e69eccc39524;
	fma_f64	$d7, $d2, $d6, 0Dbee96c2ca30a93d8;
	fma_f64	$d6, $d2, 0D3f93142704edadda, 0D3fa542679a826017;
	fma_f64	$d6, $d2, $d6, 0D3fa0ae74573fd0bc;
	fma_f64	$d6, $d2, $d6, 0D3f860cc2453952ff;
	fma_f64	$d6, $d2, $d6, 0D3f56dee13569bf4a;
	fma_f64	$d6, $d2, $d6, 0D3f0a2f30d76d07d5;
	cmp_lt_b1_f64	$c0, $d1, 0D3ff8000000000000;
	cmov_b64	$d6, $c0, $d6, $d5;
	cmov_b64	$d4, $c0, $d7, $d4;
	fma_f64	$d5, $d2, 0D3f7d7dced875024b, 0D3fb80d9ee1e01be9;
	fma_f64	$d5, $d2, $d5, 0D3fd7af47b7af6b66;
	fma_f64	$d5, $d2, $d5, 0D3fe1c2840384a501;
	fma_f64	$d7, $d2, $d5, 0D3fd1cf84053a1d47;
	fma_f64	$d5, $d2, 0D3eaaec1a6eeb9991, 0Dbf03f8552ef6499c;
	fma_f64	$d5, $d2, $d5, 0Dbf714f0ea2f32605;
	fma_f64	$d5, $d2, $d5, 0Dbfa0a0f3378e76a0;
	fma_f64	$d5, $d2, $d5, 0Dbfb2562a995b0cf9;
	fma_f64	$d5, $d2, $d5, 0Dbfa7bf5aafeb6e5f;
	cmp_le_b1_f64	$c0, $d1, 0D3ff0000000000000;
	cmov_b64	$d5, $c0, $d5, $d4;
	cmov_b64	$d4, $c0, $d7, $d6;
	cmp_gt_b1_f64	$c0, $d1, 0D4196a09e667f3bcd;
	cmp_le_b1_f64	$c1, $d1, 0D4040000000000000;
	or_b1	$c0, $c1, $c0;
	fma_f64	$d6, $d2, 0Dbf02857ee8fdf067, 0Dbf79d938a0971be4;
	fma_f64	$d6, $d2, $d6, 0Dbfab7f36426aa4b5;
	fma_f64	$d6, $d2, $d6, 0Dbfbf8edafd2d3066;
	fma_f64	$d6, $d2, $d6, 0Dbfb4ca2e272f5482;
	fma_f64	$d7, $d2, 0D3f85194e117f1658, 0D3fc33c9974fca6c2;
	fma_f64	$d7, $d2, $d7, 0D3fe3f16fc14a77ef;
	fma_f64	$d7, $d2, $d7, 0D3feeaf609d0b1c1c;
	fma_f64	$d7, $d2, $d7, 0D3fdf2f453adf95fb;
	cmp_lt_b1_f64	$c1, $d1, 0D3fe8000000000000;
	cmov_b64	$d4, $c1, $d7, $d4;
	cmov_b64	$d7, $c1, $d6, $d5;
	fma_f64	$d5, $d1, $d1, 0D3ff0000000000000;
	sqrt_f64	$d5, $d5;
	add_f64	$d5, $d1, $d5;
	cmov_b64	$d5, $c0, $d1, $d5;
	cmp_le_b1_f64	$c1, $d5, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c2, $d5, 0D3fee0faa00000000;
	and_b1	$c1, $c2, $c1;
	cvt_u32_b1	$s0, $c0;
	cmp_gt_b1_u64	$c0, $d3, 9218868437227405311;
	cmp_lt_b1_f64	$c2, $d1, 0D3e46a09e667f3bcd;
	or_b1	$c0, $c0, $c2;
	mov_b64	$d3, $d5;
	or_b64	$d6, $d3, 274719577269600256;
	add_f64	$d6, $d6, 0D83d0000000000000;
	cmp_lt_b1_u64	$c2, $d3, 4503599627370496;
	cmov_b32	$s1, $c2, 4294966213, 4294966273;
	cmov_b64	$d6, $c2, $d6, $d3;
	fma_f64	$d3, $d2, 0D3f95c618da6da602, 0D3fd1b46c39aa2b54;
	fma_f64	$d3, $d2, $d3, 0D3ff0d700c04959be;
	fma_f64	$d3, $d2, $d3, 0D3ff84060840ece8a;
	fma_f64	$d3, $d2, $d3, 0D3fe765f5cc9a1504;
	fma_f64	$d8, $d2, 0Dbf17ae97e02b87fd, 0Dbf89d896b36d9727;
	fma_f64	$d8, $d2, $d8, 0Dbfb8293a155d1580;
	fma_f64	$d8, $d2, $d8, 0Dbfc950d914d4af74;
	fma_f64	$d8, $d2, $d8, 0Dbfbf329d10cd6fc4;
	cmp_lt_b1_f64	$c2, $d1, 0D3fe0000000000000;
	cmov_b64	$d7, $c2, $d8, $d7;
	cmov_b64	$d3, $c2, $d3, $d4;
	fma_f64	$d4, $d2, 0Dbf1b10b99c58a7cf, 0Dbf8c73493ef3344b;
	fma_f64	$d4, $d2, $d4, 0Dbfba156e7495bdea;
	fma_f64	$d4, $d2, $d4, 0Dbfcaf52a99a8d965;
	fma_f64	$d4, $d2, $d4, 0Dbfc0712c83a32494;
	fma_f64	$d8, $d2, 0D3f981644a95b0515, 0D3fd3403376356f73;
	fma_f64	$d8, $d2, $d8, 0D3ff212db144831d3;
	fma_f64	$d8, $d2, $d8, 0D3ff9c47892df4bb9;
	fma_f64	$d8, $d2, $d8, 0D3fe8a9c2c574b6df;
	cmp_lt_b1_f64	$c2, $d1, 0D3fd0000000000000;
	cmov_b64	$d3, $c2, $d8, $d3;
	cmov_b64	$d4, $c2, $d4, $d7;
	shr_s64	$d7, $d6, 45;
	add_f64	$d5, $d5, 0Dbff0000000000000;
	cvt_u32_u64	$s3, $d7;
	add_f64	$d7, $d5, 0D4000000000000000;
	and_b32	$s2, $s3, 1;
	div_f64	$d7, $d5, $d7;
	neg_f64	$d8, $d5;
	bitextract_u32	$s3, $s3, 1, 6;
	and_b64	$d9, $d6, 4503599627370495;
	or_b64	$d9, $d9, 4602678819172646912;
	or_b32	$s3, $s3, 64;
	shr_u64	$d6, $d6, 52;
	cvt_u32_u64	$s4, $d6;
	and_b32	$s4, $s4, 2047;
	add_u32	$s1, $s1, $s4;
	add_f64	$d6, $d7, $d7;
	mul_f64	$d7, $d7, $d8;
	add_u32	$s2, $s3, $s2;
	cvt_near_f64_s32	$d8, $s2;
	mul_f64	$d8, $d8, 0D3f80000000000000;
	sub_f64	$d9, $d9, $d8;
	fma_f64	$d8, 0D3fe0000000000000, $d9, $d8;
	div_f64	$d9, $d9, $d8;
	cmov_b64	$d6, $c1, $d6, $d9;
	add_u32	$s2, $s2, 4294967232;
	cvt_s64_s32	$d8, $s2;
	shl_u64	$d8, $d8, 4;
	ld_v2_readonly_align(16)_f64	($d11, $d12), [&__math64_LN_TBL][$d8];
	cmov_b32	$s1, $c1, 0, $s1;
	mul_f64	$d8, $d6, $d6;
	fma_f64	$d10, $d8, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d10, $d8, $d10, 0D3fb5555555555557;
	fma_f64	$d13, $d8, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	fma_f64	$d13, $d8, $d13, 0D3f89999999bac6d4;
	fma_f64	$d13, $d8, $d13, 0D3fb55555555554e6;
	cmov_b64	$d10, $c1, $d13, $d10;
	cmov_b64	$d9, $c1, $d7, $d9;
	cmov_b64	$d7, $c1, 0, $d12;
	cmov_b64	$d5, $c1, $d5, $d11;
	mul_f64	$d13, $d2, $d1;
	add_u32	$s0, $s1, $s0;
	cvt_near_f64_s32	$d11, $s0;
	div_f64	$d3, $d4, $d3;
	add_f64	$d4, $d3, 0D3fd0000000000000;
	div_f64	$d12, $d4, $d2;
	fma_f64	$d2, $d13, $d3, $d1;
	mul_f64	$d3, $d6, $d8;
	fma_f64	$d4, $d3, $d10, $d9;
	fma_f64	$d3, $d11, 0D3fe62e42e0000000, $d5;
	add_f64	$d4, $d7, $d4;
	add_f64	$d5, $d3, $d12;
	fma_f64	$d4, $d11, 0D3e6efa39ef35793c, $d4;
	sub_f64	$d6, $d3, $d5;
	add_f64	$d6, $d12, $d6;
	add_f64	$d6, $d4, $d6;
	add_f64	$d7, $d5, $d6;
	sub_f64	$d5, $d5, $d7;
	add_f64	$d5, $d6, $d5;
	add_f64	$d5, $d7, $d5;
	cmp_gt_b1_f64	$c1, $d1, 0D3ff0000000000000;
	cmov_b64	$d2, $c1, $d5, $d2;
	add_f64	$d3, $d3, $d4;
	cmp_gt_b1_f64	$c1, $d1, 0D4040000000000000;
	cmov_b64	$d1, $c1, $d3, $d2;
	neg_f64	$d2, $d1;
	cmp_lt_b1_f64	$c1, $d0, 0D0000000000000000;
	cmov_b64	$d1, $c1, $d2, $d1;
	cmov_b64	$d0, $c0, $d0, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_asinh];
	ret;
};


decl function &_gcc_pown(arg_f64 %ret)(
	arg_f64 %x,
	arg_u32 %ny);


function &_gcc_pown(arg_f64 %_gcc_pown)(
	arg_f64 %x,
	arg_u32 %ny)
{
	align(4) spill_u8 %__spillStack[12];

@_gcc_pown_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	and_b64	$d2, $d0, 4503599627370495;
	or_b64	$d1, $d2, 4607182418800017408;
	add_f64	$d3, $d1, 0Dbff0000000000000;
	and_b64	$d1, $d0, 9223372036854775807;
	shr_u64	$d4, $d1, 52;
	cvt_u32_u64	$s1, $d4;
	add_u32	$s0, $s1, 4294966273;
	bitextract_u64	$d4, $d3, 52, 11;
	add_u64	$d4, $d4, 4294965251;
	cvt_u32_u64	$s2, $d4;
	and_b64	$d3, $d3, 4503599627370495;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b64	$d7, $c0, $d3, $d2;
	cmov_b32	$s4, $c0, $s2, $s0;
	ld_arg_align(4)_u32	$s0, [%ny];
	cvt_near_f64_s32	$d3, $s0;
	mov_b64	$d2, $d3;
	and_b64	$d4, $d2, 18446744073575333888;
	mov_b64	$d5, $d4;
	sub_f64	$d3, $d3, $d5;
	cvt_s32_f64	$s1, $d5;
	sub_u32	$s1, $s0, $s1;
	cvt_near_f64_s32	$d6, $s1;
	and_b64	$d4, $d2, 9223372036854775807;
	cmp_gt_b1_u64	$c0, $d4, 4715268809856909312;
	cmov_b64	$d6, $c0, $d6, $d3;
	cmp_eq_b1_s64	$c0, $d4, $d2;
	cmp_ne_b1_s64	$c1, $d4, $d2;
	cmp_eq_b1_s64	$c2, $d1, 0;
	and_b1	$c7, $c1, $c2;
	and_b1	$c6, $c2, $c0;
	cmp_eq_b1_s64	$c2, $d0, -4503599627370496;
	and_b1	$c5, $c1, $c2;
	and_b1	$c3, $c2, $c0;
	cmp_eq_b1_s64	$c2, $d0, 9218868437227405312;
	and_b1	$c0, $c2, $c0;
	cvt_u32_b1	$s1, $c0;
	st_spill_align(4)_u32	$s1, [%__spillStack];
	and_b1	$c0, $c1, $c2;
	cvt_u32_b1	$s1, $c0;
	st_spill_align(4)_u32	$s1, [%__spillStack][8];
	and_b32	$s1, $s0, 1;
	sub_u32	$s2, 2, $s1;
	cmp_ne_b1_s64	$c0, $d1, $d0;
	cmp_eq_b1_s32	$c1, $s2, 1;
	and_b1	$c0, $c1, $c0;
	cmp_ne_b1_s32	$c4, $s2, 1;
	and_b1	$c2, $c3, $c4;
	and_b1	$c3, $c3, $c1;
	and_b1	$c4, $c5, $c4;
	and_b1	$c5, $c5, $c1;
	cvt_u32_b1	$s2, $c6;
	and_b1	$c6, $c6, $c1;
	cvt_u32_b1	$s3, $c7;
	and_b1	$c7, $c7, $c1;
	cmp_eq_b1_s64	$c1, $d1, $d0;
	cmov_b64	$d2, $c1, 0, 9223372036854775808;
	cmov_b64	$d3, $c1, 9218868437227405312, 18442240474082181120;
	cmov_b64	$d4, $c0, 13830554455654793216, 4607182418800017408;
	and_b64	$d8, $d7, 4486007441326080;
	shl_u64	$d9, $d7, 1;
	and_b64	$d9, $d9, 17592186044416;
	add_u64	$d9, $d9, $d8;
	or_b64	$d8, $d9, 4602678819172646912;
	or_b64	$d7, $d7, 4602678819172646912;
	sub_f64	$d7, $d8, $d7;
	shr_u64	$d12, $d9, 40;
	ld_v2_readonly_align(16)_f64	($d9, $d10), [&__math64_LOG_F_INV_TBL][$d12];
	add_f64	$d9, $d9, $d10;
	mul_f64	$d10, $d7, $d9;
	and_b64	$d13, $d10, 18446744073575333888;
	ld_v2_readonly_align(16)_f64	($d11, $d10), [&__math64_POWLOG_TBL][$d12];
	neg_f64	$d14, $d8;
	cvt_near_f64_s32	$d12, $s4;
	mov_b64	$d8, $d13;
	fma_f64	$d7, $d14, $d8, $d7;
	mul_f64	$d9, $d7, $d9;
	fma_f64	$d7, $d12, 0D3fe62e42e0000000, $d11;
	fma_f64	$d10, $d12, 0D3e6efa39ef35793c, $d10;
	add_f64	$d11, $d9, $d8;
	fma_f64	$d12, $d11, 0D3fc2492492492492, 0D3fc5555555555555;
	fma_f64	$d12, $d11, $d12, 0D3fc999999999999a;
	fma_f64	$d12, $d11, $d12, 0D3fd0000000000000;
	fma_f64	$d14, $d11, $d12, 0D3fd5555555555555;
	mul_f64	$d12, $d8, 0D3fe0000000000000;
	mul_f64	$d13, $d8, $d12;
	add_f64	$d12, $d8, $d13;
	sub_f64	$d15, $d8, $d12;
	add_f64	$d13, $d13, $d15;
	mul_f64	$d14, $d14, $d11;
	mul_f64	$d14, $d11, $d14;
	mul_f64	$d15, $d9, 0D3fe0000000000000;
	mul_f64	$d11, $d11, $d14;
	fma_f64	$d11, $d15, $d9, $d11;
	fma_f64	$d8, $d8, $d9, $d11;
	add_f64	$d8, $d9, $d8;
	add_f64	$d8, $d8, $d13;
	sub_f64	$d8, $d10, $d8;
	sub_f64	$d9, $d8, $d12;
	add_f64	$d10, $d12, $d9;
	sub_f64	$d10, $d8, $d10;
	add_f64	$d8, $d7, $d9;
	sub_f64	$d7, $d7, $d8;
	add_f64	$d7, $d9, $d7;
	add_f64	$d9, $d10, $d7;
	mov_b64	$d7, $d8;
	and_b64	$d7, $d7, 18446744073575333888;
	sub_f64	$d8, $d8, $d7;
	add_f64	$d8, $d9, $d8;
	mul_f64	$d9, $d6, $d8;
	fma_f64	$d8, $d5, $d8, $d9;
	fma_f64	$d8, $d6, $d7, $d8;
	fma_f64	$d6, $d5, $d7, $d8;
	neg_f64	$d9, $d6;
	fma_f64	$d5, $d5, $d7, $d9;
	add_f64	$d5, $d8, $d5;
	mul_f64	$d7, $d6, 0D40571547652b82fe;
	cvt_s32_f64	$s4, $d7;
	cvt_near_f64_s32	$d7, $s4;
	fma_f64	$d8, $d7, 0Dbf862e42f0000000, $d6;
	mul_f64	$d7, $d7, 0Dbdfdf473de6af278;
	add_f64	$d7, $d8, $d7;
	add_f64	$d5, $d5, $d7;
	fma_f64	$d7, $d5, 0D3f56c1728d739765, 0D3f811115b7aa905e;
	fma_f64	$d7, $d5, $d7, 0D3fa5555555545d4e;
	fma_f64	$d7, $d5, $d7, 0D3fc5555555548f7c;
	fma_f64	$d7, $d5, $d7, 0D3fe0000000000000;
	mul_f64	$d8, $d5, $d5;
	and_b32	$s5, $s4, 63;
	cvt_u64_u32	$d9, $s5;
	fma_f64	$d5, $d8, $d7, $d5;
	shl_u64	$d9, $d9, 4;
	ld_v2_readonly_align(16)_f64	($d7, $d8), [&__math64_TWO_TO_JBY64_EP][$d9];
	add_f64	$d9, $d7, $d8;
	fma_f64	$d5, $d9, $d5, $d8;
	add_f64	$d5, $d7, $d5;
	mul_f64	$d7, $d5, 0D4340000000000000;
	mov_b64	$d8, $d7;
	shr_u64	$d7, $d8, 52;
	cvt_u32_u64	$s5, $d7;
	and_b32	$s5, $s5, 2047;
	add_u32	$s5, $s5, 4294967243;
	mov_b64	$d7, $d5;
	shr_u64	$d9, $d7, 52;
	cvt_u32_u64	$s6, $d9;
	and_b32	$s6, $s6, 2047;
	cmp_eq_b1_s32	$c0, $s6, 0;
	cmov_b32	$s6, $c0, $s5, $s6;
	cmov_b64	$d8, $c0, $d8, $d7;
	shr_s32	$s7, $s4, 6;
	cmp_eq_b1_s32	$c0, $s7, 0;
	cmp_eq_b1_f64	$c1, $d5, 0D0000000000000000;
	or_b1	$c0, $c0, $c1;
	class_b1_f64	$c1, $d5, 516;
	cvt_u32_b1	$s4, $c1;
	and_b32	$s4, $s4, 1;
	cvt_u32_b1	$s5, $c0;
	and_b64	$d8, $d8, 9227875636482146303;
	add_u32	$s6, $s6, $s7;
	max_s32	$s6, $s6, -2047;
	min_s32	$s6, $s6, 2047;
	cvt_u64_u32	$d9, $s6;
	shl_u64	$d9, $d9, 52;
	or_b64	$d9, $d8, $d9;
	add_u32	$s7, $s6, 53;
	cvt_u64_u32	$d10, $s7;
	shl_u64	$d10, $d10, 52;
	or_b64	$d8, $d8, $d10;
	mul_f64	$d8, $d8, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c0, $s6, 0;
	cmov_b64	$d8, $c0, $d9, $d8;
	and_b64	$d7, $d7, 9223372036854775808;
	or_b64	$d9, $d7, 9218868437227405312;
	cmp_eq_b1_s32	$c0, $s6, 2047;
	cmov_b64	$d8, $c0, $d9, $d8;
	cmp_lt_b1_s32	$c0, $s6, -53;
	cmov_b64	$d7, $c0, $d7, $d8;
	or_b32	$s4, $s5, $s4;
	cmp_ne_b1_s32	$c0, $s4, 0;
	cmov_b64	$d5, $c0, $d5, $d7;
	cmp_gt_b1_f64	$c0, $d6, 0D40862e42fefa39ef;
	cmov_b64	$d5, $c0, 9218868437227405312, $d5;
	cmp_lt_b1_f64	$c0, $d6, 0Dc0874910d52d3051;
	cmov_b64	$d5, $c0, 0, $d5;
	mul_f64	$d4, $d4, $d5;
	cmov_b64	$d3, $c7, $d3, $d4;
	xor_b32	$s1, $s1, 1;
	and_b32	$s3, $s3, $s1;
	cmp_ne_b1_s32	$c0, $s3, 0;
	cmov_b64	$d3, $c0, 9218868437227405312, $d3;
	and_b32	$s1, $s2, $s1;
	cmp_ne_b1_s32	$c0, $s1, 0;
	cmov_b64	$d3, $c0, 0, $d3;
	cmov_b64	$d2, $c6, $d2, $d3;
	cmov_b64	$d2, $c5, 9223372036854775808, $d2;
	cmov_b64	$d2, $c4, 0, $d2;
	cmov_b64	$d2, $c3, 18442240474082181120, $d2;
	cmov_b64	$d2, $c2, 9218868437227405312, $d2;
	ld_spill_align(4)_u32	$s1, [%__spillStack][8];
	cvt_b1_u32	$c0, $s1;
	cmov_b64	$d2, $c0, 0, $d2;
	ld_spill_align(4)_u32	$s1, [%__spillStack];
	cvt_b1_u32	$c0, $s1;
	cmov_b64	$d2, $c0, 9218868437227405312, $d2;
	cmp_gt_b1_u64	$c0, $d1, 9218868437227405312;
	cmov_b64	$d0, $c0, $d0, $d2;
	cmp_eq_b1_s32	$c0, $s0, 0;
	cmov_b64	$d0, $c0, 4607182418800017408, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_pown];
	ret;
};


decl function &_gcc_log10(arg_f64 %ret)(arg_f64 %x);


function &_gcc_log10(arg_f64 %_gcc_log10)(arg_f64 %x)
{

@_gcc_log10_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	mov_b64	$d1, $d0;
	or_b64	$d2, $d1, 274719577269600256;
	add_f64	$d2, $d2, 0D83d0000000000000;
	cmp_lt_b1_u64	$c0, $d1, 4503599627370496;
	cmov_b64	$d1, $c0, $d2, $d1;
	cmov_b32	$s3, $c0, 4294966213, 4294966273;
	cmp_le_b1_f64	$c0, $d0, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c1, $d0, 0D3fee0faa00000000;
	and_b1	$c0, $c1, $c0;
	cmp_lt_b1_f64	$c1, $d0, 0D0000000000000000;
	cvt_u32_b1	$s0, $c1;
	class_b1_f64	$c1, $d0, 3;
	cvt_u32_b1	$s1, $c1;
	and_b32	$s1, $s1, 1;
	class_b1_f64	$c1, $d0, 516;
	cvt_u32_b1	$s2, $c1;
	and_b32	$s2, $s2, 1;
	shr_s64	$d3, $d1, 45;
	add_f64	$d2, $d0, 0Dbff0000000000000;
	cvt_u32_u64	$s4, $d3;
	add_f64	$d4, $d2, 0D4000000000000000;
	mov_b64	$d3, $d2;
	bitextract_u32	$s5, $s4, 1, 6;
	div_f64	$d4, $d2, $d4;
	add_f64	$d6, $d4, $d4;
	mul_f64	$d5, $d6, $d6;
	and_b32	$s4, $s4, 1;
	or_b32	$s5, $s5, 64;
	mul_f64	$d6, $d6, $d5;
	fma_f64	$d7, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	fma_f64	$d7, $d5, $d7, 0D3f89999999bac6d4;
	fma_f64	$d5, $d5, $d7, 0D3fb55555555554e6;
	mul_f64	$d4, $d2, $d4;
	neg_f64	$d4, $d4;
	fma_f64	$d4, $d6, $d5, $d4;
	add_u32	$s4, $s5, $s4;
	and_b64	$d5, $d1, 4503599627370495;
	or_b64	$d5, $d5, 4602678819172646912;
	and_b64	$d3, $d3, 18446744069414584320;
	sub_f64	$d6, $d2, $d3;
	cvt_near_f64_s32	$d2, $s4;
	mul_f64	$d2, $d2, 0D3f80000000000000;
	sub_f64	$d5, $d5, $d2;
	fma_f64	$d2, $d5, 0D3fe0000000000000, $d2;
	div_f64	$d2, $d5, $d2;
	add_f64	$d5, $d6, $d4;
	mul_f64	$d4, $d5, 0D3ea8a93728719535;
	fma_f64	$d6, 0D3ea8a93728719535, $d3, $d4;
	shr_u64	$d1, $d1, 52;
	cvt_u32_u64	$s5, $d1;
	and_b32	$s5, $s5, 2047;
	add_u32	$s3, $s3, $s5;
	mul_f64	$d4, $d2, $d2;
	fma_f64	$d1, 0D3fdbcb7800000000, $d5, $d6;
	add_u32	$s4, $s4, 4294967232;
	cvt_s64_s32	$d5, $s4;
	shl_u64	$d7, $d5, 4;
	ld_v2_readonly_align(16)_f64	($d5, $d6), [&__math64_LN_TBL][$d7];
	fma_f64	$d1, 0D3fdbcb7800000000, $d3, $d1;
	cvt_near_f64_s32	$d3, $s3;
	fma_f64	$d7, $d4, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d7, $d4, $d7, 0D3fb5555555555557;
	mul_f64	$d4, $d4, $d7;
	fma_f64	$d2, $d2, $d4, $d2;
	add_f64	$d4, $d6, $d2;
	fma_f64	$d2, $d3, 0D3fe62e42e0000000, $d5;
	fma_f64	$d3, $d3, 0D3e6efa39ef35793c, $d4;
	mul_f64	$d4, $d3, 0D3ea8a93728719535;
	fma_f64	$d4, 0D3ea8a93728719535, $d2, $d4;
	fma_f64	$d3, 0D3fdbcb7800000000, $d3, $d4;
	fma_f64	$d2, 0D3fdbcb7800000000, $d2, $d3;
	cmov_b64	$d1, $c0, $d1, $d2;
	cvt_b1_u32	$c0, $s2;
	cmov_b64	$d1, $c0, 9218868437227405312, $d1;
	or_b32	$s0, $s1, $s0;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d1, $c0, 9221120237041090560, $d1;
	cmp_eq_b1_f64	$c0, $d0, 0D0000000000000000;
	cmov_b64	$d0, $c0, 18442240474082181120, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_log10];
	ret;
};


decl function &_gcc_fabs(arg_f64 %ret)(arg_f64 %x);


function &_gcc_fabs(arg_f64 %_gcc_fabs)(arg_f64 %x)
{

@_gcc_fabs_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	abs_f64	$d0, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_fabs];
	ret;
};


decl function &_gcc_maxmag(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y);


function &_gcc_maxmag(arg_f64 %_gcc_maxmag)(
	arg_f64 %x,
	arg_f64 %y)
{

@_gcc_maxmag_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	and_b64	$d2, $d0, 9223372036854775807;
	cmp_gt_b1_u64	$c0, $d2, 9218868437227405312;
	cvt_u32_b1	$s0, $c0;
	ld_arg_align(8)_f64	$d1, [%y];
	and_b64	$d3, $d1, 9223372036854775807;
	cmp_gt_b1_u64	$c0, $d3, 9218868437227405312;
	cvt_u32_b1	$s1, $c0;
	neg_s32	$s1, $s1;
	cvt_s64_s32	$d4, $s1;
	or_b64	$d3, $d4, $d3;
	neg_s32	$s0, $s0;
	cvt_s64_s32	$d4, $s0;
	or_b64	$d2, $d4, $d2;
	cmp_gt_b1_s64	$c0, $d2, $d3;
	cvt_u32_b1	$s0, $c0;
	cmp_gt_b1_s64	$c0, $d3, $d2;
	cvt_u32_b1	$s1, $c0;
	cmp_eq_b1_s64	$c0, $d2, $d3;
	cvt_u32_b1	$s2, $c0;
	and_b64	$d3, $d1, $d0;
	and_b64	$d2, $d2, 2251799813685248;
	or_b64	$d2, $d2, $d3;
	neg_s32	$s2, $s2;
	cvt_s64_s32	$d3, $s2;
	and_b64	$d2, $d3, $d2;
	neg_s32	$s1, $s1;
	cvt_s64_s32	$d3, $s1;
	and_b64	$d1, $d3, $d1;
	neg_s32	$s0, $s0;
	cvt_s64_s32	$d3, $s0;
	and_b64	$d0, $d3, $d0;
	or_b64	$d0, $d0, $d1;
	or_b64	$d0, $d0, $d2;
	st_arg_align(8)_f64	$d0, [%_gcc_maxmag];
	ret;
};

align(4) readonly_u8 &__math64_PIBITS[158] = u8[](224, 241, 27, 193, 12, 88, 33, 116, 53, 126, 196, 126, 237, 175, 169, 75, 74, 41, 222, 231, 28, 244, 236, 197, 151, 175, 31, 235, 158, 212, 181, 168, 127, 121, 154, 253, 24, 61, 221, 38, 44, 159, 60, 251, 217, 180, 125, 180, 41, 104, 45, 70, 188, 188, 63, 96, 22, 120, 255, 95, 226, 127, 236, 160, 228, 247, 46, 126, 17, 114, 210, 231, 76, 13, 230, 88, 71, 230, 4, 249, 125, 209, 154, 192, 113, 166, 19, 18, 237, 186, 212, 215, 8, 162, 251, 156, 166, 196, 114, 172, 119, 248, 115, 72, 70, 39, 168, 187, 36, 25, 128, 75, 55, 9, 233, 184, 145, 220, 134, 21, 239, 122, 175, 142, 69, 249, 7, 65, 14, 241, 100, 86, 138, 109, 3, 119, 211, 212, 71, 95, 157, 240, 167, 84, 16, 57, 185, 13, 230, 139, 2, 0, 0, 0, 0, 0, 0, 0);

decl function &_gcc_sincos(arg_f64 %ret)(
	arg_f64 %x,
	arg_u64 %cp);


function &_gcc_sincos(arg_f64 %_gcc_sincos)(
	arg_f64 %x,
	arg_u64 %cp)
{

@_gcc_sincos_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d1, [%x];
	abs_f64	$d2, $d1;
	ld_arg_align(8)_u64	$d0, [%cp];
	cmp_geu_b1_f64	$c0, $d2, 0D42e0000000000000;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	fma_f64	$d3, $d2, 0D3fe45f306dc9c883, 0D3fe0000000000000;
	trunc_f64	$d3, $d3;
	mul_f64	$d4, $d3, 0D3ff921fb54442d18;
	fma_f64	$d5, 0Dbff921fb54442d18, $d3, $d4;
	mul_f64	$d6, $d3, 0Dbc91a62633145c06;
	add_f64	$d4, $d5, $d6;
	sub_f64	$d5, $d4, $d5;
	sub_f64	$d6, $d6, $d5;
	mul_f64	$d7, $d3, 0Dbff921fb54442d18;
	add_f64	$d5, $d7, $d4;
	sub_f64	$d7, $d5, $d7;
	mul_f64	$d8, $d3, 0Db94c1cd129024e08;
	sub_f64	$d4, $d4, $d7;
	add_f64	$d6, $d8, $d6;
	mul_f64	$d7, $d3, 0D3c91a62633145c06;
	fma_f64	$d7, 0Dbc91a62633145c06, $d3, $d7;
	add_f64	$d6, $d7, $d6;
	mul_f64	$d7, $d3, 0D394c1cd129024e08;
	fma_f64	$d7, 0Db94c1cd129024e08, $d3, $d7;
	add_f64	$d6, $d7, $d6;
	add_f64	$d7, $d4, $d6;
	add_f64	$d5, $d2, $d5;
	cvt_s64_f64	$d2, $d3;
	cvt_u32_u64	$s0, $d2;
	add_f64	$d2, $d5, $d7;
	sub_f64	$d3, $d2, $d5;
	sub_f64	$d3, $d7, $d3;
	sub_f64	$d4, $d7, $d4;
	sub_f64	$d4, $d6, $d4;
	add_f64	$d3, $d4, $d3;
	br	@BB0_3;

@BB0_2:
	mov_b64	$d3, $d2;
	shr_s64	$d3, $d3, 52;
	cvt_u32_u64	$s0, $d3;
	add_u32	$s0, $s0, 4294966273;
	shr_s32	$s0, $s0, 3;
	add_u32	$s0, $s0, 17;
	max_s32	$s5, 23, $s0;
	sub_u32	$s0, 150, $s5;
	bitextract_u32	$s9, $s0, 2, 2;
	cmp_eq_b1_s32	$c0, $s9, 1;
	cmov_b32	$s7, $c0, 4294967295, 0;
	and_b32	$s1, $s0, 4294967280;
	cvt_s64_s32	$d3, $s1;
	ld_v4_readonly_align(16)_u32	($s10, $s11, $s8, $s2), [&__math64_PIBITS][$d3];
	ld_v4_readonly_align(16)_u32	($s1, $s3, $s6, $s4), [&__math64_PIBITS][$d3+16];
	cmp_ne_b1_s32	$c0, $s7, 0;
	cmov_b32	$s13, $c0, $s1, $s2;
	cmov_b32	$s7, $c0, $s4, $s6;
	cmov_b32	$s12, $c0, $s6, $s3;
	cmov_b32	$s15, $c0, $s3, $s1;
	cmov_b32	$s16, $c0, $s2, $s8;
	cmov_b32	$s18, $c0, $s8, $s11;
	cmov_b32	$s19, $c0, $s11, $s10;
	cmp_eq_b1_s32	$c0, $s9, 2;
	cmov_b32	$s17, $c0, 4294967295, 0;
	cmp_eq_b1_s32	$c0, $s9, 3;
	cmov_b32	$s14, $c0, 4294967295, 0;
	ld_v2_readonly_align(16)_u32	($s10, $s11), [&__math64_PIBITS][$d3+32];
	cmp_ne_b1_s32	$c0, $s17, 0;
	cmov_b32	$s17, $c0, $s3, $s13;
	cmov_b32	$s8, $c0, $s8, $s19;
	cmov_b32	$s13, $c0, $s2, $s18;
	cmov_b32	$s16, $c0, $s1, $s16;
	cmov_b32	$s15, $c0, $s6, $s15;
	cmov_b32	$s12, $c0, $s4, $s12;
	cmov_b32	$s18, $c0, $s10, $s7;
	shl_u32	$s5, $s5, 3;
	or_b32	$s7, $s5, 2;
	cmp_gt_b1_s32	$c0, $s7, 1018;
	cmov_b32	$s9, $c0, 136, 0;
	cmov_b64	$d3, $c0, 3994692869477629952, 4607182418800017408;
	cmp_ne_b1_s32	$c0, $s14, 0;
	cmov_b32	$s5, $c0, $s6, $s17;
	cmov_b32	$s11, $c0, $s11, $s18;
	cmov_b32	$s10, $c0, $s10, $s12;
	cmov_b32	$s4, $c0, $s4, $s15;
	cmov_b32	$s6, $c0, $s3, $s16;
	cmov_b32	$s1, $c0, $s1, $s13;
	cmov_b32	$s2, $c0, $s2, $s8;
	bytealign_b32	$s3, $s5, $s4, $s0;
	bytealign_b32	$s4, $s4, $s10, $s0;
	shr_u32	$s12, $s4, 16;
	bytealign_b32	$s8, $s10, $s11, $s0;
	shl_u32	$s10, $s8, 16;
	or_b32	$s10, $s10, $s12;
	cvt_u64_u32	$d4, $s3;
	and_b32	$s4, $s4, 65535;
	sub_u32	$s3, $s9, $s7;
	shl_u32	$s3, $s3, 20;
	add_u32	$s7, $s3, 1227882496;
	or_b32	$s4, $s4, $s7;
	pack_u32x2_u32	$d5, u32x2(0,0), $s4, 1;
	or_b64	$d4, $d4, $d5;
	bytealign_b32	$s4, $s1, $s6, $s0;
	mul_f64	$d2, $d2, $d3;
	cvt_u64_u32	$d3, $s10;
	shr_u32	$s9, $s8, 16;
	add_u32	$s8, $s3, 1278214144;
	or_b32	$s9, $s9, $s8;
	pack_u32x2_u32	$d5, u32x2(0,0), $s9, 1;
	or_b64	$d3, $d3, $d5;
	pack_u32x2_u32	$d5, u32x2(0,0), $s8, 1;
	sub_f64	$d5, $d3, $d5;
	mul_f64	$d8, $d2, $d5;
	mov_b64	$d3, $d4;
	pack_u32x2_u32	$d4, u32x2(0,0), $s7, 1;
	sub_f64	$d3, $d3, $d4;
	mul_f64	$d4, $d2, $d3;
	shr_u32	$s7, $s4, 16;
	bytealign_b32	$s5, $s6, $s5, $s0;
	shl_u32	$s6, $s5, 16;
	add_f64	$d6, $d4, $d8;
	or_b32	$s6, $s6, $s7;
	neg_f64	$d7, $d8;
	fma_f64	$d7, $d5, $d2, $d7;
	sub_f64	$d5, $d6, $d8;
	cvt_u64_u32	$d8, $s6;
	shr_u32	$s6, $s5, 16;
	add_u32	$s5, $s3, 1177550848;
	or_b32	$s6, $s5, $s6;
	pack_u32x2_u32	$d9, u32x2(0,0), $s6, 1;
	sub_f64	$d11, $d4, $d5;
	or_b64	$d5, $d8, $d9;
	add_f64	$d12, $d7, $d11;
	pack_u32x2_u32	$d8, u32x2(0,0), $s5, 1;
	sub_f64	$d8, $d5, $d8;
	mul_f64	$d13, $d2, $d8;
	add_f64	$d5, $d13, $d12;
	mul_f64	$d6, $d6, 0D3f50000000000000;
	fract_f64	$d6, $d6;
	mul_f64	$d6, $d6, 0D4090000000000000;
	add_f64	$d9, $d6, $d5;
	cmp_lt_b1_f64	$c0, $d9, 0D0000000000000000;
	cmov_b64	$d9, $c0, 4652218415073722368, 0;
	add_f64	$d9, $d6, $d9;
	add_f64	$d6, $d5, $d9;
	fract_f64	$d10, $d6;
	sub_f64	$d6, $d6, $d10;
	sub_f64	$d10, $d9, $d6;
	add_f64	$d9, $d5, $d10;
	cmp_ge_b1_f64	$c0, $d9, 0D3fe0000000000000;
	cvt_u32_b1	$s5, $c0;
	bytealign_b32	$s0, $s2, $s1, $s0;
	cvt_u64_u32	$d14, $s0;
	and_b32	$s1, $s4, 65535;
	add_u32	$s0, $s3, 1127219200;
	or_b32	$s1, $s0, $s1;
	pack_u32x2_u32	$d15, u32x2(0,0), $s1, 1;
	or_b64	$d14, $d14, $d15;
	sub_f64	$d15, $d5, $d12;
	sub_f64	$d15, $d13, $d15;
	sub_f64	$d7, $d12, $d7;
	sub_f64	$d11, $d11, $d7;
	neg_f64	$d12, $d4;
	neg_f64	$d7, $d13;
	add_f64	$d4, $d11, $d15;
	fma_f64	$d11, $d3, $d2, $d12;
	mov_b64	$d3, $d14;
	pack_u32x2_u32	$d12, u32x2(0,0), $s0, 1;
	sub_f64	$d3, $d3, $d12;
	mul_f64	$d12, $d2, $d3;
	neg_f64	$d13, $d12;
	fma_f64	$d3, $d3, $d2, $d13;
	fma_f64	$d7, $d8, $d2, $d7;
	add_f64	$d8, $d11, $d4;
	sub_f64	$d2, $d8, $d11;
	sub_f64	$d4, $d4, $d2;
	add_f64	$d2, $d12, $d8;
	sub_f64	$d8, $d2, $d8;
	sub_f64	$d8, $d12, $d8;
	add_f64	$d11, $d4, $d8;
	sub_f64	$d4, $d9, $d10;
	sub_f64	$d8, $d5, $d4;
	add_f64	$d4, $d2, $d8;
	cvt_near_f32_s32	$s0, $s5;
	cvt_ftz_f64_f32	$d5, $s0;
	sub_f64	$d9, $d9, $d5;
	add_f64	$d5, $d4, $d9;
	add_f64	$d7, $d7, $d11;
	add_f64	$d3, $d3, $d7;
	cvt_ftz_near_f32_f64	$s0, $d6;
	cvt_ftz_s32_f32	$s0, $s0;
	mul_f64	$d6, $d5, 0Dbff921fb54442d18;
	fma_f64	$d6, $d5, 0D3ff921fb54442d18, $d6;
	fma_f64	$d6, $d5, 0D3c91a62633145c06, $d6;
	sub_f64	$d7, $d4, $d8;
	sub_f64	$d2, $d2, $d7;
	add_f64	$d2, $d3, $d2;
	sub_f64	$d3, $d5, $d9;
	sub_f64	$d3, $d4, $d3;
	add_f64	$d2, $d2, $d3;
	fma_f64	$d3, $d2, 0D3ff921fb54442d18, $d6;
	mul_f64	$d4, $d5, 0D3ff921fb54442d18;
	add_u32	$s0, $s5, $s0;
	add_f64	$d2, $d3, $d4;
	sub_f64	$d4, $d2, $d4;
	sub_f64	$d3, $d3, $d4;

@BB0_3:
	class_b1_f64	$c0, $d1, 3;
	cvt_u32_b1	$s1, $c0;
	class_b1_f64	$c0, $d1, 516;
	cvt_u32_b1	$s2, $c0;
	or_b32	$s1, $s2, $s1;
	and_b32	$s2, $s0, 2;
	cmp_lt_b1_f64	$c1, $d1, 0D0000000000000000;
	cmp_gt_b1_u32	$c0, $s2, 1;
	xor_b1	$c1, $c0, $c1;
	cvt_u32_b1	$s2, $c1;
	cvt_u32_b1	$s3, $c0;
	mul_f64	$d1, $d2, $d2;
	mul_f64	$d5, $d1, 0D3fe0000000000000;
	sub_f64	$d4, 0D3ff0000000000000, $d5;
	sub_f64	$d6, 0D3ff0000000000000, $d4;
	sub_f64	$d5, $d6, $d5;
	fma_f64	$d5, $d2, $d3, $d5;
	fma_f64	$d6, 0Dbda907db46cc5e42, $d1, 0D3e21eeb69037ab78;
	fma_f64	$d6, $d6, $d1, 0Dbe927e4fa17f65f6;
	fma_f64	$d6, $d6, $d1, 0D3efa01a019f4ec90;
	fma_f64	$d6, $d6, $d1, 0Dbf56c16c16c16967;
	fma_f64	$d6, $d6, $d1, 0D3fa5555555555555;
	fma_f64	$d7, 0D3de5e0b2f9a43bb8, $d1, 0Dbe5ae600b42fdfa7;
	mul_f64	$d8, $d1, $d1;
	fma_f64	$d5, $d6, $d8, $d5;
	fma_f64	$d6, $d7, $d1, 0D3ec71de3796cde01;
	fma_f64	$d6, $d6, $d1, 0Dbf2a01a019e83e5c;
	fma_f64	$d7, $d6, $d1, 0D3f81111111110bb3;
	mul_f64	$d6, $d2, $d1;
	neg_f64	$d6, $d6;
	and_b32	$s0, $s0, 1;
	mul_f64	$d8, $d3, 0D3fe0000000000000;
	add_f64	$d4, $d4, $d5;
	fma_f64	$d5, $d6, $d7, $d8;
	neg_f64	$d3, $d3;
	fma_f64	$d1, $d5, $d1, $d3;
	fma_f64	$d1, $d6, 0Dbfc5555555555555, $d1;
	sub_f64	$d2, $d2, $d1;
	neg_f64	$d1, $d2;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d1, $c0, $d1, $d4;
	cmov_b64	$d2, $c0, $d4, $d2;
	and_b32	$s1, $s1, 1;
	shl_u32	$s4, $s2, 31;
	shl_u32	$s0, $s3, 31;
	cvt_u32_u64	$s2, $d1;
	cvt_u32_u64	$s3, $d2;
	shr_u64	$d2, $d2, 32;
	cvt_u32_u64	$s5, $d2;
	xor_b32	$s4, $s5, $s4;
	cvt_b1_u32	$c0, $s1;
	cmov_b32	$s1, $c0, 2146959360, $s4;
	cmov_b32	$s3, $c0, 0, $s3;
	cmov_b32	$s2, $c0, 0, $s2;
	shr_u64	$d1, $d1, 32;
	cvt_u32_u64	$s4, $d1;
	xor_b32	$s0, $s4, $s0;
	cmov_b32	$s0, $c0, 2146959360, $s0;
	st_v2_align(8)_u32	($s2, $s0), [$d0];
	cvt_u64_u32	$d0, $s3;
	pack_u32x2_u32	$d1, u32x2(0,0), $s1, 1;
	or_b64	$d0, $d0, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_sincos];
	ret;
};


decl function &_gcc_atanh(arg_f64 %ret)(arg_f64 %x);


function &_gcc_atanh(arg_f64 %_gcc_atanh)(arg_f64 %x)
{

@_gcc_atanh_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	abs_f64	$d1, $d0;
	sub_f64	$d2, 0D3ff0000000000000, $d1;
	add_f64	$d3, $d1, $d1;
	div_f64	$d2, $d3, $d2;
	cmp_gt_b1_f64	$c0, $d2, 0D3fb082b577d34ed8;
	cmp_lt_b1_f64	$c1, $d2, 0Dbfaf0540438fd5c3;
	or_b1	$c0, $c1, $c0;
	class_b1_f64	$c1, $d2, 516;
	cvt_u32_b1	$s0, $c1;
	and_b32	$s0, $s0, 1;
	cmp_eq_b1_f64	$c1, $d1, 0D3ff0000000000000;
	cmov_b64	$d3, $c1, 9218868437227405312, 9221120237041090560;
	add_f64	$d4, $d2, 0D3ff0000000000000;
	mov_b64	$d5, $d4;
	shr_s64	$d4, $d5, 45;
	cvt_u32_u64	$s2, $d4;
	and_b32	$s1, $s2, 1;
	bitextract_u32	$s2, $s2, 1, 6;
	or_b32	$s2, $s2, 64;
	add_u32	$s1, $s2, $s1;
	cvt_near_f64_s32	$d6, $s1;
	mul_f64	$d4, $d6, 0D3f90000000000000;
	shr_u64	$d7, $d5, 52;
	cvt_u32_u64	$s2, $d7;
	and_b32	$s3, $s2, 2047;
	sub_u32	$s2, 2046, $s3;
	cvt_u64_u32	$d7, $s2;
	shl_u64	$d7, $d7, 52;
	mov_b64	$d8, $d7;
	sub_f64	$d7, $d8, $d4;
	fma_f64	$d7, $d8, $d2, $d7;
	mul_f64	$d6, $d6, 0Dbf90000000000000;
	fma_f64	$d6, $d8, $d2, $d6;
	add_f64	$d6, $d6, $d8;
	add_u32	$s2, $s3, 4294966273;
	cmp_lt_b1_s32	$c1, $s2, 53;
	cmov_b64	$d6, $c1, $d7, $d6;
	and_b64	$d5, $d5, 4503599627370495;
	or_b64	$d5, $d5, 4607182418800017408;
	sub_f64	$d5, $d5, $d4;
	add_u32	$s3, $s3, 4294966274;
	cmp_gt_b1_u32	$c1, $s3, 61;
	cmov_b64	$d5, $c1, $d5, $d6;
	add_f64	$d6, $d2, 0D4000000000000000;
	div_f64	$d6, $d2, $d6;
	add_f64	$d7, $d6, $d6;
	mul_f64	$d8, $d7, $d7;
	mul_f64	$d7, $d7, $d8;
	fma_f64	$d9, $d8, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	fma_f64	$d9, $d8, $d9, 0D3f89999999bac6d4;
	fma_f64	$d8, $d8, $d9, 0D3fb55555555554e6;
	mul_f64	$d6, $d2, $d6;
	neg_f64	$d6, $d6;
	fma_f64	$d6, $d7, $d8, $d6;
	add_u32	$s1, $s1, 4294967232;
	cvt_s64_s32	$d7, $s1;
	shl_u64	$d8, $d7, 4;
	add_f64	$d6, $d2, $d6;
	ld_v2_readonly_align(16)_f64	($d9, $d7), [&__math64_LN_TBL][$d8];
	cvt_near_f64_s32	$d8, $s2;
	fma_f64	$d4, 0D3fe0000000000000, $d5, $d4;
	div_f64	$d4, $d5, $d4;
	mul_f64	$d10, $d4, $d4;
	fma_f64	$d5, $d10, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d11, $d10, $d5, 0D3fb5555555555557;
	fma_f64	$d5, $d8, 0D3fe62e42e0000000, $d9;
	mul_f64	$d9, $d10, $d11;
	fma_f64	$d4, $d4, $d9, $d4;
	add_f64	$d4, $d7, $d4;
	fma_f64	$d4, $d8, 0D3e6efa39ef35793c, $d4;
	add_f64	$d4, $d5, $d4;
	cmov_b64	$d4, $c0, $d4, $d6;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, $d2, $d4;
	mul_f64	$d4, $d4, 0D3fe0000000000000;
	cmp_lt_b1_f64	$c0, $d2, 0Dbff0000000000000;
	cmov_b64	$d4, $c0, 9221120237041090560, $d4;
	cmp_eq_b1_f64	$c0, $d2, 0Dbff0000000000000;
	cmov_b64	$d2, $c0, 18442240474082181120, $d4;
	cmp_lt_b1_f64	$c0, $d1, 0D3ff0000000000000;
	cmov_b64	$d2, $c0, $d2, $d3;
	neg_f64	$d3, $d2;
	cmp_lt_b1_f64	$c0, $d0, 0D0000000000000000;
	cmov_b64	$d2, $c0, $d3, $d2;
	mul_f64	$d3, $d0, $d0;
	fma_f64	$d4, $d3, 0Dbfa25c7216683eca, 0D3fdfb81b3fe42b33;
	fma_f64	$d4, $d3, $d4, 0Dc002164ca4f0c6f3;
	fma_f64	$d4, $d3, $d4, 0D40122a7720caaa5d;
	fma_f64	$d4, $d3, $d4, 0Dc010a71c2944b0bf;
	fma_f64	$d4, $d3, $d4, 0D3ff6caa89ccefb46;
	fma_f64	$d5, $d3, 0Dbf1b711000f5a53b, 0D3f9d6b0a4cfde8fc;
	fma_f64	$d5, $d3, $d5, 0Dbfd2090bb7302592;
	fma_f64	$d5, $d3, $d5, 0D3fec4f4f6baa48ff;
	fma_f64	$d5, $d3, $d5, 0Dbff1a53706989746;
	fma_f64	$d5, $d3, $d5, 0D3fde638b7bbea45e;
	div_f64	$d4, $d5, $d4;
	mul_f64	$d3, $d3, $d0;
	fma_f64	$d0, $d3, $d4, $d0;
	cmp_lt_b1_f64	$c0, $d1, 0D3fe0000000000000;
	cmov_b64	$d0, $c0, $d0, $d2;
	st_arg_align(8)_f64	$d0, [%_gcc_atanh];
	ret;
};


decl function &_gcc_nextafter(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y);


function &_gcc_nextafter(arg_f64 %_gcc_nextafter)(
	arg_f64 %x,
	arg_f64 %y)
{

@_gcc_nextafter_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%y];
	sub_u64	$d1, 9223372036854775808, $d0;
	cmp_lt_b1_s64	$c0, $d0, 0;
	cmov_b64	$d2, $c0, $d1, $d0;
	ld_arg_align(8)_f64	$d1, [%x];
	sub_u64	$d3, 9223372036854775808, $d1;
	cmp_lt_b1_s64	$c0, $d1, 0;
	cmov_b64	$d3, $c0, $d3, $d1;
	cmp_lt_b1_s64	$c0, $d3, $d2;
	cmov_b64	$d2, $c0, 1, 18446744073709551615;
	add_u64	$d2, $d2, $d3;
	sub_u64	$d3, 9223372036854775808, $d2;
	cmp_lt_b1_s64	$c0, $d2, 0;
	cmov_b64	$d2, $c0, $d3, $d2;
	and_b64	$d3, $d1, 9223372036854775807;
	cmp_gt_b1_u64	$c0, $d3, 9218868437227405312;
	cmov_b64	$d2, $c0, $d1, $d2;
	and_b64	$d3, $d0, 9223372036854775807;
	cmp_gt_b1_u64	$c0, $d3, 9218868437227405312;
	cmov_b64	$d2, $c0, $d0, $d2;
	or_b64	$d3, $d0, $d1;
	and_b64	$d3, $d3, 9223372036854775807;
	cmp_eq_b1_s64	$c0, $d1, $d0;
	cmp_eq_b1_s64	$c1, $d3, 0;
	or_b1	$c0, $c1, $c0;
	cmov_b64	$d0, $c0, $d0, $d2;
	st_arg_align(8)_f64	$d0, [%_gcc_nextafter];
	ret;
};


decl function &_gcc_sqrt(arg_f64 %ret)(arg_f64 %x);


function &_gcc_sqrt(arg_f64 %_gcc_sqrt)(arg_f64 %x)
{

@_gcc_sqrt_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	sqrt_f64	$d0, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_sqrt];
	ret;
};


decl function &_gcc_trunc(arg_f64 %ret)(arg_f64 %x);


function &_gcc_trunc(arg_f64 %_gcc_trunc)(arg_f64 %x)
{

@_gcc_trunc_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	trunc_f64	$d0, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_trunc];
	ret;
};


decl function &_gcc_rsqrt(arg_f64 %ret)(arg_f64 %x);


function &_gcc_rsqrt(arg_f64 %_gcc_rsqrt)(arg_f64 %x)
{

@_gcc_rsqrt_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d1, [%x];
	nrsqrt_f64	$d0, $d1;
	cmp_le_b1_f64	$c0, $d0, 0D7fefffffffffffff;
	cmp_gt_b1_f64	$c1, $d0, 0D0000000000000000;
	and_b1	$c0, $c1, $c0;
	neg_f64	$d1, $d1;
	mul_f64	$d2, $d0, $d1;
	fma_f64	$d2, $d2, $d0, 0D4008000000000000;
	mul_f64	$d3, $d0, 0D3fe0000000000000;
	mul_f64	$d2, $d3, $d2;
	mul_f64	$d1, $d2, $d1;
	fma_f64	$d1, $d1, $d2, 0D4008000000000000;
	mul_f64	$d2, $d2, 0D3fe0000000000000;
	mul_f64	$d1, $d1, $d2;
	cmov_b64	$d0, $c0, $d1, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_rsqrt];
	ret;
};


decl function &_gcc_tan(arg_f64 %ret)(arg_f64 %x);


function &_gcc_tan(arg_f64 %_gcc_tan)(arg_f64 %x)
{

@_gcc_tan_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	abs_f64	$d1, $d0;
	cmp_geu_b1_f64	$c0, $d1, 0D41d0000000000000;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	fma_f64	$d2, $d1, 0D3fe45f306dc9c883, 0D3fe0000000000000;
	trunc_f64	$d2, $d2;
	mul_f64	$d3, $d2, 0D3ff921fb54442d18;
	fma_f64	$d4, 0Dbff921fb54442d18, $d2, $d3;
	mul_f64	$d5, $d2, 0Dbc91a62633145c06;
	add_f64	$d3, $d4, $d5;
	sub_f64	$d4, $d3, $d4;
	sub_f64	$d5, $d5, $d4;
	mul_f64	$d6, $d2, 0Dbff921fb54442d18;
	add_f64	$d4, $d6, $d3;
	sub_f64	$d6, $d4, $d6;
	mul_f64	$d7, $d2, 0Db94c1cd129024e08;
	sub_f64	$d3, $d3, $d6;
	add_f64	$d5, $d7, $d5;
	mul_f64	$d6, $d2, 0D3c91a62633145c06;
	fma_f64	$d6, 0Dbc91a62633145c06, $d2, $d6;
	add_f64	$d5, $d6, $d5;
	mul_f64	$d6, $d2, 0D394c1cd129024e08;
	fma_f64	$d6, 0Db94c1cd129024e08, $d2, $d6;
	add_f64	$d5, $d6, $d5;
	add_f64	$d6, $d3, $d5;
	add_f64	$d1, $d1, $d4;
	cvt_s64_f64	$d2, $d2;
	cvt_u32_u64	$s0, $d2;
	add_f64	$d2, $d1, $d6;
	sub_f64	$d1, $d2, $d1;
	sub_f64	$d1, $d6, $d1;
	sub_f64	$d3, $d6, $d3;
	sub_f64	$d3, $d5, $d3;
	add_f64	$d3, $d3, $d1;
	br	@BB0_3;

@BB0_2:
	mov_b64	$d2, $d1;
	shr_s64	$d2, $d2, 52;
	cvt_u32_u64	$s0, $d2;
	add_u32	$s0, $s0, 4294966273;
	shr_s32	$s0, $s0, 3;
	add_u32	$s0, $s0, 17;
	max_s32	$s5, 23, $s0;
	sub_u32	$s0, 150, $s5;
	bitextract_u32	$s9, $s0, 2, 2;
	cmp_eq_b1_s32	$c0, $s9, 1;
	cmov_b32	$s7, $c0, 4294967295, 0;
	and_b32	$s1, $s0, 4294967280;
	cvt_s64_s32	$d2, $s1;
	ld_v4_readonly_align(16)_u32	($s10, $s11, $s8, $s2), [&__math64_PIBITS][$d2];
	ld_v4_readonly_align(16)_u32	($s1, $s3, $s6, $s4), [&__math64_PIBITS][$d2+16];
	cmp_ne_b1_s32	$c0, $s7, 0;
	cmov_b32	$s13, $c0, $s1, $s2;
	cmov_b32	$s7, $c0, $s4, $s6;
	cmov_b32	$s12, $c0, $s6, $s3;
	cmov_b32	$s15, $c0, $s3, $s1;
	cmov_b32	$s16, $c0, $s2, $s8;
	cmov_b32	$s18, $c0, $s8, $s11;
	cmov_b32	$s19, $c0, $s11, $s10;
	cmp_eq_b1_s32	$c0, $s9, 2;
	cmov_b32	$s17, $c0, 4294967295, 0;
	cmp_eq_b1_s32	$c0, $s9, 3;
	cmov_b32	$s14, $c0, 4294967295, 0;
	ld_v2_readonly_align(16)_u32	($s10, $s11), [&__math64_PIBITS][$d2+32];
	cmp_ne_b1_s32	$c0, $s17, 0;
	cmov_b32	$s17, $c0, $s3, $s13;
	cmov_b32	$s8, $c0, $s8, $s19;
	cmov_b32	$s13, $c0, $s2, $s18;
	cmov_b32	$s16, $c0, $s1, $s16;
	cmov_b32	$s15, $c0, $s6, $s15;
	cmov_b32	$s12, $c0, $s4, $s12;
	cmov_b32	$s18, $c0, $s10, $s7;
	shl_u32	$s5, $s5, 3;
	or_b32	$s7, $s5, 2;
	cmp_gt_b1_s32	$c0, $s7, 1018;
	cmov_b32	$s9, $c0, 136, 0;
	cmov_b64	$d2, $c0, 3994692869477629952, 4607182418800017408;
	cmp_ne_b1_s32	$c0, $s14, 0;
	cmov_b32	$s5, $c0, $s6, $s17;
	cmov_b32	$s11, $c0, $s11, $s18;
	cmov_b32	$s10, $c0, $s10, $s12;
	cmov_b32	$s4, $c0, $s4, $s15;
	cmov_b32	$s6, $c0, $s3, $s16;
	cmov_b32	$s1, $c0, $s1, $s13;
	cmov_b32	$s2, $c0, $s2, $s8;
	bytealign_b32	$s3, $s5, $s4, $s0;
	bytealign_b32	$s4, $s4, $s10, $s0;
	shr_u32	$s12, $s4, 16;
	bytealign_b32	$s8, $s10, $s11, $s0;
	shl_u32	$s10, $s8, 16;
	or_b32	$s10, $s10, $s12;
	cvt_u64_u32	$d3, $s3;
	and_b32	$s4, $s4, 65535;
	sub_u32	$s3, $s9, $s7;
	shl_u32	$s3, $s3, 20;
	add_u32	$s7, $s3, 1227882496;
	or_b32	$s4, $s4, $s7;
	pack_u32x2_u32	$d4, u32x2(0,0), $s4, 1;
	or_b64	$d3, $d3, $d4;
	bytealign_b32	$s4, $s1, $s6, $s0;
	mul_f64	$d1, $d1, $d2;
	cvt_u64_u32	$d2, $s10;
	shr_u32	$s9, $s8, 16;
	add_u32	$s8, $s3, 1278214144;
	or_b32	$s9, $s9, $s8;
	pack_u32x2_u32	$d4, u32x2(0,0), $s9, 1;
	or_b64	$d2, $d2, $d4;
	pack_u32x2_u32	$d4, u32x2(0,0), $s8, 1;
	sub_f64	$d4, $d2, $d4;
	mul_f64	$d7, $d1, $d4;
	mov_b64	$d2, $d3;
	pack_u32x2_u32	$d3, u32x2(0,0), $s7, 1;
	sub_f64	$d2, $d2, $d3;
	mul_f64	$d3, $d1, $d2;
	shr_u32	$s7, $s4, 16;
	bytealign_b32	$s5, $s6, $s5, $s0;
	shl_u32	$s6, $s5, 16;
	add_f64	$d5, $d3, $d7;
	or_b32	$s6, $s6, $s7;
	neg_f64	$d6, $d7;
	fma_f64	$d6, $d4, $d1, $d6;
	sub_f64	$d4, $d5, $d7;
	cvt_u64_u32	$d7, $s6;
	shr_u32	$s6, $s5, 16;
	add_u32	$s5, $s3, 1177550848;
	or_b32	$s6, $s5, $s6;
	pack_u32x2_u32	$d8, u32x2(0,0), $s6, 1;
	sub_f64	$d10, $d3, $d4;
	or_b64	$d4, $d7, $d8;
	add_f64	$d11, $d6, $d10;
	pack_u32x2_u32	$d7, u32x2(0,0), $s5, 1;
	sub_f64	$d7, $d4, $d7;
	mul_f64	$d12, $d1, $d7;
	add_f64	$d4, $d12, $d11;
	mul_f64	$d5, $d5, 0D3f50000000000000;
	fract_f64	$d5, $d5;
	mul_f64	$d5, $d5, 0D4090000000000000;
	add_f64	$d8, $d5, $d4;
	cmp_lt_b1_f64	$c0, $d8, 0D0000000000000000;
	cmov_b64	$d8, $c0, 4652218415073722368, 0;
	add_f64	$d8, $d5, $d8;
	add_f64	$d5, $d4, $d8;
	fract_f64	$d9, $d5;
	sub_f64	$d5, $d5, $d9;
	sub_f64	$d9, $d8, $d5;
	add_f64	$d8, $d4, $d9;
	cmp_ge_b1_f64	$c0, $d8, 0D3fe0000000000000;
	cvt_u32_b1	$s5, $c0;
	bytealign_b32	$s0, $s2, $s1, $s0;
	cvt_u64_u32	$d13, $s0;
	and_b32	$s1, $s4, 65535;
	add_u32	$s0, $s3, 1127219200;
	or_b32	$s1, $s0, $s1;
	pack_u32x2_u32	$d14, u32x2(0,0), $s1, 1;
	or_b64	$d13, $d13, $d14;
	sub_f64	$d14, $d4, $d11;
	sub_f64	$d14, $d12, $d14;
	sub_f64	$d6, $d11, $d6;
	sub_f64	$d10, $d10, $d6;
	neg_f64	$d11, $d3;
	neg_f64	$d6, $d12;
	add_f64	$d3, $d10, $d14;
	fma_f64	$d10, $d2, $d1, $d11;
	mov_b64	$d2, $d13;
	pack_u32x2_u32	$d11, u32x2(0,0), $s0, 1;
	sub_f64	$d2, $d2, $d11;
	mul_f64	$d11, $d1, $d2;
	neg_f64	$d12, $d11;
	fma_f64	$d2, $d2, $d1, $d12;
	fma_f64	$d6, $d7, $d1, $d6;
	add_f64	$d7, $d10, $d3;
	sub_f64	$d1, $d7, $d10;
	sub_f64	$d3, $d3, $d1;
	add_f64	$d1, $d11, $d7;
	sub_f64	$d7, $d1, $d7;
	sub_f64	$d7, $d11, $d7;
	add_f64	$d10, $d3, $d7;
	sub_f64	$d3, $d8, $d9;
	sub_f64	$d7, $d4, $d3;
	add_f64	$d3, $d1, $d7;
	cvt_near_f32_s32	$s0, $s5;
	cvt_ftz_f64_f32	$d4, $s0;
	sub_f64	$d8, $d8, $d4;
	add_f64	$d4, $d3, $d8;
	add_f64	$d6, $d6, $d10;
	add_f64	$d2, $d2, $d6;
	cvt_ftz_near_f32_f64	$s0, $d5;
	cvt_ftz_s32_f32	$s0, $s0;
	mul_f64	$d5, $d4, 0Dbff921fb54442d18;
	fma_f64	$d5, $d4, 0D3ff921fb54442d18, $d5;
	fma_f64	$d5, $d4, 0D3c91a62633145c06, $d5;
	sub_f64	$d6, $d3, $d7;
	sub_f64	$d1, $d1, $d6;
	add_f64	$d1, $d2, $d1;
	sub_f64	$d2, $d4, $d8;
	sub_f64	$d2, $d3, $d2;
	add_f64	$d1, $d1, $d2;
	fma_f64	$d1, $d1, 0D3ff921fb54442d18, $d5;
	mul_f64	$d3, $d4, 0D3ff921fb54442d18;
	add_u32	$s0, $s5, $s0;
	add_f64	$d2, $d1, $d3;
	sub_f64	$d3, $d2, $d3;
	sub_f64	$d3, $d1, $d3;

@BB0_3:
	cmp_gt_b1_f64	$c0, $d2, 0D3fe5c28f5c28f5c3;
	cmov_b64	$d1, $c0, 4607182418800017408, 0;
	cmp_lt_b1_f64	$c1, $d2, 0Dbfe5c28f5c28f5c3;
	or_b1	$c0, $c0, $c1;
	cmov_b64	$d1, $c1, 13830554455654793216, $d1;
	cmp_lt_b1_f64	$c1, $d0, 0D0000000000000000;
	cvt_u32_b1	$s2, $c1;
	class_b1_f64	$c1, $d0, 519;
	cvt_u32_b1	$s1, $c1;
	and_b32	$s1, $s1, 1;
	neg_f64	$d0, $d1;
	fma_f64	$d4, $d0, $d3, 0D3c81a62633145c06;
	fma_f64	$d0, $d0, $d2, 0D3fe921fb54442d18;
	add_f64	$d0, $d0, $d4;
	cmov_b64	$d2, $c0, $d0, $d2;
	cmov_b64	$d0, $c0, 0, $d3;
	mul_f64	$d3, $d0, $d2;
	mul_f64	$d4, $d2, $d2;
	fma_f64	$d3, 0D4000000000000000, $d3, $d4;
	fma_f64	$d4, $d3, 0D3f2d5daf289c385a, 0Dbf977c24c7569abb;
	fma_f64	$d4, $d3, $d4, 0D3fd7d50f6638564a;
	fma_f64	$d5, $d3, 0Dbf2e7517ef6d98f8, 0D3f9ab0f4f80a0acf;
	fma_f64	$d5, $d3, $d5, 0Dbfe08046499eb90f;
	fma_f64	$d5, $d3, $d5, 0D3ff1dfcb8caa40b8;
	div_f64	$d4, $d4, $d5;
	mul_f64	$d3, $d3, $d2;
	fma_f64	$d4, $d4, $d3, $d0;
	add_f64	$d0, $d2, $d4;
	mov_b64	$d3, $d0;
	and_b64	$d3, $d3, 18446744069414584320;
	sub_f64	$d2, $d3, $d2;
	sub_f64	$d4, $d4, $d2;
	div_f64	$d2, 0D3ff0000000000000, $d0;
	neg_f64	$d2, $d2;
	mov_b64	$d5, $d2;
	and_b64	$d5, $d5, 18446744069414584320;
	fma_f64	$d3, $d5, $d3, 0D3ff0000000000000;
	fma_f64	$d3, $d5, $d4, $d3;
	add_f64	$d6, $d0, 0D3ff0000000000000;
	add_f64	$d4, $d0, $d0;
	fma_f64	$d2, $d3, $d2, $d5;
	div_f64	$d3, $d4, $d6;
	add_f64	$d5, $d0, 0Dbff0000000000000;
	div_f64	$d4, $d4, $d5;
	add_f64	$d4, $d4, 0Dbff0000000000000;
	mul_f64	$d4, $d1, $d4;
	cmov_b64	$d2, $c0, $d4, $d2;
	sub_f64	$d3, 0D3ff0000000000000, $d3;
	mul_f64	$d1, $d1, $d3;
	cmov_b64	$d0, $c0, $d1, $d0;
	and_b32	$s0, $s0, 1;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d0, $c0, $d2, $d0;
	shl_u32	$s0, $s2, 31;
	mov_b64	$d1, $d0;
	and_b64	$d0, $d1, 4294967295;
	shr_u64	$d1, $d1, 32;
	cvt_u32_u64	$s2, $d1;
	xor_b32	$s0, $s2, $s0;
	pack_u32x2_u32	$d1, u32x2(0,0), $s0, 1;
	or_b64	$d0, $d0, $d1;
	cvt_b1_u32	$c0, $s1;
	cmov_b64	$d0, $c0, 9221120237041090560, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_tan];
	ret;
};


decl function &_gcc_copysign(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y);


function &_gcc_copysign(arg_f64 %_gcc_copysign)(
	arg_f64 %x,
	arg_f64 %y)
{

@_gcc_copysign_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%y];
	ld_arg_align(8)_f64	$d1, [%x];
	copysign_f64	$d0, $d1, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_copysign];
	ret;
};


decl function &_gcc_sinh(arg_f64 %ret)(arg_f64 %x);


function &_gcc_sinh(arg_f64 %_gcc_sinh)(arg_f64 %x)
{

@_gcc_sinh_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s6, $s0, 1;
	abs_f64	$d1, $d0;
	cmp_lt_b1_f64	$c0, $d1, 0D3e30000000000000;
	cvt_u32_b1	$s7, $c0;
	class_b1_f64	$c0, $d0, 516;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s3, $s0, 1;
	add_f64	$d2, $d1, 0Dbfe62e42fefa3800;
	class_b1_f64	$c0, $d2, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s0, $s0, 1;
	mul_f64	$d3, $d2, 0D40571547652b82fe;
	cvt_s32_f64	$s1, $d3;
	cvt_near_f64_s32	$d3, $s1;
	fma_f64	$d4, 0Dbf862e42fefa0000, $d3, $d2;
	fma_f64	$d3, 0Dbd1cf79abc9e3b39, $d3, $d4;
	fma_f64	$d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111;
	fma_f64	$d4, $d3, $d4, 0D3fa5555555555555;
	fma_f64	$d4, $d3, $d4, 0D3fc5555555555555;
	fma_f64	$d4, $d3, $d4, 0D3fe0000000000000;
	and_b32	$s4, $s1, 63;
	shr_s32	$s2, $s1, 6;
	fma_f64	$d4, $d3, $d4, 0D3ff0000000000000;
	cvt_u64_u32	$d5, $s4;
	mul_f64	$d3, $d3, $d4;
	shl_u64	$d6, $d5, 4;
	ld_v2_readonly_align(16)_f64	($d4, $d5), [&__math64_TWO_TO_JBY64_EP][$d6];
	add_f64	$d6, $d4, $d5;
	fma_f64	$d3, $d6, $d3, $d5;
	add_f64	$d3, $d3, $d4;
	cmp_eq_b1_s32	$c0, $s2, -1022;
	cmp_lt_b1_f64	$c1, $d3, 0D3ff0000000000000;
	and_b1	$c0, $c0, $c1;
	cmp_eq_b1_s32	$c1, $s2, 0;
	cmp_eq_b1_f64	$c2, $d3, 0D0000000000000000;
	or_b1	$c1, $c1, $c2;
	mul_f64	$d4, $d3, 0D4340000000000000;
	mov_b64	$d5, $d4;
	shr_u64	$d4, $d5, 52;
	cvt_u32_u64	$s4, $d4;
	and_b32	$s4, $s4, 2047;
	add_u32	$s4, $s4, 4294967243;
	mov_b64	$d4, $d3;
	shr_u64	$d6, $d4, 52;
	cvt_u32_u64	$s5, $d6;
	and_b32	$s5, $s5, 2047;
	cmp_eq_b1_s32	$c2, $s5, 0;
	cmov_b32	$s8, $c2, $s4, $s5;
	cmov_b64	$d6, $c2, $d5, $d4;
	class_b1_f64	$c2, $d3, 516;
	cvt_u32_b1	$s4, $c2;
	and_b32	$s4, $s4, 1;
	cvt_u32_b1	$s5, $c1;
	cmp_lt_b1_s32	$c1, $s2, -1022;
	or_b1	$c0, $c1, $c0;
	cvt_s32_f64	$s9, $d1;
	min_s32	$s9, $s9, 36;
	cvt_near_f64_s32	$d5, $s9;
	sub_f64	$d8, $d1, $d5;
	mul_f64	$d5, $d8, $d8;
	fma_f64	$d7, $d5, 0D3d6b4125921ea08b, 0D3de611cb2bdcb7be;
	fma_f64	$d7, $d5, $d7, 0D3e5ae6460fbe61c0;
	mov_b64	$d9, $d8;
	and_b64	$d10, $d9, 18446744073575333888;
	fma_f64	$d9, $d5, $d7, 0D3ec71de3a4e13e7d;
	mov_b64	$d7, $d10;
	fma_f64	$d11, $d5, 0D3da9984b7f63fcd7, 0D3e21ee56385b7b20;
	or_b32	$s6, $s6, $s7;
	cvt_s64_s32	$d10, $s9;
	fma_f64	$d11, $d5, $d11, 0D3e927e5069f1cb55;
	sub_f64	$d13, $d8, $d7;
	mul_f64	$d14, $d8, $d5;
	fma_f64	$d8, $d5, $d9, 0D3f2a01a01a01ee80;
	fma_f64	$d15, $d5, $d8, 0D3f811111111110fd;
	shl_u64	$d16, $d10, 4;
	ld_v2_readonly_align(16)_f64	($d8, $d10), [&__math64_SINH_TBL][$d16];
	ld_v2_readonly_align(16)_f64	($d9, $d12), [&__math64_COSH_TBL][$d16];
	or_b32	$s3, $s6, $s3;
	fma_f64	$d15, $d5, $d15, 0D3fc5555555555555;
	mul_f64	$d14, $d14, $d15;
	add_f64	$d13, $d13, $d14;
	mul_f64	$d14, $d13, $d12;
	fma_f64	$d11, $d5, $d11, 0D3efa01a019079011;
	fma_f64	$d11, $d5, $d11, 0D3f56c16c16c212e5;
	fma_f64	$d11, $d5, $d11, 0D3fa5555555555502;
	fma_f64	$d11, $d5, $d11, 0D3fe0000000000000;
	mul_f64	$d5, $d5, $d11;
	fma_f64	$d11, $d10, $d5, $d14;
	fma_f64	$d11, $d12, $d7, $d11;
	add_f64	$d10, $d10, $d11;
	fma_f64	$d10, $d9, $d13, $d10;
	fma_f64	$d5, $d8, $d5, $d10;
	fma_f64	$d5, $d9, $d7, $d5;
	add_f64	$d5, $d8, $d5;
	cmp_ne_b1_s32	$c1, $s3, 0;
	cmov_b64	$d5, $c1, $d1, $d5;
	and_b64	$d6, $d6, 9227875636482146303;
	add_u32	$s3, $s8, $s2;
	max_s32	$s3, $s3, -2047;
	min_s32	$s3, $s3, 2047;
	cvt_u64_u32	$d7, $s3;
	shl_u64	$d7, $d7, 52;
	or_b64	$d7, $d6, $d7;
	add_u32	$s6, $s3, 53;
	cvt_u64_u32	$d8, $s6;
	shl_u64	$d8, $d8, 52;
	or_b64	$d6, $d6, $d8;
	mul_f64	$d6, $d6, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c1, $s3, 0;
	cmov_b64	$d6, $c1, $d7, $d6;
	and_b64	$d4, $d4, 9223372036854775808;
	or_b64	$d7, $d4, 9218868437227405312;
	cmp_eq_b1_s32	$c1, $s3, 2047;
	cmov_b64	$d6, $c1, $d7, $d6;
	cmp_lt_b1_s32	$c1, $s3, -53;
	cmov_b64	$d4, $c1, $d4, $d6;
	or_b32	$s3, $s5, $s4;
	cmp_ne_b1_s32	$c1, $s3, 0;
	cmov_b64	$d4, $c1, $d3, $d4;
	shr_s32	$s1, $s1, 8;
	sub_u32	$s3, 1023, $s1;
	add_u32	$s2, $s3, $s2;
	cvt_u64_u32	$d6, $s2;
	shl_u64	$d6, $d6, 52;
	add_u32	$s1, $s1, 1023;
	cvt_u64_u32	$d7, $s1;
	shl_u64	$d7, $d7, 52;
	mul_f64	$d3, $d7, $d3;
	mul_f64	$d3, $d6, $d3;
	cmov_b64	$d3, $c0, $d3, $d4;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d3, $c0, $d2, $d3;
	cmp_gt_b1_f64	$c0, $d2, 0D40862e42fefa39ef;
	cmov_b64	$d3, $c0, 9218868437227405312, $d3;
	cmp_lt_b1_f64	$c0, $d2, 0Dc0874910d52d3051;
	cmov_b64	$d2, $c0, 0, $d3;
	fma_f64	$d2, $d2, 0Dbd2ef35793c76641, $d2;
	cmp_ge_b1_f64	$c0, $d1, 0D4032b708872320e2;
	cmov_b64	$d2, $c0, $d2, $d5;
	cmp_ge_b1_f64	$c0, $d1, 0D408633ce8fb9f87e;
	cmov_b64	$d1, $c0, 9218868437227405312, $d2;
	copysign_f64	$d0, $d1, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_sinh];
	ret;
};


decl function &_gcc_tanh(arg_f64 %ret)(arg_f64 %x);


function &_gcc_tanh(arg_f64 %_gcc_tanh)(arg_f64 %x)
{

@_gcc_tanh_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d2, [%x];
	mov_b64	$d0, $d2;
	and_b64	$d1, $d0, 9223372036854775807;
	mov_b64	$d3, $d1;
	mul_f64	$d4, $d3, $d3;
	fma_f64	$d5, $d4, 0Dbe4e82d10d09af81, 0Dbf2a387bfaf479c9;
	fma_f64	$d5, $d4, $d5, 0Dbf920629b90302ae;
	fma_f64	$d6, $d4, 0Dbe48cc5a847e6cec, 0Dbf25b483c69835dd;
	fma_f64	$d6, $d4, $d6, 0Dbf8defad6e212118;
	fma_f64	$d8, $d4, 0D3f26af77f334e750, 0D3f912335baec487f;
	fma_f64	$d6, $d4, $d6, 0Dbfcd28597c5ae288;
	fma_f64	$d7, $d4, $d5, 0Dbfd189b6e8007758;
	fma_f64	$d5, $d4, $d8, 0D3fd44d1459bcc5f6;
	fma_f64	$d5, $d4, $d5, 0D3fe5de431d442afd;
	fma_f64	$d8, $d4, 0D3f2b68b3cecad284, 0D3f94a3d4cc7a88a9;
	fma_f64	$d8, $d4, $d8, 0D3fd86cd01c4ab94c;
	fma_f64	$d8, $d4, $d8, 0D3fea4e925c00b304;
	cmp_lt_b1_f64	$c0, $d3, 0D3feccccccccccccd;
	cmov_b64	$d5, $c0, $d8, $d5;
	cmov_b64	$d6, $c0, $d7, $d6;
	add_f64	$d7, $d3, $d3;
	class_b1_f64	$c0, $d7, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s0, $s0, 1;
	cmp_gt_b1_u64	$c0, $d1, 9218868437227405312;
	cmp_lt_b1_f64	$c1, $d3, 0D3e30000000000000;
	or_b1	$c0, $c1, $c0;
	mul_f64	$d8, $d7, 0D40571547652b82fe;
	cvt_s32_f64	$s1, $d8;
	cvt_near_f64_s32	$d8, $s1;
	fma_f64	$d9, 0Dbf862e42fefa0000, $d8, $d7;
	fma_f64	$d8, 0Dbd1cf79abc9e3b39, $d8, $d9;
	fma_f64	$d9, $d8, 0D3f56c16c16c16c17, 0D3f81111111111111;
	fma_f64	$d9, $d8, $d9, 0D3fa5555555555555;
	fma_f64	$d9, $d8, $d9, 0D3fc5555555555555;
	fma_f64	$d9, $d8, $d9, 0D3fe0000000000000;
	and_b32	$s2, $s1, 63;
	fma_f64	$d9, $d8, $d9, 0D3ff0000000000000;
	cvt_u64_u32	$d10, $s2;
	mul_f64	$d8, $d8, $d9;
	shl_u64	$d11, $d10, 4;
	ld_v2_readonly_align(16)_f64	($d9, $d10), [&__math64_TWO_TO_JBY64_EP][$d11];
	add_f64	$d11, $d9, $d10;
	fma_f64	$d8, $d11, $d8, $d10;
	add_f64	$d8, $d8, $d9;
	mul_f64	$d9, $d8, 0D4340000000000000;
	mov_b64	$d10, $d9;
	shr_u64	$d9, $d10, 52;
	cvt_u32_u64	$s2, $d9;
	and_b32	$s2, $s2, 2047;
	add_u32	$s2, $s2, 4294967243;
	mov_b64	$d9, $d8;
	shr_u64	$d11, $d9, 52;
	cvt_u32_u64	$s3, $d11;
	and_b32	$s3, $s3, 2047;
	cmp_eq_b1_s32	$c1, $s3, 0;
	cmov_b32	$s5, $c1, $s2, $s3;
	cmov_b64	$d10, $c1, $d10, $d9;
	shr_s32	$s2, $s1, 6;
	cmp_eq_b1_s32	$c1, $s2, -1022;
	cmp_lt_b1_f64	$c2, $d8, 0D3ff0000000000000;
	and_b1	$c1, $c1, $c2;
	cmp_eq_b1_s32	$c2, $s2, 0;
	cmp_eq_b1_f64	$c3, $d8, 0D0000000000000000;
	or_b1	$c2, $c2, $c3;
	class_b1_f64	$c3, $d8, 516;
	cvt_u32_b1	$s3, $c3;
	and_b32	$s3, $s3, 1;
	cvt_u32_b1	$s4, $c2;
	cmp_lt_b1_s32	$c2, $s2, -1022;
	or_b1	$c1, $c2, $c1;
	and_b64	$d10, $d10, 9227875636482146303;
	add_u32	$s5, $s5, $s2;
	max_s32	$s5, $s5, -2047;
	min_s32	$s5, $s5, 2047;
	cvt_u64_u32	$d11, $s5;
	shl_u64	$d11, $d11, 52;
	or_b64	$d11, $d10, $d11;
	add_u32	$s6, $s5, 53;
	cvt_u64_u32	$d12, $s6;
	shl_u64	$d12, $d12, 52;
	or_b64	$d10, $d10, $d12;
	mul_f64	$d10, $d10, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c2, $s5, 0;
	cmov_b64	$d10, $c2, $d11, $d10;
	and_b64	$d9, $d9, 9223372036854775808;
	or_b64	$d11, $d9, 9218868437227405312;
	cmp_eq_b1_s32	$c2, $s5, 2047;
	cmov_b64	$d10, $c2, $d11, $d10;
	cmp_lt_b1_s32	$c2, $s5, -53;
	cmov_b64	$d9, $c2, $d9, $d10;
	or_b32	$s3, $s4, $s3;
	cmp_ne_b1_s32	$c2, $s3, 0;
	cmov_b64	$d9, $c2, $d8, $d9;
	shr_s32	$s1, $s1, 8;
	sub_u32	$s3, 1023, $s1;
	add_u32	$s2, $s3, $s2;
	cvt_u64_u32	$d10, $s2;
	shl_u64	$d10, $d10, 52;
	add_u32	$s1, $s1, 1023;
	cvt_u64_u32	$d11, $s1;
	shl_u64	$d11, $d11, 52;
	mul_f64	$d8, $d11, $d8;
	mul_f64	$d8, $d10, $d8;
	cmov_b64	$d8, $c1, $d8, $d9;
	cvt_b1_u32	$c1, $s0;
	cmov_b64	$d8, $c1, $d7, $d8;
	cmp_gt_b1_f64	$c1, $d7, 0D40862e42fefa39ef;
	cmov_b64	$d8, $c1, 9218868437227405312, $d8;
	cmp_lt_b1_f64	$c1, $d7, 0Dc0874910d52d3051;
	cmov_b64	$d7, $c1, 0, $d8;
	div_f64	$d5, $d6, $d5;
	mul_f64	$d4, $d3, $d4;
	mul_f64	$d4, $d4, $d5;
	add_f64	$d4, $d4, $d3;
	add_f64	$d5, $d7, 0D3ff0000000000000;
	div_f64	$d5, 0Dc000000000000000, $d5;
	add_f64	$d5, $d5, 0D3ff0000000000000;
	cmp_gt_b1_f64	$c1, $d3, 0D3ff0000000000000;
	cmov_b64	$d4, $c1, $d5, $d4;
	cmov_b64	$d2, $c0, $d2, $d4;
	cmp_gt_b1_f64	$c0, $d3, 0D4032b708872320e2;
	cmov_b64	$d2, $c0, 4607182418800017408, $d2;
	xor_b64	$d0, $d1, $d0;
	or_b64	$d0, $d2, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_tanh];
	ret;
};


decl function &_gcc_acosh(arg_f64 %ret)(arg_f64 %x);


function &_gcc_acosh(arg_f64 %_gcc_acosh)(arg_f64 %x)
{

@_gcc_acosh_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	fma_f64	$d1, $d0, $d0, 0Dbff0000000000000;
	sqrt_f64	$d1, $d1;
	add_f64	$d1, $d1, $d0;
	cmp_gt_b1_f64	$c1, $d0, 0D4196a09e667f3bcd;
	cmov_b64	$d1, $c1, $d0, $d1;
	cmp_le_b1_f64	$c0, $d1, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c2, $d1, 0D3fee0faa00000000;
	and_b1	$c0, $c2, $c0;
	cvt_u32_b1	$s1, $c1;
	cmp_lt_b1_f64	$c1, $d0, 0D3ff0000000000000;
	cvt_u32_b1	$s0, $c1;
	mov_b64	$d2, $d1;
	or_b64	$d3, $d2, 274719577269600256;
	add_f64	$d3, $d3, 0D83d0000000000000;
	cmp_lt_b1_u64	$c1, $d2, 4503599627370496;
	cmov_b32	$s2, $c1, 4294966213, 4294966273;
	cmov_b64	$d2, $c1, $d3, $d2;
	shr_u64	$d3, $d2, 52;
	shr_u64	$d4, $d2, 32;
	add_f64	$d6, $d1, 0Dbff0000000000000;
	cvt_u32_u64	$s4, $d4;
	cvt_u32_u64	$s3, $d3;
	and_b64	$d1, $d2, 4503599627370495;
	or_b64	$d1, $d1, 4602678819172646912;
	add_f64	$d2, $d6, 0D4000000000000000;
	div_f64	$d2, $d6, $d2;
	neg_f64	$d3, $d6;
	and_b32	$s3, $s3, 2047;
	bitextract_u32	$s5, $s4, 13, 1;
	shr_s32	$s4, $s4, 13;
	bitextract_u32	$s4, $s4, 1, 6;
	add_f64	$d5, $d2, $d2;
	or_b32	$s4, $s4, 64;
	add_u32	$s4, $s4, $s5;
	add_u32	$s5, $s4, 4294967232;
	cvt_s64_s32	$d4, $s5;
	shl_u64	$d8, $d4, 4;
	ld_v2_readonly_align(16)_f64	($d7, $d4), [&__math64_LN_TBL][$d8];
	add_u32	$s2, $s2, $s3;
	mul_f64	$d8, $d2, $d3;
	cvt_near_f64_s32	$d2, $s4;
	mul_f64	$d2, $d2, 0D3f80000000000000;
	sub_f64	$d1, $d1, $d2;
	fma_f64	$d2, 0D3fe0000000000000, $d1, $d2;
	div_f64	$d9, $d1, $d2;
	cmov_b64	$d1, $c0, $d5, $d9;
	mul_f64	$d2, $d1, $d1;
	fma_f64	$d3, $d2, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d3, $d2, $d3, 0D3fb5555555555557;
	fma_f64	$d5, $d2, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	fma_f64	$d5, $d2, $d5, 0D3f89999999bac6d4;
	fma_f64	$d5, $d2, $d5, 0D3fb55555555554e6;
	cmov_b64	$d3, $c0, $d5, $d3;
	cmov_b64	$d5, $c0, $d8, $d9;
	cmov_b64	$d4, $c0, 0, $d4;
	cmov_b64	$d6, $c0, $d6, $d7;
	cmov_b32	$s2, $c0, 0, $s2;
	add_f64	$d7, $d0, 0Dbff0000000000000;
	mul_f64	$d8, $d7, $d7;
	neg_f64	$d9, $d8;
	fma_f64	$d10, $d7, $d7, $d9;
	add_f64	$d11, $d7, $d7;
	add_f64	$d9, $d11, $d8;
	sub_f64	$d11, $d11, $d9;
	add_f64	$d8, $d8, $d11;
	add_f64	$d10, $d8, $d10;
	add_f64	$d11, $d9, $d10;
	sqrt_f64	$d8, $d11;
	mul_f64	$d13, $d8, $d8;
	sub_f64	$d12, $d11, $d13;
	neg_f64	$d13, $d13;
	fma_f64	$d13, $d8, $d8, $d13;
	sub_f64	$d12, $d12, $d13;
	sub_f64	$d9, $d9, $d11;
	add_f64	$d9, $d10, $d9;
	add_f64	$d9, $d12, $d9;
	mul_f64	$d9, $d9, 0D3fe0000000000000;
	div_f64	$d10, $d9, $d8;
	add_f64	$d9, $d8, $d10;
	sub_f64	$d8, $d8, $d9;
	add_f64	$d8, $d10, $d8;
	add_f64	$d10, $d7, $d9;
	sub_f64	$d9, $d9, $d10;
	add_f64	$d7, $d7, $d9;
	add_f64	$d7, $d8, $d7;
	add_f64	$d7, $d10, $d7;
	cmp_gt_b1_f64	$c0, $d7, 0D3fb082b577d34ed8;
	cmp_lt_b1_f64	$c1, $d7, 0Dbfaf0540438fd5c3;
	or_b1	$c0, $c1, $c0;
	class_b1_f64	$c1, $d7, 516;
	cvt_u32_b1	$s3, $c1;
	and_b32	$s3, $s3, 1;
	add_f64	$d8, $d7, 0D3ff0000000000000;
	mov_b64	$d9, $d8;
	shr_u64	$d8, $d9, 32;
	cvt_u32_u64	$s5, $d8;
	bitextract_u32	$s4, $s5, 13, 1;
	shr_s32	$s5, $s5, 13;
	bitextract_u32	$s5, $s5, 1, 6;
	or_b32	$s5, $s5, 64;
	add_u32	$s4, $s5, $s4;
	cvt_near_f64_s32	$d10, $s4;
	shr_u64	$d11, $d9, 52;
	mul_f64	$d8, $d10, 0D3f90000000000000;
	cvt_u32_u64	$s5, $d11;
	and_b32	$s6, $s5, 2047;
	sub_u32	$s5, 2046, $s6;
	cvt_u64_u32	$d11, $s5;
	shl_u64	$d11, $d11, 52;
	mov_b64	$d12, $d11;
	sub_f64	$d11, $d12, $d8;
	fma_f64	$d11, $d12, $d7, $d11;
	mul_f64	$d10, $d10, 0Dbf90000000000000;
	fma_f64	$d10, $d12, $d7, $d10;
	add_f64	$d10, $d10, $d12;
	add_u32	$s5, $s6, 4294966273;
	cmp_lt_b1_s32	$c1, $s5, 53;
	cmov_b64	$d10, $c1, $d11, $d10;
	and_b64	$d9, $d9, 4503599627370495;
	or_b64	$d9, $d9, 4607182418800017408;
	sub_f64	$d9, $d9, $d8;
	add_u32	$s6, $s6, 4294966274;
	cmp_gt_b1_u32	$c1, $s6, 61;
	cmov_b64	$d9, $c1, $d9, $d10;
	add_f64	$d10, $d7, 0D4000000000000000;
	div_f64	$d10, $d7, $d10;
	add_f64	$d11, $d10, $d10;
	mul_f64	$d12, $d11, $d11;
	mul_f64	$d11, $d11, $d12;
	fma_f64	$d13, $d12, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	fma_f64	$d13, $d12, $d13, 0D3f89999999bac6d4;
	fma_f64	$d12, $d12, $d13, 0D3fb55555555554e6;
	mul_f64	$d10, $d7, $d10;
	neg_f64	$d10, $d10;
	fma_f64	$d10, $d11, $d12, $d10;
	add_u32	$s4, $s4, 4294967232;
	cvt_s64_s32	$d11, $s4;
	shl_u64	$d12, $d11, 4;
	add_f64	$d10, $d7, $d10;
	ld_v2_readonly_align(16)_f64	($d13, $d11), [&__math64_LN_TBL][$d12];
	cvt_near_f64_s32	$d12, $s5;
	fma_f64	$d8, 0D3fe0000000000000, $d9, $d8;
	div_f64	$d8, $d9, $d8;
	mul_f64	$d14, $d8, $d8;
	fma_f64	$d9, $d14, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d15, $d14, $d9, 0D3fb5555555555557;
	fma_f64	$d9, $d12, 0D3fe62e42e0000000, $d13;
	mul_f64	$d13, $d14, $d15;
	fma_f64	$d8, $d8, $d13, $d8;
	add_f64	$d8, $d11, $d8;
	fma_f64	$d8, $d12, 0D3e6efa39ef35793c, $d8;
	add_f64	$d8, $d9, $d8;
	cmov_b64	$d8, $c0, $d8, $d10;
	cvt_b1_u32	$c0, $s3;
	cmov_b64	$d8, $c0, $d7, $d8;
	cmp_lt_b1_f64	$c0, $d7, 0Dbff0000000000000;
	cmov_b64	$d8, $c0, 9221120237041090560, $d8;
	cmp_eq_b1_f64	$c0, $d7, 0Dbff0000000000000;
	cmov_b64	$d7, $c0, 18442240474082181120, $d8;
	add_u32	$s1, $s2, $s1;
	cvt_near_f64_s32	$d8, $s1;
	mul_f64	$d1, $d1, $d2;
	fma_f64	$d2, $d1, $d3, $d5;
	fma_f64	$d1, $d8, 0D3fe62e42e0000000, $d6;
	add_f64	$d2, $d4, $d2;
	fma_f64	$d2, $d8, 0D3e6efa39ef35793c, $d2;
	add_f64	$d1, $d1, $d2;
	cmp_ge_b1_f64	$c0, $d0, 0D4060000000000000;
	cmov_b64	$d2, $c0, $d1, $d7;
	mov_b64	$d1, $d0;
	cmp_gt_b1_u64	$c0, $d1, 9218868437227405311;
	cmov_b64	$d2, $c0, $d0, $d2;
	cmp_eq_b1_f64	$c0, $d0, 0D3ff0000000000000;
	cmov_b64	$d0, $c0, 0, $d2;
	shr_u64	$d1, $d1, 63;
	cvt_u32_u64	$s1, $d1;
	or_b32	$s0, $s1, $s0;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d0, $c0, 9221120237041090560, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_acosh];
	ret;
};


decl function &_gcc_remainder(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y);


function &_gcc_remainder(arg_f64 %_gcc_remainder)(
	arg_f64 %x,
	arg_f64 %y)
{

@_gcc_remainder_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%y];
	mov_b64	$d3, $d0;
	cvt_u32_u64	$s0, $d3;
	firstbit_u32_u32	$s1, $s0;
	add_u32	$s1, $s1, 32;
	cmp_eq_b1_s32	$c0, $s0, 0;
	cmov_b32	$s0, $c0, 64, $s1;
	ld_arg_align(8)_f64	$d1, [%x];
	mov_b64	$d4, $d1;
	cvt_u32_u64	$s1, $d4;
	firstbit_u32_u32	$s2, $s1;
	add_u32	$s2, $s2, 32;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b32	$s1, $c0, 64, $s2;
	shr_u64	$d2, $d4, 32;
	cvt_u32_u64	$s2, $d2;
	and_b32	$s2, $s2, 1048575;
	firstbit_u32_u32	$s3, $s2;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmov_b32	$s1, $c0, $s1, $s3;
	shr_u64	$d2, $d3, 32;
	cvt_u32_u64	$s2, $d2;
	and_b32	$s2, $s2, 1048575;
	firstbit_u32_u32	$s3, $s2;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmov_b32	$s0, $c0, $s0, $s3;
	sub_u32	$s2, 11, $s0;
	and_b64	$d6, $d3, 9223372036854775807;
	shr_u64	$d2, $d6, 52;
	cvt_u32_u64	$s0, $d2;
	cmp_eq_b1_s32	$c0, $s0, 0;
	cmov_b32	$s2, $c0, $s2, $s0;
	sub_u32	$s3, 11, $s1;
	and_b64	$d5, $d4, 9223372036854775807;
	shr_u64	$d2, $d5, 52;
	cvt_u32_u64	$s1, $d2;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b32	$s3, $c0, $s3, $s1;
	shr_u64	$d8, $d3, 52;
	mov_b64	$d2, $d6;
	mul_f64	$d7, $d2, 0D4340000000000000;
	shr_u64	$d9, $d7, 52;
	cvt_u32_u64	$s4, $d9;
	and_b32	$s4, $s4, 2047;
	add_u32	$s4, $s4, 4294967243;
	cvt_u32_u64	$s5, $d8;
	and_b32	$s5, $s5, 2047;
	cmp_eq_b1_s32	$c0, $s5, 0;
	cmov_b32	$s6, $c0, $s4, $s5;
	cmov_b64	$d6, $c0, $d7, $d6;
	class_b1_f64	$c0, $d2, 516;
	cvt_u32_b1	$s4, $c0;
	and_b32	$s5, $s4, 1;
	sub_u32	$s2, $s3, $s2;
	cvt_s64_s32	$d7, $s2;
	mul_u64	$d7, $d7, 1296593901;
	shr_u64	$d8, $d7, 63;
	cvt_u32_u64	$s2, $d8;
	shr_u64	$d7, $d7, 32;
	cvt_u32_u64	$s3, $d7;
	shr_s32	$s3, $s3, 4;
	add_u32	$s2, $s3, $s2;
	max_s32	$s2, 0, $s2;
	mul_u32	$s3, $s2, 53;
	shr_s32	$s4, $s3, 1;
	cmp_eq_b1_f64	$c0, $d2, 0D0000000000000000;
	cmp_eq_b1_s32	$c1, $s4, 0;
	or_b1	$c1, $c1, $c0;
	cvt_u32_b1	$s7, $c1;
	and_b64	$d6, $d6, 9227875636482146303;
	add_u32	$s6, $s4, $s6;
	max_s32	$s6, $s6, -2047;
	min_s32	$s6, $s6, 2047;
	cvt_u64_u32	$d7, $s6;
	shl_u64	$d7, $d7, 52;
	or_b64	$d7, $d7, $d6;
	add_u32	$s8, $s6, 53;
	cvt_u64_u32	$d8, $s8;
	shl_u64	$d8, $d8, 52;
	or_b64	$d6, $d8, $d6;
	mul_f64	$d6, $d6, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c1, $s6, 0;
	cmov_b64	$d6, $c1, $d7, $d6;
	cmp_eq_b1_s32	$c1, $s6, 2047;
	cmov_b64	$d6, $c1, 9218868437227405312, $d6;
	cmp_lt_b1_s32	$c1, $s6, -53;
	cmov_b64	$d6, $c1, 0, $d6;
	or_b32	$s5, $s7, $s5;
	cmp_ne_b1_s32	$c1, $s5, 0;
	cmov_b64	$d6, $c1, $d2, $d6;
	mul_f64	$d7, $d6, 0D4340000000000000;
	mov_b64	$d8, $d7;
	shr_u64	$d7, $d8, 52;
	cvt_u32_u64	$s5, $d7;
	and_b32	$s5, $s5, 2047;
	add_u32	$s5, $s5, 4294967243;
	mov_b64	$d7, $d6;
	shr_u64	$d9, $d7, 52;
	cvt_u32_u64	$s6, $d9;
	and_b32	$s6, $s6, 2047;
	cmp_eq_b1_s32	$c1, $s6, 0;
	cmov_b32	$s7, $c1, $s5, $s6;
	cmov_b64	$d8, $c1, $d8, $d7;
	cmp_eq_b1_s32	$c1, $s3, $s4;
	cmp_eq_b1_f64	$c2, $d6, 0D0000000000000000;
	or_b1	$c1, $c1, $c2;
	class_b1_f64	$c2, $d6, 516;
	cvt_u32_b1	$s5, $c2;
	and_b32	$s5, $s5, 1;
	cvt_u32_b1	$s6, $c1;
	sub_u32	$s3, $s3, $s4;
	and_b64	$d8, $d8, 9227875636482146303;
	add_u32	$s3, $s3, $s7;
	max_s32	$s3, $s3, -2047;
	min_s32	$s3, $s3, 2047;
	cvt_u64_u32	$d9, $s3;
	shl_u64	$d9, $d9, 52;
	or_b64	$d9, $d8, $d9;
	add_u32	$s4, $s3, 53;
	cvt_u64_u32	$d10, $s4;
	shl_u64	$d10, $d10, 52;
	or_b64	$d8, $d8, $d10;
	mul_f64	$d8, $d8, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c1, $s3, 0;
	cmov_b64	$d8, $c1, $d9, $d8;
	and_b64	$d7, $d7, 9223372036854775808;
	or_b64	$d9, $d7, 9218868437227405312;
	cmp_eq_b1_s32	$c1, $s3, 2047;
	cmov_b64	$d8, $c1, $d9, $d8;
	cmp_lt_b1_s32	$c1, $s3, -53;
	cmov_b64	$d7, $c1, $d7, $d8;
	or_b32	$s3, $s6, $s5;
	cmp_ne_b1_s32	$c1, $s3, 0;
	cmov_b64	$d6, $c1, $d6, $d7;
	cmp_eq_b1_s32	$c1, $s2, 0;
	cmov_b64	$d7, $c1, $d2, $d6;
	mov_b64	$d6, $d5;
	div_f64	$d8, $d6, $d7;
	cmp_ge_b1_s32	$c2, $s2, 1;
	cbr_b1	$c2, @BB0_2;
	br	@BB0_1;

@BB0_2:
	cmov_b64	$d10, $c1, 4607182418800017408, 4368491638549381120;
	mov_b64	$d9, $d6;

@BB0_3:
	// %.lr.ph
	trunc_f64	$d8, $d8;
	mul_f64	$d12, $d7, $d8;
	sub_f64	$d11, $d9, $d12;
	sub_f64	$d9, $d9, $d11;
	sub_f64	$d9, $d9, $d12;
	neg_f64	$d12, $d12;
	fma_f64	$d8, $d7, $d8, $d12;
	sub_f64	$d8, $d9, $d8;
	add_f64	$d8, $d11, $d8;
	cmp_lt_b1_f64	$c1, $d8, 0D0000000000000000;
	cmov_b64	$d9, $c1, $d7, 0;
	mul_f64	$d7, $d10, $d7;
	add_u32	$s2, $s2, 4294967295;
	add_f64	$d9, $d8, $d9;
	div_f64	$d8, $d9, $d7;
	cmp_ne_b1_s32	$c1, $s2, 0;
	cbr_b1	$c1, @BB0_3;
	br	@BB0_4;

@BB0_1:
	mov_b64	$d9, $d6;

@BB0_4:
	// %._crit_edge
	xor_b64	$d10, $d3, $d4;
	xor_b64	$d3, $d5, $d4;
	add_f64	$d4, $d6, $d6;
	cmp_gt_b1_f64	$c1, $d4, $d2;
	cmp_lt_b1_u32	$c2, $s0, 1023;
	and_b1	$c1, $c2, $c1;
	mul_f64	$d4, $d2, 0D3fe0000000000000;
	cmp_gt_b1_f64	$c2, $d6, $d4;
	or_b1	$c1, $c1, $c2;
	cmp_num_b1_f64	$c2, $d0, $d0;
	cmov_b64	$d4, $c2, $d1, $d0;
	cmp_gt_b1_s64	$c2, $d10, -1;
	cmov_b64	$d5, $c2, 13830554455654793216, 4607182418800017408;
	floor_f64	$d10, $d8;
	mul_f64	$d11, $d7, $d10;
	sub_f64	$d8, $d9, $d11;
	sub_f64	$d9, $d9, $d8;
	sub_f64	$d9, $d9, $d11;
	neg_f64	$d11, $d11;
	fma_f64	$d11, $d7, $d10, $d11;
	sub_f64	$d9, $d9, $d11;
	add_f64	$d8, $d8, $d9;
	mul_f64	$d9, $d7, 0D3fe0000000000000;
	cmp_lt_b1_f64	$c2, $d8, 0D0000000000000000;
	cmov_b64	$d11, $c2, $d7, 0;
	add_f64	$d8, $d8, $d11;
	cmp_gt_b1_f64	$c3, $d8, $d9;
	cvt_u32_b1	$s3, $c3;
	cmp_eq_b1_f64	$c3, $d8, $d9;
	cvt_u32_b1	$s4, $c3;
	cvt_u32_b1	$s2, $c2;
	cvt_s64_f64	$d9, $d10;
	cvt_u32_u64	$s5, $d9;
	and_b32	$s5, $s5, 1;
	xor_b32	$s2, $s2, $s5;
	and_b32	$s4, $s4, $s2;
	or_b32	$s3, $s4, $s3;
	cmp_ne_b1_s32	$c2, $s3, 0;
	cmov_b64	$d9, $c2, $d7, 0;
	add_f64	$d10, $d8, $d8;
	cmp_gt_b1_f64	$c2, $d10, $d7;
	cvt_u32_b1	$s3, $c2;
	cmp_eq_b1_f64	$c2, $d10, $d7;
	cvt_u32_b1	$s4, $c2;
	and_b32	$s2, $s4, $s2;
	or_b32	$s2, $s2, $s3;
	cmp_ne_b1_s32	$c2, $s2, 0;
	cmov_b64	$d7, $c2, $d7, 0;
	cmp_lt_b1_f64	$c2, $d2, 0D7fd0000000000000;
	cmov_b64	$d7, $c2, $d7, $d9;
	sub_f64	$d7, $d8, $d7;
	cmp_eq_b1_f64	$c2, $d6, $d2;
	cmov_b64	$d7, $c2, 0, $d7;
	cmp_lt_b1_f64	$c2, $d6, $d2;
	and_b1	$c1, $c2, $c1;
	xor_b64	$d2, $d3, $d7;
	cmov_b64	$d2, $c2, $d1, $d2;
	fma_f64	$d0, $d0, $d5, $d1;
	cmov_b64	$d0, $c1, $d0, $d2;
	cmov_b64	$d0, $c0, 9221120237041090560, $d0;
	cmp_eq_b1_s32	$c0, $s0, 2047;
	cmov_b64	$d0, $c0, $d4, $d0;
	cmp_eq_b1_s32	$c0, $s1, 2047;
	cmov_b64	$d0, $c0, 9221120237041090560, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_remainder];
	ret;
};


decl function &_gcc_hypot(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y);


function &_gcc_hypot(arg_f64 %_gcc_hypot)(
	arg_f64 %x,
	arg_f64 %y)
{

@_gcc_hypot_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%y];
	and_b64	$d2, $d0, 9223372036854775807;
	mov_b64	$d0, $d2;
	ld_arg_align(8)_f64	$d1, [%x];
	and_b64	$d3, $d1, 9223372036854775807;
	mov_b64	$d1, $d3;
	class_b1_f64	$c0, $d1, 3;
	cvt_u32_b1	$s0, $c0;
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s1, $c0;
	or_b32	$s0, $s1, $s0;
	shr_u64	$d2, $d2, 52;
	cvt_u32_u64	$s1, $d2;
	shr_u64	$d2, $d3, 52;
	cvt_u32_u64	$s2, $d2;
	cmp_lt_b1_u32	$c0, $s2, 523;
	cmp_lt_b1_u32	$c1, $s1, 523;
	or_b1	$c0, $c1, $c0;
	cmp_gt_b1_u32	$c1, $s2, 1523;
	cmp_gt_b1_u32	$c2, $s1, 1523;
	or_b1	$c1, $c2, $c1;
	cmov_b64	$d2, $c1, 7309342195222315008, 4607182418800017408;
	cmov_b64	$d3, $c1, 1905022642377719808, 4607182418800017408;
	cmov_b64	$d3, $c0, 7309342195222315008, $d3;
	cmov_b64	$d2, $c0, 1905022642377719808, $d2;
	cmp_eq_b1_f64	$c0, $d0, 0D7ff0000000000000;
	cmp_eq_b1_f64	$c1, $d1, 0D7ff0000000000000;
	or_b1	$c0, $c1, $c0;
	mul_f64	$d4, $d1, $d3;
	mul_f64	$d3, $d0, $d3;
	mul_f64	$d3, $d3, $d3;
	add_f64	$d0, $d1, $d0;
	fma_f64	$d1, $d4, $d4, $d3;
	sub_u32	$s1, $s2, $s1;
	sqrt_f64	$d1, $d1;
	abs_s32	$s1, $s1;
	mul_f64	$d1, $d2, $d1;
	cmp_gt_b1_u32	$c1, $s1, 54;
	cmov_b64	$d0, $c1, $d0, $d1;
	and_b32	$s0, $s0, 1;
	cvt_b1_u32	$c1, $s0;
	cmov_b64	$d0, $c1, 9221120237041090560, $d0;
	cmov_b64	$d0, $c0, 9218868437227405312, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_hypot];
	ret;
};


decl function &_gcc_atan2pi(arg_f64 %ret)(
	arg_f64 %y,
	arg_f64 %x);


function &_gcc_atan2pi(arg_f64 %_gcc_atan2pi)(
	arg_f64 %y,
	arg_f64 %x)
{

@_gcc_atan2pi_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	mul_f64	$d1, $d0, 0D4340000000000000;
	shr_u64	$d2, $d1, 52;
	cvt_u32_u64	$s0, $d2;
	and_b32	$s0, $s0, 2047;
	add_u32	$s0, $s0, 4294967243;
	mov_b64	$d2, $d0;
	shr_u64	$d3, $d2, 52;
	cvt_u32_u64	$s1, $d3;
	and_b32	$s3, $s1, 2047;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cmov_b32	$s7, $c0, $s0, $s3;
	cmov_b64	$d5, $c0, $d1, $d2;
	class_b1_f64	$c0, $d0, 516;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s5, $s0, 1;
	ld_arg_align(8)_f64	$d1, [%y];
	mul_f64	$d3, $d1, 0D4340000000000000;
	mov_b64	$d4, $d3;
	shr_u64	$d3, $d4, 52;
	cvt_u32_u64	$s0, $d3;
	and_b32	$s0, $s0, 2047;
	add_u32	$s0, $s0, 4294967243;
	mov_b64	$d3, $d1;
	shr_u64	$d6, $d3, 52;
	cvt_u32_u64	$s1, $d6;
	and_b32	$s4, $s1, 2047;
	cmp_eq_b1_s32	$c0, $s4, 0;
	cmov_b32	$s8, $c0, $s0, $s4;
	cmov_b64	$d4, $c0, $d4, $d3;
	cmp_lt_b1_u32	$c0, $s4, 1021;
	cmp_lt_b1_u32	$c1, $s3, 1021;
	and_b1	$c2, $c1, $c0;
	class_b1_f64	$c0, $d1, 516;
	cvt_u32_b1	$s0, $c0;
	cvt_u32_b1	$s1, $c0;
	and_b32	$s6, $s1, 1;
	and_b32	$s2, $s0, $s5;
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s0, $s0, 1;
	class_b1_f64	$c0, $d1, 3;
	cvt_u32_b1	$s1, $c0;
	and_b32	$s1, $s1, 1;
	and_b64	$d5, $d5, 9227875636482146303;
	add_u32	$s7, $s7, 1024;
	max_s32	$s7, $s7, -2047;
	min_s32	$s7, $s7, 2047;
	cvt_u64_u32	$d6, $s7;
	shl_u64	$d6, $d6, 52;
	or_b64	$d6, $d6, $d5;
	add_u32	$s9, $s7, 53;
	cvt_u64_u32	$d7, $s9;
	shl_u64	$d7, $d7, 52;
	or_b64	$d5, $d7, $d5;
	mul_f64	$d5, $d5, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c0, $s7, 0;
	cmov_b64	$d6, $c0, $d6, $d5;
	and_b64	$d5, $d2, 9223372036854775808;
	or_b64	$d7, $d5, 9218868437227405312;
	cmp_eq_b1_s32	$c0, $s7, 2047;
	cmov_b64	$d6, $c0, $d7, $d6;
	and_b64	$d4, $d4, 9227875636482146303;
	add_u32	$s8, $s8, 1024;
	max_s32	$s8, $s8, -2047;
	min_s32	$s8, $s8, 2047;
	cvt_u64_u32	$d7, $s8;
	shl_u64	$d7, $d7, 52;
	or_b64	$d7, $d7, $d4;
	add_u32	$s9, $s8, 53;
	cvt_u64_u32	$d8, $s9;
	shl_u64	$d8, $d8, 52;
	or_b64	$d4, $d8, $d4;
	mul_f64	$d4, $d4, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c0, $s8, 0;
	cmov_b64	$d7, $c0, $d7, $d4;
	and_b64	$d4, $d3, 9223372036854775808;
	or_b64	$d8, $d4, 9218868437227405312;
	cmp_eq_b1_s32	$c0, $s8, 2047;
	cmov_b64	$d7, $c0, $d8, $d7;
	cmp_lt_b1_s32	$c0, $s7, -53;
	cmov_b64	$d5, $c0, $d5, $d6;
	cmp_eq_b1_f64	$c0, $d0, 0D0000000000000000;
	cvt_u32_b1	$s7, $c0;
	or_b32	$s5, $s5, $s7;
	cmp_ne_b1_s32	$c1, $s5, 0;
	cmov_b64	$d14, $c1, $d0, $d5;
	cmp_lt_b1_s32	$c1, $s8, -53;
	cmov_b64	$d4, $c1, $d4, $d7;
	cmp_eq_b1_f64	$c1, $d1, 0D0000000000000000;
	cvt_u32_b1	$s5, $c1;
	or_b32	$s5, $s6, $s5;
	cmp_ne_b1_s32	$c3, $s5, 0;
	cmov_b64	$d16, $c3, $d1, $d4;
	cmov_b64	$d4, $c2, $d16, $d1;
	abs_f64	$d6, $d4;
	cmov_b64	$d5, $c2, $d14, $d0;
	abs_f64	$d7, $d5;
	max_f64	$d8, $d7, $d6;
	min_f64	$d10, $d7, $d6;
	div_f64	$d9, $d10, $d8;
	mov_b64	$d11, $d9;
	and_b64	$d11, $d11, 18446744069414584320;
	mov_b64	$d17, $d11;
	mov_b64	$d12, $d8;
	and_b64	$d11, $d12, 18446744069414584320;
	neg_f64	$d13, $d11;
	fma_f64	$d13, $d13, $d17, $d10;
	sub_f64	$d11, $d8, $d11;
	neg_f64	$d15, $d11;
	mov_b64	$d11, $d10;
	fma_f64	$d18, $d15, $d17, $d13;
	shr_u64	$d13, $d12, 52;
	cvt_u32_u64	$s7, $d13;
	shr_u64	$d13, $d11, 52;
	cvt_u32_u64	$s5, $d13;
	mul_f64	$d13, $d10, 0D4340000000000000;
	shr_u64	$d15, $d13, 52;
	cvt_u32_u64	$s6, $d15;
	mul_f64	$d15, $d8, 0D4340000000000000;
	shr_u64	$d19, $d15, 52;
	cvt_u32_u64	$s8, $d19;
	shr_u64	$d16, $d16, 52;
	cvt_u32_u64	$s9, $d16;
	mov_b64	$d16, $d14;
	sub_f64	$d14, $d9, $d17;
	shr_u64	$d16, $d16, 52;
	cvt_u32_u64	$s10, $d16;
	neg_f64	$d16, $d9;
	neg_f64	$d17, $d8;
	fma_f64	$d14, $d17, $d14, $d18;
	mul_f64	$d17, $d9, $d9;
	mul_f64	$d16, $d17, $d16;
	neg_f64	$d17, $d17;
	fma_f64	$d18, $d17, 0D3fb70c3192d751c2, 0D3fbc718839b8c4eb;
	fma_f64	$d18, $d17, $d18, 0D3fc2492482bd6be1;
	fma_f64	$d18, $d17, $d18, 0D3fc99999999643a3;
	fma_f64	$d17, $d17, $d18, 0D3fd5555555555538;
	cmp_eq_b1_f64	$c3, $d8, 0D0000000000000000;
	cmp_eq_b1_s32	$c4, $s7, 1023;
	or_b1	$c3, $c4, $c3;
	cmp_eq_b1_f64	$c5, $d10, 0D0000000000000000;
	or_b1	$c4, $c4, $c5;
	sub_u32	$s3, $s4, $s3;
	and_b32	$s4, $s10, 2047;
	and_b32	$s9, $s9, 2047;
	sub_u32	$s4, $s9, $s4;
	cmov_b32	$s3, $c2, $s4, $s3;
	and_b32	$s4, $s8, 2047;
	add_u32	$s4, $s4, 4294967243;
	and_b32	$s8, $s7, 2047;
	cmp_eq_b1_s32	$c2, $s8, 0;
	cmov_b32	$s12, $c2, $s4, $s8;
	cmov_b64	$d18, $c2, $d15, $d12;
	and_b32	$s4, $s6, 2047;
	add_u32	$s4, $s4, 4294967243;
	and_b32	$s5, $s5, 2047;
	cmp_eq_b1_s32	$c2, $s5, 0;
	cmov_b32	$s11, $c2, $s4, $s5;
	cmov_b64	$d15, $c2, $d13, $d11;
	cvt_u32_b1	$s6, $c3;
	cvt_u32_b1	$s8, $c4;
	class_b1_f64	$c2, $d8, 516;
	cvt_u32_b1	$s4, $c2;
	and_b32	$s9, $s4, 1;
	class_b1_f64	$c2, $d10, 516;
	cvt_u32_b1	$s4, $c2;
	and_b32	$s10, $s4, 1;
	div_f64	$d13, $d14, $d8;
	fma_f64	$d13, $d16, $d17, $d13;
	add_f64	$d13, $d9, $d13;
	cmp_lt_b1_f64	$c2, $d9, 0D3e4d12ed0af1a27f;
	cmov_b64	$d13, $c2, $d9, $d13;
	cmp_lt_b1_s32	$c2, $s3, -28;
	cvt_u32_b1	$s4, $c2;
	shr_u64	$d14, $d2, 32;
	cvt_u32_u64	$s5, $d14;
	cmp_gt_b1_s32	$c2, $s5, -1;
	cmp_gt_b1_s32	$c3, $s3, -57;
	or_b1	$c2, $c3, $c2;
	and_b64	$d14, $d18, 9227875636482146303;
	sub_u32	$s13, 1023, $s7;
	add_u32	$s7, $s12, $s13;
	max_s32	$s7, $s7, -2047;
	min_s32	$s7, $s7, 2047;
	cvt_u64_u32	$d16, $s7;
	shl_u64	$d16, $d16, 52;
	or_b64	$d16, $d14, $d16;
	add_u32	$s12, $s7, 53;
	cvt_u64_u32	$d17, $s12;
	shl_u64	$d17, $d17, 52;
	or_b64	$d14, $d14, $d17;
	mul_f64	$d14, $d14, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c3, $s7, 0;
	cmov_b64	$d14, $c3, $d16, $d14;
	and_b64	$d15, $d15, 9227875636482146303;
	add_u32	$s11, $s11, $s13;
	max_s32	$s11, $s11, -2047;
	min_s32	$s11, $s11, 2047;
	cvt_u64_u32	$d16, $s11;
	shl_u64	$d16, $d16, 52;
	or_b64	$d16, $d16, $d15;
	add_u32	$s12, $s11, 53;
	cvt_u64_u32	$d17, $s12;
	shl_u64	$d17, $d17, 52;
	or_b64	$d15, $d17, $d15;
	mul_f64	$d15, $d15, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c3, $s11, 0;
	cmov_b64	$d15, $c3, $d16, $d15;
	and_b64	$d12, $d12, 9223372036854775808;
	or_b64	$d16, $d12, 9218868437227405312;
	cmp_eq_b1_s32	$c3, $s7, 2047;
	cmov_b64	$d14, $c3, $d16, $d14;
	cmp_lt_b1_s32	$c3, $s7, -53;
	cmov_b64	$d12, $c3, $d12, $d14;
	and_b64	$d11, $d11, 9223372036854775808;
	or_b64	$d14, $d11, 9218868437227405312;
	cmp_eq_b1_s32	$c3, $s11, 2047;
	cmov_b64	$d14, $c3, $d14, $d15;
	cmp_lt_b1_s32	$c3, $s11, -53;
	cmov_b64	$d11, $c3, $d11, $d14;
	or_b32	$s7, $s10, $s8;
	cmp_ne_b1_s32	$c3, $s7, 0;
	cmov_b64	$d10, $c3, $d10, $d11;
	or_b32	$s6, $s6, $s9;
	cmp_ne_b1_s32	$c3, $s6, 0;
	cmov_b64	$d8, $c3, $d8, $d12;
	cmp_gt_b1_f64	$c3, $d9, 0D3fb0000000000000;
	cmov_b64	$d9, $c3, $d9, 4589204049087554388;
	fma_f64	$d9, 0D4070000000000000, $d9, 0D3fe0000000000000;
	cvt_s32_f64	$s7, $d9;
	add_u32	$s6, $s7, 4294967280;
	cvt_near_f64_s32	$d9, $s7;
	mul_f64	$d12, $d9, 0D3f70000000000000;
	mul_f64	$d14, $d9, 0Dbf70000000000000;
	cvt_s64_s32	$d9, $s6;
	shl_u64	$d15, $d9, 4;
	ld_v2_readonly_align(16)_f64	($d9, $d11), [&__math64_ATAN_JBY256_TBL][$d15];
	cmov_b64	$d9, $c3, $d9, 0;
	mov_b64	$d15, $d8;
	and_b64	$d15, $d15, 18446744073575333888;
	fma_f64	$d16, $d14, $d15, $d10;
	sub_f64	$d15, $d8, $d15;
	fma_f64	$d14, $d14, $d15, $d16;
	fma_f64	$d8, $d12, $d10, $d8;
	div_f64	$d8, $d14, $d8;
	mul_f64	$d10, $d8, $d8;
	neg_f64	$d12, $d10;
	fma_f64	$d12, $d12, 0D3fc99992b9802d7d, 0D3fd5555555550877;
	mul_f64	$d10, $d10, $d12;
	neg_f64	$d12, $d8;
	fma_f64	$d8, $d10, $d12, $d8;
	add_f64	$d8, $d11, $d8;
	cmov_b64	$d8, $c3, $d8, $d13;
	sub_f64	$d10, 0D3ff921fb54442d18, $d9;
	cmp_lt_b1_f64	$c3, $d7, $d6;
	cmov_b64	$d6, $c3, $d10, $d9;
	sub_f64	$d7, 0D3c91a62633145c07, $d8;
	cmov_b64	$d8, $c3, $d7, $d8;
	shr_u64	$d3, $d3, 32;
	cvt_u32_u64	$s6, $d3;
	cmp_lt_b1_s32	$c3, $s6, 0;
	cmov_b64	$d7, $c3, 13830554455654793216, 4607182418800017408;
	cmov_b64	$d3, $c3, 13821547256400052224, 4598175219545276416;
	cmov_b64	$d9, $c3, 13828302655841107968, 4604930618986332160;
	cmp_lt_b1_s32	$c4, $s5, 0;
	cmov_b64	$d9, $c4, $d9, $d3;
	cmov_b64	$d3, $c4, $d7, $d1;
	sub_f64	$d10, 0D400921fb50000000, $d6;
	cmov_b64	$d10, $c4, $d10, $d6;
	sub_f64	$d6, 0D3e6110b4611a6263, $d8;
	cmov_b64	$d8, $c4, $d6, $d8;
	cmov_b64	$d6, $c3, 13826050856027422720, 4602678819172646912;
	add_f64	$d8, $d10, $d8;
	div_f64	$d8, $d8, 0D400921fb54442d18;
	neg_f64	$d10, $d8;
	cmov_b64	$d8, $c3, $d10, $d8;
	cmp_ne_b1_s32	$c3, $s2, 0;
	cmov_b64	$d8, $c3, $d9, $d8;
	cmov_b64	$d7, $c2, $d8, $d7;
	shr_u64	$d2, $d2, 63;
	cvt_u32_u64	$s2, $d2;
	xor_b32	$s2, $s2, 1;
	div_f64	$d2, $d4, $d5;
	div_f64	$d2, $d2, 0D400921fb54442d18;
	and_b32	$s2, $s4, $s2;
	cmp_ne_b1_s32	$c2, $s2, 0;
	cmov_b64	$d2, $c2, $d2, $d7;
	cmp_gt_b1_s32	$c2, $s3, 56;
	cmov_b64	$d2, $c2, $d6, $d2;
	cmov_b64	$d2, $c0, $d6, $d2;
	cmov_b64	$d2, $c1, $d3, $d2;
	cvt_b1_u32	$c0, $s1;
	cmov_b64	$d1, $c0, $d1, $d2;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d0, $c0, $d0, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_atan2pi];
	ret;
};


decl function &_gcc_exp10(arg_f64 %ret)(arg_f64 %x);


function &_gcc_exp10(arg_f64 %_gcc_exp10)(arg_f64 %x)
{

@_gcc_exp10_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s0, $s0, 1;
	mul_f64	$d1, $d0, 0D406a934f0979a371;
	cvt_s32_f64	$s1, $d1;
	cvt_near_f64_s32	$d1, $s1;
	fma_f64	$d2, 0Dbf73441350000000, $d1, $d0;
	fma_f64	$d1, 0Dbda3ef3fde623e25, $d1, $d2;
	mul_f64	$d1, $d1, 0D40026bb1bbb55516;
	fma_f64	$d2, $d1, 0D3f56c16c16c16c17, 0D3f81111111111111;
	fma_f64	$d2, $d1, $d2, 0D3fa5555555555555;
	fma_f64	$d2, $d1, $d2, 0D3fc5555555555555;
	and_b32	$s2, $s1, 63;
	fma_f64	$d2, $d1, $d2, 0D3fe0000000000000;
	cvt_u64_u32	$d3, $s2;
	fma_f64	$d2, $d1, $d2, 0D3ff0000000000000;
	shl_u64	$d4, $d3, 4;
	mul_f64	$d2, $d1, $d2;
	ld_v2_readonly_align(16)_f64	($d1, $d3), [&__math64_TWO_TO_JBY64_EP][$d4];
	add_f64	$d4, $d1, $d3;
	fma_f64	$d2, $d4, $d2, $d3;
	add_f64	$d1, $d2, $d1;
	mul_f64	$d2, $d1, 0D4340000000000000;
	mov_b64	$d3, $d2;
	shr_u64	$d2, $d3, 52;
	cvt_u32_u64	$s2, $d2;
	and_b32	$s2, $s2, 2047;
	add_u32	$s2, $s2, 4294967243;
	mov_b64	$d2, $d1;
	shr_u64	$d4, $d2, 52;
	cvt_u32_u64	$s3, $d4;
	and_b32	$s3, $s3, 2047;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cmov_b32	$s5, $c0, $s2, $s3;
	cmov_b64	$d3, $c0, $d3, $d2;
	shr_s32	$s2, $s1, 6;
	cmp_eq_b1_s32	$c0, $s2, -1022;
	cmp_lt_b1_f64	$c1, $d1, 0D3ff0000000000000;
	and_b1	$c0, $c0, $c1;
	cmp_eq_b1_s32	$c1, $s2, 0;
	cmp_eq_b1_f64	$c2, $d1, 0D0000000000000000;
	or_b1	$c1, $c1, $c2;
	class_b1_f64	$c2, $d1, 516;
	cvt_u32_b1	$s3, $c2;
	and_b32	$s3, $s3, 1;
	cvt_u32_b1	$s4, $c1;
	cmp_lt_b1_s32	$c1, $s2, -1022;
	or_b1	$c0, $c1, $c0;
	and_b64	$d3, $d3, 9227875636482146303;
	add_u32	$s5, $s5, $s2;
	max_s32	$s5, $s5, -2047;
	min_s32	$s5, $s5, 2047;
	cvt_u64_u32	$d4, $s5;
	shl_u64	$d4, $d4, 52;
	or_b64	$d4, $d3, $d4;
	add_u32	$s6, $s5, 53;
	cvt_u64_u32	$d5, $s6;
	shl_u64	$d5, $d5, 52;
	or_b64	$d3, $d3, $d5;
	mul_f64	$d3, $d3, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c1, $s5, 0;
	cmov_b64	$d3, $c1, $d4, $d3;
	and_b64	$d2, $d2, 9223372036854775808;
	or_b64	$d4, $d2, 9218868437227405312;
	cmp_eq_b1_s32	$c1, $s5, 2047;
	cmov_b64	$d3, $c1, $d4, $d3;
	cmp_lt_b1_s32	$c1, $s5, -53;
	cmov_b64	$d2, $c1, $d2, $d3;
	or_b32	$s3, $s4, $s3;
	cmp_ne_b1_s32	$c1, $s3, 0;
	cmov_b64	$d2, $c1, $d1, $d2;
	shr_s32	$s1, $s1, 8;
	sub_u32	$s3, 1023, $s1;
	add_u32	$s2, $s3, $s2;
	cvt_u64_u32	$d3, $s2;
	shl_u64	$d3, $d3, 52;
	add_u32	$s1, $s1, 1023;
	cvt_u64_u32	$d4, $s1;
	shl_u64	$d4, $d4, 52;
	mul_f64	$d1, $d4, $d1;
	mul_f64	$d1, $d3, $d1;
	cmov_b64	$d1, $c0, $d1, $d2;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d1, $c0, $d0, $d1;
	cmp_gt_b1_f64	$c0, $d0, 0D40734413509f79ff;
	cmov_b64	$d1, $c0, 9218868437227405312, $d1;
	cmp_lt_b1_f64	$c0, $d0, 0Dc07434e6420f4374;
	cmov_b64	$d0, $c0, 0, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_exp10];
	ret;
};


decl function &_gcc_floor(arg_f64 %ret)(arg_f64 %x);


function &_gcc_floor(arg_f64 %_gcc_floor)(arg_f64 %x)
{

@_gcc_floor_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	floor_f64	$d0, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_floor];
	ret;
};


decl function &_gcc_remquo(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y,
	arg_u64 %pquo);


function &_gcc_remquo(arg_f64 %_gcc_remquo)(
	arg_f64 %x,
	arg_f64 %y,
	arg_u64 %pquo)
{

@_gcc_remquo_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%y];
	mov_b64	$d3, $d0;
	cvt_u32_u64	$s0, $d3;
	firstbit_u32_u32	$s1, $s0;
	add_u32	$s1, $s1, 32;
	cmp_eq_b1_s32	$c0, $s0, 0;
	cmov_b32	$s0, $c0, 64, $s1;
	ld_arg_align(8)_f64	$d1, [%x];
	mov_b64	$d4, $d1;
	cvt_u32_u64	$s1, $d4;
	firstbit_u32_u32	$s2, $s1;
	add_u32	$s2, $s2, 32;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b32	$s1, $c0, 64, $s2;
	shr_u64	$d2, $d4, 32;
	cvt_u32_u64	$s2, $d2;
	and_b32	$s2, $s2, 1048575;
	firstbit_u32_u32	$s3, $s2;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmov_b32	$s1, $c0, $s1, $s3;
	shr_u64	$d2, $d3, 32;
	cvt_u32_u64	$s2, $d2;
	and_b32	$s2, $s2, 1048575;
	firstbit_u32_u32	$s3, $s2;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmov_b32	$s0, $c0, $s0, $s3;
	sub_u32	$s2, 11, $s0;
	and_b64	$d6, $d3, 9223372036854775807;
	shr_u64	$d2, $d6, 52;
	cvt_u32_u64	$s0, $d2;
	cmp_eq_b1_s32	$c0, $s0, 0;
	cmov_b32	$s2, $c0, $s2, $s0;
	sub_u32	$s3, 11, $s1;
	and_b64	$d5, $d4, 9223372036854775807;
	shr_u64	$d2, $d5, 52;
	cvt_u32_u64	$s1, $d2;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b32	$s3, $c0, $s3, $s1;
	shr_u64	$d8, $d3, 52;
	mov_b64	$d2, $d6;
	mul_f64	$d7, $d2, 0D4340000000000000;
	shr_u64	$d9, $d7, 52;
	cvt_u32_u64	$s4, $d9;
	and_b32	$s4, $s4, 2047;
	add_u32	$s4, $s4, 4294967243;
	cvt_u32_u64	$s5, $d8;
	and_b32	$s5, $s5, 2047;
	cmp_eq_b1_s32	$c0, $s5, 0;
	cmov_b32	$s6, $c0, $s4, $s5;
	cmov_b64	$d6, $c0, $d7, $d6;
	class_b1_f64	$c0, $d2, 516;
	cvt_u32_b1	$s4, $c0;
	and_b32	$s5, $s4, 1;
	sub_u32	$s2, $s3, $s2;
	cvt_s64_s32	$d7, $s2;
	mul_u64	$d7, $d7, 1296593901;
	shr_u64	$d8, $d7, 63;
	cvt_u32_u64	$s2, $d8;
	shr_u64	$d7, $d7, 32;
	cvt_u32_u64	$s3, $d7;
	shr_s32	$s3, $s3, 4;
	add_u32	$s2, $s3, $s2;
	max_s32	$s2, 0, $s2;
	mul_u32	$s3, $s2, 53;
	shr_s32	$s4, $s3, 1;
	cmp_eq_b1_f64	$c0, $d2, 0D0000000000000000;
	cmp_eq_b1_s32	$c1, $s4, 0;
	or_b1	$c1, $c1, $c0;
	cvt_u32_b1	$s7, $c1;
	and_b64	$d6, $d6, 9227875636482146303;
	add_u32	$s6, $s4, $s6;
	max_s32	$s6, $s6, -2047;
	min_s32	$s6, $s6, 2047;
	cvt_u64_u32	$d7, $s6;
	shl_u64	$d7, $d7, 52;
	or_b64	$d7, $d7, $d6;
	add_u32	$s8, $s6, 53;
	cvt_u64_u32	$d8, $s8;
	shl_u64	$d8, $d8, 52;
	or_b64	$d6, $d8, $d6;
	mul_f64	$d6, $d6, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c1, $s6, 0;
	cmov_b64	$d6, $c1, $d7, $d6;
	cmp_eq_b1_s32	$c1, $s6, 2047;
	cmov_b64	$d6, $c1, 9218868437227405312, $d6;
	cmp_lt_b1_s32	$c1, $s6, -53;
	cmov_b64	$d6, $c1, 0, $d6;
	or_b32	$s5, $s7, $s5;
	cmp_ne_b1_s32	$c1, $s5, 0;
	cmov_b64	$d6, $c1, $d2, $d6;
	mul_f64	$d7, $d6, 0D4340000000000000;
	mov_b64	$d8, $d7;
	shr_u64	$d7, $d8, 52;
	cvt_u32_u64	$s5, $d7;
	and_b32	$s5, $s5, 2047;
	add_u32	$s5, $s5, 4294967243;
	mov_b64	$d7, $d6;
	shr_u64	$d9, $d7, 52;
	cvt_u32_u64	$s6, $d9;
	and_b32	$s6, $s6, 2047;
	cmp_eq_b1_s32	$c1, $s6, 0;
	cmov_b32	$s7, $c1, $s5, $s6;
	cmov_b64	$d8, $c1, $d8, $d7;
	cmp_eq_b1_s32	$c1, $s3, $s4;
	cmp_eq_b1_f64	$c2, $d6, 0D0000000000000000;
	or_b1	$c1, $c1, $c2;
	class_b1_f64	$c2, $d6, 516;
	cvt_u32_b1	$s5, $c2;
	and_b32	$s5, $s5, 1;
	cvt_u32_b1	$s6, $c1;
	sub_u32	$s3, $s3, $s4;
	and_b64	$d8, $d8, 9227875636482146303;
	add_u32	$s3, $s3, $s7;
	max_s32	$s3, $s3, -2047;
	min_s32	$s3, $s3, 2047;
	cvt_u64_u32	$d9, $s3;
	shl_u64	$d9, $d9, 52;
	or_b64	$d9, $d8, $d9;
	add_u32	$s4, $s3, 53;
	cvt_u64_u32	$d10, $s4;
	shl_u64	$d10, $d10, 52;
	or_b64	$d8, $d8, $d10;
	mul_f64	$d8, $d8, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c1, $s3, 0;
	cmov_b64	$d8, $c1, $d9, $d8;
	and_b64	$d7, $d7, 9223372036854775808;
	or_b64	$d9, $d7, 9218868437227405312;
	cmp_eq_b1_s32	$c1, $s3, 2047;
	cmov_b64	$d8, $c1, $d9, $d8;
	cmp_lt_b1_s32	$c1, $s3, -53;
	cmov_b64	$d7, $c1, $d7, $d8;
	or_b32	$s3, $s6, $s5;
	cmp_ne_b1_s32	$c1, $s3, 0;
	cmov_b64	$d6, $c1, $d6, $d7;
	cmp_eq_b1_s32	$c1, $s2, 0;
	cmov_b64	$d8, $c1, $d2, $d6;
	mov_b64	$d7, $d5;
	ld_arg_align(8)_u64	$d6, [%pquo];
	div_f64	$d9, $d7, $d8;
	cmp_ge_b1_s32	$c2, $s2, 1;
	cbr_b1	$c2, @BB0_2;
	br	@BB0_1;

@BB0_2:
	cmov_b64	$d11, $c1, 4607182418800017408, 4368491638549381120;
	mov_b64	$d10, $d7;

@BB0_3:
	// %.lr.ph
	trunc_f64	$d9, $d9;
	mul_f64	$d13, $d8, $d9;
	sub_f64	$d12, $d10, $d13;
	sub_f64	$d10, $d10, $d12;
	sub_f64	$d10, $d10, $d13;
	neg_f64	$d13, $d13;
	fma_f64	$d9, $d8, $d9, $d13;
	sub_f64	$d9, $d10, $d9;
	add_f64	$d9, $d12, $d9;
	cmp_lt_b1_f64	$c1, $d9, 0D0000000000000000;
	cmov_b64	$d10, $c1, $d8, 0;
	mul_f64	$d8, $d11, $d8;
	add_u32	$s2, $s2, 4294967295;
	add_f64	$d10, $d9, $d10;
	div_f64	$d9, $d10, $d8;
	cmp_ne_b1_s32	$c1, $s2, 0;
	cbr_b1	$c1, @BB0_3;
	br	@BB0_4;

@BB0_1:
	mov_b64	$d10, $d7;

@BB0_4:
	// %._crit_edge
	xor_b64	$d3, $d3, $d4;
	cmp_gt_b1_s64	$c2, $d3, -1;
	cmov_b32	$s2, $c2, 1, 4294967295;
	xor_b64	$d4, $d5, $d4;
	add_f64	$d3, $d7, $d7;
	cmp_gt_b1_f64	$c1, $d3, $d2;
	cmp_lt_b1_u32	$c3, $s0, 1023;
	and_b1	$c1, $c3, $c1;
	mul_f64	$d3, $d2, 0D3fe0000000000000;
	cmp_gt_b1_f64	$c3, $d7, $d3;
	or_b1	$c1, $c1, $c3;
	cmov_b64	$d5, $c2, 13830554455654793216, 4607182418800017408;
	cmp_num_b1_f64	$c2, $d0, $d0;
	cmov_b64	$d3, $c2, $d1, $d0;
	floor_f64	$d11, $d9;
	mul_f64	$d12, $d8, $d11;
	sub_f64	$d9, $d10, $d12;
	sub_f64	$d10, $d10, $d9;
	sub_f64	$d10, $d10, $d12;
	neg_f64	$d12, $d12;
	fma_f64	$d12, $d8, $d11, $d12;
	sub_f64	$d10, $d10, $d12;
	add_f64	$d9, $d9, $d10;
	mul_f64	$d10, $d8, 0D3fe0000000000000;
	cmp_lt_b1_f64	$c2, $d9, 0D0000000000000000;
	cmov_b64	$d12, $c2, $d8, 0;
	add_f64	$d9, $d9, $d12;
	cmp_gt_b1_f64	$c3, $d9, $d10;
	cvt_u32_b1	$s3, $c3;
	cmp_eq_b1_f64	$c3, $d9, $d10;
	cvt_u32_b1	$s5, $c3;
	cvt_u32_b1	$s4, $c2;
	cvt_u64_b1	$d10, $c2;
	cvt_s64_f64	$d11, $d11;
	cvt_u32_u64	$s6, $d11;
	and_b32	$s6, $s6, 1;
	xor_b32	$s4, $s4, $s6;
	and_b32	$s5, $s5, $s4;
	or_b32	$s3, $s5, $s3;
	cmp_ne_b1_s32	$c2, $s3, 0;
	cmov_b64	$d12, $c2, $d8, 0;
	add_f64	$d13, $d9, $d9;
	cmp_gt_b1_f64	$c2, $d13, $d8;
	cvt_u32_b1	$s5, $c2;
	cmp_eq_b1_f64	$c2, $d13, $d8;
	cvt_u32_b1	$s6, $c2;
	and_b32	$s4, $s6, $s4;
	or_b32	$s4, $s4, $s5;
	cmp_ne_b1_s32	$c2, $s4, 0;
	cmov_b64	$d8, $c2, $d8, 0;
	cmp_lt_b1_f64	$c2, $d2, 0D7fd0000000000000;
	cmov_b32	$s3, $c2, $s4, $s3;
	cmov_b64	$d8, $c2, $d8, $d12;
	sub_u64	$d10, $d11, $d10;
	sub_f64	$d8, $d9, $d8;
	cvt_u64_u32	$d9, $s3;
	add_u64	$d9, $d10, $d9;
	cvt_u32_u64	$s3, $d9;
	and_b32	$s3, $s3, 127;
	cmp_eq_b1_f64	$c2, $d7, $d2;
	cmov_b32	$s3, $c2, 1, $s3;
	cmov_b64	$d8, $c2, 0, $d8;
	cmp_lt_b1_f64	$c2, $d7, $d2;
	and_b1	$c1, $c2, $c1;
	xor_b64	$d2, $d4, $d8;
	cmov_b64	$d2, $c2, $d1, $d2;
	mul_u32	$s3, $s3, $s2;
	cmov_b32	$s3, $c2, 0, $s3;
	fma_f64	$d0, $d0, $d5, $d1;
	cmov_b32	$s2, $c1, $s2, $s3;
	cmov_b64	$d0, $c1, $d0, $d2;
	cmov_b64	$d0, $c0, 9221120237041090560, $d0;
	cmov_b32	$s2, $c0, 0, $s2;
	cmp_eq_b1_s32	$c0, $s0, 2047;
	cmov_b32	$s0, $c0, 0, $s2;
	cmov_b64	$d0, $c0, $d3, $d0;
	cmp_eq_b1_s32	$c0, $s1, 2047;
	cmov_b64	$d0, $c0, 9221120237041090560, $d0;
	cmov_b32	$s0, $c0, 0, $s0;
	st_align(4)_u32	$s0, [$d6];
	st_arg_align(8)_f64	$d0, [%_gcc_remquo];
	ret;
};


decl function &_gcc_expm1(arg_f64 %ret)(arg_f64 %x);


function &_gcc_expm1(arg_f64 %_gcc_expm1)(arg_f64 %x)
{

@_gcc_expm1_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	cmp_lt_b1_f64	$c0, $d0, 0D3fcc8ff7c79a9a22;
	cmp_gt_b1_f64	$c1, $d0, 0Dbfd269621134db93;
	and_b1	$c0, $c1, $c0;
	mov_b64	$d1, $d0;
	and_b64	$d1, $d1, 18446744073692774400;
	add_f64	$d2, $d1, $d0;
	sub_f64	$d3, $d0, $d1;
	mul_f64	$d2, $d3, $d2;
	mul_f64	$d2, $d2, 0D3fe0000000000000;
	fma_f64	$d5, $d0, 0D3e5a2836aa646b96, 0D3e928295484734ea;
	mul_f64	$d4, $d0, $d0;
	add_f64	$d3, $d3, $d2;
	mul_f64	$d4, $d4, $d0;
	fma_f64	$d5, $d0, $d5, 0D3ec71e14bfe3db59;
	fma_f64	$d5, $d0, $d5, 0D3efa019f635825c4;
	fma_f64	$d5, $d0, $d5, 0D3f2a01a01159dd2d;
	fma_f64	$d5, $d0, $d5, 0D3f56c16c16ce14c6;
	fma_f64	$d5, $d0, $d5, 0D3f8111111111a9f3;
	fma_f64	$d5, $d0, $d5, 0D3fa55555555554b6;
	fma_f64	$d5, $d0, $d5, 0D3fc5555555555549;
	mul_f64	$d4, $d4, $d5;
	add_f64	$d5, $d3, $d4;
	mul_f64	$d3, $d1, $d1;
	mul_f64	$d3, $d3, 0D3fe0000000000000;
	add_f64	$d1, $d1, $d3;
	add_f64	$d1, $d1, $d5;
	add_f64	$d2, $d2, $d4;
	add_f64	$d2, $d3, $d2;
	add_f64	$d2, $d2, $d0;
	cmp_ge_b1_f64	$c1, $d3, 0D3f80000000000000;
	cmov_b64	$d1, $c1, $d1, $d2;
	mul_f64	$d2, $d0, 0D40571547652b82fe;
	cvt_s32_f64	$s0, $d2;
	neg_s32	$s1, $s0;
	cvt_near_f64_s32	$d2, $s1;
	fma_f64	$d3, $d2, 0D3f862e42fefa0000, $d0;
	fma_f64	$d2, $d2, 0D3d1cf79abc9e3b39, $d3;
	fma_f64	$d3, $d2, 0D3f56c1728d739765, 0D3f811115b7aa905e;
	fma_f64	$d3, $d2, $d3, 0D3fa5555555545d4e;
	fma_f64	$d3, $d2, $d3, 0D3fc5555555548f7c;
	fma_f64	$d3, $d2, $d3, 0D3fe0000000000000;
	mul_f64	$d4, $d2, $d2;
	and_b32	$s1, $s0, 63;
	cvt_u64_u32	$d5, $s1;
	fma_f64	$d2, $d4, $d3, $d2;
	shl_u64	$d5, $d5, 4;
	ld_v2_readonly_align(16)_f64	($d3, $d4), [&__math64_TWO_TO_JBY64_EP][$d5];
	add_f64	$d5, $d3, $d4;
	mul_f64	$d6, $d5, $d2;
	add_f64	$d6, $d6, $d4;
	add_f64	$d6, $d3, $d6;
	mul_f64	$d6, $d6, 0D7fe0000000000000;
	mov_b64	$d7, $d6;
	and_b64	$d6, $d7, 4503599627370495;
	shr_u64	$d7, $d7, 52;
	cvt_u32_u64	$s1, $d7;
	add_u32	$s1, $s1, 1;
	cvt_u64_u32	$d7, $s1;
	shl_u64	$d7, $d7, 52;
	or_b64	$d6, $d7, $d6;
	cmp_eq_b1_s32	$c1, $s1, 2047;
	cmov_b64	$d6, $c1, 9218868437227405312, $d6;
	shr_s32	$s0, $s0, 6;
	sub_u32	$s1, 1023, $s0;
	cvt_u64_u32	$d7, $s1;
	shl_u64	$d7, $d7, 52;
	sub_f64	$d8, $d4, $d7;
	add_u32	$s1, $s0, 1023;
	cvt_u64_u32	$d9, $s1;
	fma_f64	$d8, $d5, $d2, $d8;
	shl_u64	$d9, $d9, 52;
	add_f64	$d10, $d3, $d8;
	mov_b64	$d8, $d9;
	mul_f64	$d9, $d8, $d10;
	cmp_eq_b1_s32	$c1, $s0, 1024;
	cmov_b64	$d6, $c1, $d6, $d9;
	add_f64	$d9, $d2, 0D3ff0000000000000;
	mul_f64	$d9, $d4, $d9;
	fma_f64	$d9, $d3, $d2, $d9;
	sub_f64	$d7, $d3, $d7;
	add_f64	$d7, $d7, $d9;
	mul_f64	$d7, $d8, $d7;
	cmp_lt_b1_s32	$c1, $s0, 53;
	cmov_b64	$d6, $c1, $d7, $d6;
	fma_f64	$d2, $d5, $d2, $d4;
	add_f64	$d2, $d3, $d2;
	fma_f64	$d2, $d8, $d2, 0Dbff0000000000000;
	cmp_lt_b1_s32	$c1, $s0, -7;
	cmov_b64	$d2, $c1, $d2, $d6;
	cmov_b64	$d1, $c0, $d1, $d2;
	cmp_gt_b1_f64	$c0, $d0, 0D40862e6666666666;
	cmov_b64	$d1, $c0, 9218868437227405312, $d1;
	cmp_lt_b1_f64	$c0, $d0, 0Dc042b708872320e1;
	cmov_b64	$d0, $c0, 13830554455654793216, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_expm1];
	ret;
};


decl function &_gcc_fmax(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y);


function &_gcc_fmax(arg_f64 %_gcc_fmax)(
	arg_f64 %x,
	arg_f64 %y)
{

@_gcc_fmax_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%y];
	mul_f64	$d0, $d0, 0D3ff0000000000000;
	ld_arg_align(8)_f64	$d1, [%x];
	mul_f64	$d1, $d1, 0D3ff0000000000000;
	max_f64	$d0, $d1, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_fmax];
	ret;
};


decl function &_gcc_acospi(arg_f64 %ret)(arg_f64 %x);


function &_gcc_acospi(arg_f64 %_gcc_acospi)(arg_f64 %x)
{

@_gcc_acospi_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d1, [%x];
	cmp_eq_b1_f64	$c0, $d1, 0D3ff0000000000000;
	cmov_b64	$d0, $c0, 0, 9221120237041090560;
	cmp_eq_b1_f64	$c0, $d1, 0Dbff0000000000000;
	cmov_b64	$d0, $c0, 4607182418800017408, $d0;
	abs_f64	$d3, $d1;
	sub_f64	$d4, 0D3ff0000000000000, $d3;
	mul_f64	$d2, $d3, $d3;
	mul_f64	$d5, $d4, 0D3fe0000000000000;
	mov_b64	$d4, $d3;
	shr_u64	$d4, $d4, 32;
	cvt_u32_u64	$s0, $d4;
	shr_s32	$s0, $s0, 20;
	add_u32	$s0, $s0, 4294966273;
	cmp_gt_b1_s32	$c0, $s0, -2;
	cmov_b64	$d4, $c0, $d5, $d2;
	sqrt_f64	$d2, $d5;
	mov_b64	$d5, $d1;
	shr_u64	$d9, $d5, 32;
	fma_f64	$d10, $d4, 0D3fbb1a422982ce76, 0Dbfee324ab418f78d;
	cmov_b64	$d3, $c0, $d2, $d3;
	mov_b64	$d5, $d2;
	and_b64	$d5, $d5, 18446744069414584320;
	neg_f64	$d6, $d5;
	fma_f64	$d6, $d6, $d5, $d4;
	add_f64	$d7, $d3, $d3;
	add_f64	$d8, $d2, $d5;
	cvt_u32_u64	$s1, $d9;
	fma_f64	$d9, $d4, $d10, 0D40062021571dccfc;
	fma_f64	$d9, $d4, $d9, 0Dc00a4646f903cdea;
	fma_f64	$d9, $d4, $d9, 0D3ff5d6b12001f228;
	fma_f64	$d10, $d4, 0D3f0951665d321061, 0D3f51e5f887a62135;
	fma_f64	$d10, $d4, $d10, 0Dbfac28d390c29690;
	fma_f64	$d10, $d4, $d10, 0D3fd1a2bec1b7ef59;
	fma_f64	$d10, $d4, $d10, 0Dbfdc7b297e269eac;
	fma_f64	$d10, $d4, $d10, 0D3fcd1e4180029834;
	div_f64	$d9, $d10, $d9;
	mul_f64	$d4, $d4, $d9;
	mul_f64	$d7, $d7, $d4;
	div_f64	$d6, $d6, $d8;
	fma_f64	$d6, 0D4000000000000000, $d6, $d7;
	fma_f64	$d5, 0D4000000000000000, $d5, $d6;
	div_f64	$d5, $d5, 0D400921fb54442d18;
	fma_f64	$d3, $d3, $d4, 0Dbc91a62633145c07;
	add_f64	$d2, $d2, $d3;
	div_f64	$d2, $d2, 0D400921fb54442d18;
	fma_f64	$d2, 0Dc000000000000000, $d2, 0D3ff0000000000000;
	cmp_lt_b1_s32	$c1, $s1, 0;
	cmov_b64	$d2, $c1, $d2, $d5;
	fma_f64	$d1, $d1, $d4, $d1;
	div_f64	$d1, $d1, 0D400921fb54442d18;
	sub_f64	$d1, 0D3fe0000000000000, $d1;
	cmov_b64	$d1, $c0, $d2, $d1;
	cmp_gt_b1_s32	$c0, $s0, -1;
	cmov_b64	$d0, $c0, $d0, $d1;
	cmp_lt_b1_s32	$c0, $s0, -56;
	cmov_b64	$d0, $c0, 4602678819172646912, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_acospi];
	ret;
};


decl function &_gcc_erfc(arg_f64 %ret)(arg_f64 %x);


function &_gcc_erfc(arg_f64 %_gcc_erfc)(arg_f64 %x)
{

@_gcc_erfc_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	mov_b64	$d1, $d0;
	and_b64	$d2, $d1, 9223372032559808512;
	mov_b64	$d5, $d2;
	mul_f64	$d2, $d5, $d5;
	sub_f64	$d4, 0Dbfe2000000000000, $d2;
	class_b1_f64	$c0, $d4, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s0, $s0, 1;
	mul_f64	$d2, $d4, 0D40571547652b82fe;
	cvt_s32_f64	$s1, $d2;
	cvt_near_f64_s32	$d2, $s1;
	fma_f64	$d3, 0Dbf862e42fefa0000, $d2, $d4;
	fma_f64	$d2, 0Dbd1cf79abc9e3b39, $d2, $d3;
	fma_f64	$d3, $d2, 0D3f56c16c16c16c17, 0D3f81111111111111;
	fma_f64	$d3, $d2, $d3, 0D3fa5555555555555;
	fma_f64	$d3, $d2, $d3, 0D3fc5555555555555;
	fma_f64	$d3, $d2, $d3, 0D3fe0000000000000;
	and_b32	$s3, $s1, 63;
	shr_s32	$s2, $s1, 6;
	fma_f64	$d3, $d2, $d3, 0D3ff0000000000000;
	cvt_u64_u32	$d6, $s3;
	mul_f64	$d2, $d2, $d3;
	shl_u64	$d7, $d6, 4;
	ld_v2_readonly_align(16)_f64	($d3, $d6), [&__math64_TWO_TO_JBY64_EP][$d7];
	add_f64	$d7, $d3, $d6;
	fma_f64	$d2, $d7, $d2, $d6;
	add_f64	$d7, $d2, $d3;
	cmp_eq_b1_s32	$c0, $s2, -1022;
	cmp_lt_b1_f64	$c1, $d7, 0D3ff0000000000000;
	and_b1	$c2, $c0, $c1;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmp_eq_b1_f64	$c1, $d7, 0D0000000000000000;
	or_b1	$c3, $c0, $c1;
	mul_f64	$d6, $d0, $d0;
	div_f64	$d8, 0D3ff0000000000000, $d6;
	and_b64	$d2, $d1, 9223372036854775807;
	mov_b64	$d3, $d2;
	add_f64	$d9, $d3, 0Dbff0000000000000;
	cmp_lt_b1_f64	$c1, $d3, 0D3ff4000000000000;
	cmov_b64	$d8, $c1, $d9, $d8;
	cmp_lt_b1_f64	$c0, $d3, 0D3feb000000000000;
	cmov_b64	$d6, $c0, $d6, $d8;
	fma_f64	$d8, $d6, 0Dc023a0efc69ac25c, 0Dc054526557e4d2f2;
	fma_f64	$d8, $d6, $d8, 0Dc067135cebccabb2;
	fma_f64	$d8, $d6, $d8, 0Dc0644cb184282266;
	fma_f64	$d8, $d6, $d8, 0Dc04f300ae4cba38d;
	fma_f64	$d8, $d6, $d8, 0Dc0251e0441b0e726;
	fma_f64	$d9, $d6, 0Dc03670e242712d62, 0D407da874e79fe763;
	fma_f64	$d9, $d6, $d9, 0D40a3f219cedf3be6;
	fma_f64	$d9, $d6, $d9, 0D40a8ffb7688c246a;
	fma_f64	$d9, $d6, $d9, 0D409802eb189d5118;
	fma_f64	$d9, $d6, $d9, 0D40745cae221b9f0a;
	fma_f64	$d10, $d6, $d8, 0Dbfe63416e4ba7360;
	fma_f64	$d8, $d6, 0Dc07e384e9bdc383f, 0Dc09004616a2e5992;
	fma_f64	$d8, $d6, $d8, 0Dc083ec881375f228;
	fma_f64	$d8, $d6, $d8, 0Dc064145d43c5ed98;
	fma_f64	$d8, $d6, $d8, 0Dc031c209555f995a;
	fma_f64	$d8, $d6, $d8, 0Dbfe993ba70c285de;
	fma_f64	$d11, $d6, 0Dbfaeeff2ee749a62, 0D401a47ef8e484a93;
	fma_f64	$d8, $d6, $d8, 0Dbf84341239e86f4a;
	fma_f64	$d10, $d6, $d10, 0Dbf843412600d6435;
	fma_f64	$d9, $d6, $d9, 0D403e568b261d5190;
	fma_f64	$d11, $d6, $d11, 0D405b28a3ee48ae2c;
	fma_f64	$d11, $d6, $d11, 0D407ad02157700314;
	fma_f64	$d11, $d6, $d11, 0D40842b1921ec2868;
	fma_f64	$d11, $d6, $d11, 0D407b290dd58a1a71;
	fma_f64	$d11, $d6, $d11, 0D4061350c526ae721;
	fma_f64	$d11, $d6, $d11, 0D4033a6b9bd707687;
	cmp_lt_b1_f64	$c4, $d3, 0D4006db6d00000000;
	cmov_b64	$d9, $c4, $d11, $d9;
	cmov_b64	$d11, $c4, $d10, $d8;
	mul_f64	$d8, $d7, 0D4340000000000000;
	mov_b64	$d10, $d8;
	shr_u64	$d8, $d10, 52;
	cvt_u32_u64	$s3, $d8;
	and_b32	$s3, $s3, 2047;
	add_u32	$s3, $s3, 4294967243;
	mov_b64	$d8, $d7;
	shr_u64	$d12, $d8, 52;
	cvt_u32_u64	$s4, $d12;
	and_b32	$s4, $s4, 2047;
	cmp_eq_b1_s32	$c4, $s4, 0;
	cmov_b32	$s6, $c4, $s3, $s4;
	cmov_b64	$d10, $c4, $d10, $d8;
	class_b1_f64	$c4, $d7, 516;
	cvt_u32_b1	$s3, $c4;
	and_b32	$s4, $s3, 1;
	cvt_u32_b1	$s5, $c3;
	cmp_lt_b1_s32	$c3, $s2, -1022;
	or_b1	$c2, $c3, $c2;
	fma_f64	$d12, $d6, 0Dbef8ead6120016ac, 0Dbf77a291236668e4;
	fma_f64	$d12, $d6, $d12, 0Dbf9d2a51dbd7194f;
	fma_f64	$d13, $d6, 0Dbf61bf380a96073f, 0D3fa22a36599795eb;
	fma_f64	$d14, $d6, $d13, 0Dbfbc63983d3e28ec;
	fma_f64	$d15, $d6, $d12, 0Dbfd4cd7d691cb913;
	fma_f64	$d12, $d6, 0D3f888b545735151d, 0D3f8bedc26b51dd1c;
	fma_f64	$d13, $d6, $d12, 0D3fc02660e763351f;
	fma_f64	$d12, $d6, 0Dbed09c4342a26120, 0D3f215dc9221c1a10;
	fma_f64	$d13, $d6, $d13, 0D3fb2635cd99fe9a7;
	add_f64	$d16, $d5, $d3;
	fma_f64	$d12, $d6, $d12, 0D3f74d022c4d36b0f;
	fma_f64	$d15, $d6, $d15, 0D3fc06eba8214db68;
	fma_f64	$d14, $d6, $d14, 0D3fd45fca805120e4;
	fma_f64	$d14, $d6, $d14, 0Dbfd7d240fbb8c3f1;
	sub_f64	$d5, $d5, $d3;
	fma_f64	$d17, $d6, $d14, 0D3fda8d00ad92b34d;
	mul_f64	$d14, $d5, $d16;
	fma_f64	$d5, $d6, $d17, 0Dbf6359b8bef77538;
	cmov_b64	$d5, $c1, $d5, $d11;
	cmov_b64	$d5, $c0, $d15, $d5;
	fma_f64	$d11, $d6, $d13, 0D3fe14af092eb6f33;
	fma_f64	$d11, $d6, $d11, 0D3fbb3e6618eee323;
	cmov_b64	$d9, $c1, $d11, $d9;
	fma_f64	$d11, $d6, $d12, 0D3fb0a54c5536ceba;
	fma_f64	$d11, $d6, $d11, 0D3fd97779cddadc09;
	cmov_b64	$d9, $c0, $d11, $d9;
	fma_f64	$d6, $d6, $d9, 0D3ff0000000000000;
	div_f64	$d5, $d5, $d6;
	add_f64	$d6, $d14, $d5;
	class_b1_f64	$c3, $d6, 3;
	cvt_u32_b1	$s3, $c3;
	and_b32	$s3, $s3, 1;
	and_b64	$d9, $d10, 9227875636482146303;
	add_u32	$s6, $s6, $s2;
	max_s32	$s6, $s6, -2047;
	min_s32	$s6, $s6, 2047;
	cvt_u64_u32	$d10, $s6;
	shl_u64	$d10, $d10, 52;
	or_b64	$d10, $d9, $d10;
	add_u32	$s7, $s6, 53;
	cvt_u64_u32	$d11, $s7;
	shl_u64	$d11, $d11, 52;
	or_b64	$d9, $d9, $d11;
	mul_f64	$d9, $d9, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c3, $s6, 0;
	cmov_b64	$d9, $c3, $d10, $d9;
	and_b64	$d8, $d8, 9223372036854775808;
	or_b64	$d10, $d8, 9218868437227405312;
	cmp_eq_b1_s32	$c3, $s6, 2047;
	cmov_b64	$d9, $c3, $d10, $d9;
	cmp_lt_b1_s32	$c3, $s6, -53;
	cmov_b64	$d8, $c3, $d8, $d9;
	or_b32	$s4, $s5, $s4;
	cmp_ne_b1_s32	$c3, $s4, 0;
	cmov_b64	$d8, $c3, $d7, $d8;
	shr_s32	$s1, $s1, 8;
	sub_u32	$s4, 1023, $s1;
	add_u32	$s2, $s4, $s2;
	cvt_u64_u32	$d9, $s2;
	shl_u64	$d9, $d9, 52;
	add_u32	$s1, $s1, 1023;
	cvt_u64_u32	$d10, $s1;
	shl_u64	$d10, $d10, 52;
	mul_f64	$d7, $d10, $d7;
	mul_f64	$d7, $d9, $d7;
	cmov_b64	$d8, $c2, $d7, $d8;
	mul_f64	$d7, $d6, 0D40571547652b82fe;
	cvt_s32_f64	$s1, $d7;
	cvt_near_f64_s32	$d7, $s1;
	fma_f64	$d9, 0Dbf862e42fefa0000, $d7, $d6;
	fma_f64	$d7, 0Dbd1cf79abc9e3b39, $d7, $d9;
	fma_f64	$d9, $d7, 0D3f56c16c16c16c17, 0D3f81111111111111;
	fma_f64	$d9, $d7, $d9, 0D3fa5555555555555;
	fma_f64	$d9, $d7, $d9, 0D3fc5555555555555;
	fma_f64	$d9, $d7, $d9, 0D3fe0000000000000;
	and_b32	$s4, $s1, 63;
	shr_s32	$s2, $s1, 6;
	fma_f64	$d9, $d7, $d9, 0D3ff0000000000000;
	cvt_u64_u32	$d10, $s4;
	mul_f64	$d7, $d7, $d9;
	shl_u64	$d11, $d10, 4;
	ld_v2_readonly_align(16)_f64	($d9, $d10), [&__math64_TWO_TO_JBY64_EP][$d11];
	add_f64	$d11, $d9, $d10;
	fma_f64	$d7, $d11, $d7, $d10;
	add_f64	$d7, $d7, $d9;
	cmp_eq_b1_s32	$c2, $s2, -1022;
	cmp_lt_b1_f64	$c3, $d7, 0D3ff0000000000000;
	and_b1	$c2, $c2, $c3;
	cmp_eq_b1_s32	$c3, $s2, 0;
	cmp_eq_b1_f64	$c4, $d7, 0D0000000000000000;
	or_b1	$c3, $c3, $c4;
	cvt_b1_u32	$c4, $s0;
	cmov_b64	$d9, $c4, $d4, $d8;
	mul_f64	$d8, $d7, 0D4340000000000000;
	mov_b64	$d10, $d8;
	shr_u64	$d8, $d10, 52;
	cvt_u32_u64	$s0, $d8;
	and_b32	$s0, $s0, 2047;
	add_u32	$s0, $s0, 4294967243;
	mov_b64	$d8, $d7;
	shr_u64	$d11, $d8, 52;
	cvt_u32_u64	$s4, $d11;
	and_b32	$s4, $s4, 2047;
	cmp_eq_b1_s32	$c4, $s4, 0;
	cmov_b64	$d10, $c4, $d10, $d8;
	cmov_b32	$s5, $c4, $s0, $s4;
	class_b1_f64	$c4, $d7, 516;
	cvt_u32_b1	$s0, $c4;
	and_b32	$s0, $s0, 1;
	cmp_gt_b1_f64	$c4, $d4, 0D40862e42fefa39ef;
	cmov_b64	$d9, $c4, 9218868437227405312, $d9;
	cvt_u32_b1	$s4, $c3;
	cmp_lt_b1_s32	$c3, $s2, -1022;
	or_b1	$c2, $c3, $c2;
	cmp_lt_b1_f64	$c3, $d4, 0Dc0874910d52d3051;
	cmov_b64	$d4, $c3, 0, $d9;
	and_b64	$d9, $d10, 9227875636482146303;
	add_u32	$s5, $s5, $s2;
	max_s32	$s5, $s5, -2047;
	min_s32	$s5, $s5, 2047;
	cvt_u64_u32	$d10, $s5;
	shl_u64	$d10, $d10, 52;
	or_b64	$d10, $d9, $d10;
	add_u32	$s6, $s5, 53;
	cvt_u64_u32	$d11, $s6;
	shl_u64	$d11, $d11, 52;
	or_b64	$d9, $d9, $d11;
	mul_f64	$d9, $d9, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c3, $s5, 0;
	cmov_b64	$d9, $c3, $d10, $d9;
	and_b64	$d8, $d8, 9223372036854775808;
	or_b64	$d10, $d8, 9218868437227405312;
	cmp_eq_b1_s32	$c3, $s5, 2047;
	cmov_b64	$d9, $c3, $d10, $d9;
	cmp_lt_b1_s32	$c3, $s5, -53;
	cmov_b64	$d8, $c3, $d8, $d9;
	or_b32	$s0, $s4, $s0;
	cmp_ne_b1_s32	$c3, $s0, 0;
	cmov_b64	$d8, $c3, $d7, $d8;
	shr_s32	$s0, $s1, 8;
	sub_u32	$s1, 1023, $s0;
	add_u32	$s1, $s1, $s2;
	cvt_u64_u32	$d9, $s1;
	shl_u64	$d9, $d9, 52;
	add_u32	$s0, $s0, 1023;
	cvt_u64_u32	$d10, $s0;
	shl_u64	$d10, $d10, 52;
	mul_f64	$d7, $d10, $d7;
	mul_f64	$d7, $d9, $d7;
	cmov_b64	$d7, $c2, $d7, $d8;
	cvt_b1_u32	$c2, $s3;
	cmov_b64	$d7, $c2, $d6, $d7;
	cmp_gt_b1_f64	$c2, $d6, 0D40862e42fefa39ef;
	cmov_b64	$d7, $c2, 9218868437227405312, $d7;
	cmp_lt_b1_f64	$c2, $d6, 0Dc0874910d52d3051;
	cmov_b64	$d6, $c2, 0, $d7;
	sub_f64	$d7, 0D3fc3d4fa80000000, $d5;
	add_f64	$d8, $d5, 0D3feb0ac160000000;
	add_f64	$d8, $d8, 0D3ff0000000000000;
	cmp_ne_b1_s64	$c2, $d1, $d2;
	cmov_b64	$d1, $c2, $d8, $d7;
	mul_f64	$d4, $d4, $d6;
	div_f64	$d3, $d4, $d3;
	sub_f64	$d4, 0D4000000000000000, $d3;
	cmov_b64	$d3, $c2, $d4, $d3;
	cmov_b64	$d1, $c1, $d1, $d3;
	sub_f64	$d3, 0D3ff0000000000000, $d0;
	neg_f64	$d4, $d0;
	fma_f64	$d3, $d4, $d5, $d3;
	cmov_b64	$d1, $c0, $d3, $d1;
	cmp_ge_b1_f64	$c0, $d0, 0D403c000000000000;
	cmov_b64	$d1, $c0, 0, $d1;
	cmp_le_b1_f64	$c0, $d0, 0Dc018000000000000;
	cmov_b64	$d1, $c0, 4611686018427387904, $d1;
	cmp_gt_b1_u64	$c0, $d2, 9218868437227405312;
	cmov_b64	$d0, $c0, $d0, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_erfc];
	ret;
};


decl function &_gcc_fdim(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y);


function &_gcc_fdim(arg_f64 %_gcc_fdim)(
	arg_f64 %x,
	arg_f64 %y)
{

@_gcc_fdim_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%y];
	ld_arg_align(8)_f64	$d1, [%x];
	class_b1_f64	$c0, $d1, 3;
	cvt_u32_b1	$s0, $c0;
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s1, $c0;
	or_b32	$s0, $s1, $s0;
	cmp_gt_b1_f64	$c0, $d1, $d0;
	cvt_u32_b1	$s1, $c0;
	sub_f64	$d0, $d1, $d0;
	neg_s32	$s1, $s1;
	cvt_s64_s32	$d1, $s1;
	and_b64	$d0, $d1, $d0;
	and_b32	$s0, $s0, 1;
	neg_s32	$s0, $s0;
	cvt_s64_s32	$d1, $s0;
	and_b64	$d1, $d1, 9221120237041090560;
	or_b64	$d0, $d1, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_fdim];
	ret;
};


decl function &_gcc_sin(arg_f64 %ret)(arg_f64 %x);


function &_gcc_sin(arg_f64 %_gcc_sin)(arg_f64 %x)
{

@_gcc_sin_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	abs_f64	$d1, $d0;
	cmp_geu_b1_f64	$c0, $d1, 0D42e0000000000000;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	fma_f64	$d2, $d1, 0D3fe45f306dc9c883, 0D3fe0000000000000;
	trunc_f64	$d2, $d2;
	mul_f64	$d3, $d2, 0D3ff921fb54442d18;
	fma_f64	$d4, 0Dbff921fb54442d18, $d2, $d3;
	mul_f64	$d5, $d2, 0Dbc91a62633145c06;
	add_f64	$d3, $d4, $d5;
	sub_f64	$d4, $d3, $d4;
	sub_f64	$d5, $d5, $d4;
	mul_f64	$d6, $d2, 0Dbff921fb54442d18;
	add_f64	$d4, $d6, $d3;
	sub_f64	$d6, $d4, $d6;
	mul_f64	$d7, $d2, 0Db94c1cd129024e08;
	sub_f64	$d3, $d3, $d6;
	add_f64	$d5, $d7, $d5;
	mul_f64	$d6, $d2, 0D3c91a62633145c06;
	fma_f64	$d6, 0Dbc91a62633145c06, $d2, $d6;
	add_f64	$d5, $d6, $d5;
	mul_f64	$d6, $d2, 0D394c1cd129024e08;
	fma_f64	$d6, 0Db94c1cd129024e08, $d2, $d6;
	add_f64	$d5, $d6, $d5;
	add_f64	$d6, $d3, $d5;
	add_f64	$d4, $d1, $d4;
	cvt_s64_f64	$d1, $d2;
	cvt_u32_u64	$s0, $d1;
	add_f64	$d1, $d4, $d6;
	sub_f64	$d2, $d1, $d4;
	sub_f64	$d2, $d6, $d2;
	sub_f64	$d3, $d6, $d3;
	sub_f64	$d3, $d5, $d3;
	add_f64	$d2, $d3, $d2;
	br	@BB0_3;

@BB0_2:
	mov_b64	$d2, $d1;
	shr_s64	$d2, $d2, 52;
	cvt_u32_u64	$s0, $d2;
	add_u32	$s0, $s0, 4294966273;
	shr_s32	$s0, $s0, 3;
	add_u32	$s0, $s0, 17;
	max_s32	$s5, 23, $s0;
	sub_u32	$s0, 150, $s5;
	bitextract_u32	$s9, $s0, 2, 2;
	cmp_eq_b1_s32	$c0, $s9, 1;
	cmov_b32	$s7, $c0, 4294967295, 0;
	and_b32	$s1, $s0, 4294967280;
	cvt_s64_s32	$d2, $s1;
	ld_v4_readonly_align(16)_u32	($s10, $s11, $s8, $s2), [&__math64_PIBITS][$d2];
	ld_v4_readonly_align(16)_u32	($s1, $s3, $s6, $s4), [&__math64_PIBITS][$d2+16];
	cmp_ne_b1_s32	$c0, $s7, 0;
	cmov_b32	$s13, $c0, $s1, $s2;
	cmov_b32	$s7, $c0, $s4, $s6;
	cmov_b32	$s12, $c0, $s6, $s3;
	cmov_b32	$s15, $c0, $s3, $s1;
	cmov_b32	$s16, $c0, $s2, $s8;
	cmov_b32	$s18, $c0, $s8, $s11;
	cmov_b32	$s19, $c0, $s11, $s10;
	cmp_eq_b1_s32	$c0, $s9, 2;
	cmov_b32	$s17, $c0, 4294967295, 0;
	cmp_eq_b1_s32	$c0, $s9, 3;
	cmov_b32	$s14, $c0, 4294967295, 0;
	ld_v2_readonly_align(16)_u32	($s10, $s11), [&__math64_PIBITS][$d2+32];
	cmp_ne_b1_s32	$c0, $s17, 0;
	cmov_b32	$s17, $c0, $s3, $s13;
	cmov_b32	$s8, $c0, $s8, $s19;
	cmov_b32	$s13, $c0, $s2, $s18;
	cmov_b32	$s16, $c0, $s1, $s16;
	cmov_b32	$s15, $c0, $s6, $s15;
	cmov_b32	$s12, $c0, $s4, $s12;
	cmov_b32	$s18, $c0, $s10, $s7;
	shl_u32	$s5, $s5, 3;
	or_b32	$s7, $s5, 2;
	cmp_gt_b1_s32	$c0, $s7, 1018;
	cmov_b32	$s9, $c0, 136, 0;
	cmov_b64	$d2, $c0, 3994692869477629952, 4607182418800017408;
	cmp_ne_b1_s32	$c0, $s14, 0;
	cmov_b32	$s5, $c0, $s6, $s17;
	cmov_b32	$s11, $c0, $s11, $s18;
	cmov_b32	$s10, $c0, $s10, $s12;
	cmov_b32	$s4, $c0, $s4, $s15;
	cmov_b32	$s6, $c0, $s3, $s16;
	cmov_b32	$s1, $c0, $s1, $s13;
	cmov_b32	$s2, $c0, $s2, $s8;
	bytealign_b32	$s3, $s5, $s4, $s0;
	bytealign_b32	$s4, $s4, $s10, $s0;
	shr_u32	$s12, $s4, 16;
	bytealign_b32	$s8, $s10, $s11, $s0;
	shl_u32	$s10, $s8, 16;
	or_b32	$s10, $s10, $s12;
	cvt_u64_u32	$d3, $s3;
	and_b32	$s4, $s4, 65535;
	sub_u32	$s3, $s9, $s7;
	shl_u32	$s3, $s3, 20;
	add_u32	$s7, $s3, 1227882496;
	or_b32	$s4, $s4, $s7;
	pack_u32x2_u32	$d4, u32x2(0,0), $s4, 1;
	or_b64	$d3, $d3, $d4;
	bytealign_b32	$s4, $s1, $s6, $s0;
	mul_f64	$d1, $d1, $d2;
	cvt_u64_u32	$d2, $s10;
	shr_u32	$s9, $s8, 16;
	add_u32	$s8, $s3, 1278214144;
	or_b32	$s9, $s9, $s8;
	pack_u32x2_u32	$d4, u32x2(0,0), $s9, 1;
	or_b64	$d2, $d2, $d4;
	pack_u32x2_u32	$d4, u32x2(0,0), $s8, 1;
	sub_f64	$d4, $d2, $d4;
	mul_f64	$d7, $d1, $d4;
	mov_b64	$d2, $d3;
	pack_u32x2_u32	$d3, u32x2(0,0), $s7, 1;
	sub_f64	$d2, $d2, $d3;
	mul_f64	$d3, $d1, $d2;
	shr_u32	$s7, $s4, 16;
	bytealign_b32	$s5, $s6, $s5, $s0;
	shl_u32	$s6, $s5, 16;
	add_f64	$d5, $d3, $d7;
	or_b32	$s6, $s6, $s7;
	neg_f64	$d6, $d7;
	fma_f64	$d6, $d4, $d1, $d6;
	sub_f64	$d4, $d5, $d7;
	cvt_u64_u32	$d7, $s6;
	shr_u32	$s6, $s5, 16;
	add_u32	$s5, $s3, 1177550848;
	or_b32	$s6, $s5, $s6;
	pack_u32x2_u32	$d8, u32x2(0,0), $s6, 1;
	sub_f64	$d10, $d3, $d4;
	or_b64	$d4, $d7, $d8;
	add_f64	$d11, $d6, $d10;
	pack_u32x2_u32	$d7, u32x2(0,0), $s5, 1;
	sub_f64	$d7, $d4, $d7;
	mul_f64	$d12, $d1, $d7;
	add_f64	$d4, $d12, $d11;
	mul_f64	$d5, $d5, 0D3f50000000000000;
	fract_f64	$d5, $d5;
	mul_f64	$d5, $d5, 0D4090000000000000;
	add_f64	$d8, $d5, $d4;
	cmp_lt_b1_f64	$c0, $d8, 0D0000000000000000;
	cmov_b64	$d8, $c0, 4652218415073722368, 0;
	add_f64	$d8, $d5, $d8;
	add_f64	$d5, $d4, $d8;
	fract_f64	$d9, $d5;
	sub_f64	$d5, $d5, $d9;
	sub_f64	$d9, $d8, $d5;
	add_f64	$d8, $d4, $d9;
	cmp_ge_b1_f64	$c0, $d8, 0D3fe0000000000000;
	cvt_u32_b1	$s5, $c0;
	bytealign_b32	$s0, $s2, $s1, $s0;
	cvt_u64_u32	$d13, $s0;
	and_b32	$s1, $s4, 65535;
	add_u32	$s0, $s3, 1127219200;
	or_b32	$s1, $s0, $s1;
	pack_u32x2_u32	$d14, u32x2(0,0), $s1, 1;
	or_b64	$d13, $d13, $d14;
	sub_f64	$d14, $d4, $d11;
	sub_f64	$d14, $d12, $d14;
	sub_f64	$d6, $d11, $d6;
	sub_f64	$d10, $d10, $d6;
	neg_f64	$d11, $d3;
	neg_f64	$d6, $d12;
	add_f64	$d3, $d10, $d14;
	fma_f64	$d10, $d2, $d1, $d11;
	mov_b64	$d2, $d13;
	pack_u32x2_u32	$d11, u32x2(0,0), $s0, 1;
	sub_f64	$d2, $d2, $d11;
	mul_f64	$d11, $d1, $d2;
	neg_f64	$d12, $d11;
	fma_f64	$d2, $d2, $d1, $d12;
	fma_f64	$d6, $d7, $d1, $d6;
	add_f64	$d7, $d10, $d3;
	sub_f64	$d1, $d7, $d10;
	sub_f64	$d3, $d3, $d1;
	add_f64	$d1, $d11, $d7;
	sub_f64	$d7, $d1, $d7;
	sub_f64	$d7, $d11, $d7;
	add_f64	$d10, $d3, $d7;
	sub_f64	$d3, $d8, $d9;
	sub_f64	$d7, $d4, $d3;
	add_f64	$d3, $d1, $d7;
	cvt_near_f32_s32	$s0, $s5;
	cvt_ftz_f64_f32	$d4, $s0;
	sub_f64	$d8, $d8, $d4;
	add_f64	$d4, $d3, $d8;
	add_f64	$d6, $d6, $d10;
	add_f64	$d2, $d2, $d6;
	cvt_ftz_near_f32_f64	$s0, $d5;
	cvt_ftz_s32_f32	$s0, $s0;
	mul_f64	$d5, $d4, 0Dbff921fb54442d18;
	fma_f64	$d5, $d4, 0D3ff921fb54442d18, $d5;
	fma_f64	$d5, $d4, 0D3c91a62633145c06, $d5;
	sub_f64	$d6, $d3, $d7;
	sub_f64	$d1, $d1, $d6;
	add_f64	$d1, $d2, $d1;
	sub_f64	$d2, $d4, $d8;
	sub_f64	$d2, $d3, $d2;
	add_f64	$d1, $d1, $d2;
	fma_f64	$d2, $d1, 0D3ff921fb54442d18, $d5;
	mul_f64	$d3, $d4, 0D3ff921fb54442d18;
	add_u32	$s0, $s5, $s0;
	add_f64	$d1, $d2, $d3;
	sub_f64	$d3, $d1, $d3;
	sub_f64	$d2, $d2, $d3;

@BB0_3:
	class_b1_f64	$c0, $d0, 516;
	cvt_u32_b1	$s1, $c0;
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s2, $c0;
	or_b32	$s1, $s2, $s1;
	and_b32	$s2, $s0, 2;
	cmp_lt_b1_f64	$c0, $d0, 0D0000000000000000;
	cmp_gt_b1_u32	$c1, $s2, 1;
	xor_b1	$c0, $c1, $c0;
	mul_f64	$d0, $d1, $d1;
	mul_f64	$d4, $d0, 0D3fe0000000000000;
	sub_f64	$d3, 0D3ff0000000000000, $d4;
	sub_f64	$d5, 0D3ff0000000000000, $d3;
	sub_f64	$d4, $d5, $d4;
	fma_f64	$d4, $d1, $d2, $d4;
	fma_f64	$d5, 0Dbda907db46cc5e42, $d0, 0D3e21eeb69037ab78;
	fma_f64	$d5, $d5, $d0, 0Dbe927e4fa17f65f6;
	fma_f64	$d5, $d5, $d0, 0D3efa01a019f4ec90;
	fma_f64	$d5, $d5, $d0, 0Dbf56c16c16c16967;
	fma_f64	$d5, $d5, $d0, 0D3fa5555555555555;
	mul_f64	$d6, $d0, $d0;
	fma_f64	$d4, $d5, $d6, $d4;
	fma_f64	$d5, 0D3de5e0b2f9a43bb8, $d0, 0Dbe5ae600b42fdfa7;
	fma_f64	$d5, $d5, $d0, 0D3ec71de3796cde01;
	fma_f64	$d5, $d5, $d0, 0Dbf2a01a019e83e5c;
	and_b32	$s0, $s0, 1;
	add_f64	$d3, $d3, $d4;
	fma_f64	$d5, $d5, $d0, 0D3f81111111110bb3;
	mul_f64	$d4, $d1, $d0;
	neg_f64	$d4, $d4;
	mul_f64	$d6, $d2, 0D3fe0000000000000;
	fma_f64	$d5, $d4, $d5, $d6;
	neg_f64	$d2, $d2;
	fma_f64	$d0, $d5, $d0, $d2;
	fma_f64	$d0, $d4, 0Dbfc5555555555555, $d0;
	sub_f64	$d0, $d1, $d0;
	cvt_b1_u32	$c1, $s0;
	cmov_b64	$d0, $c1, $d3, $d0;
	cvt_u32_b1	$s2, $c0;
	and_b32	$s0, $s1, 1;
	mov_b64	$d1, $d0;
	shl_u32	$s1, $s2, 31;
	and_b64	$d0, $d1, 4294967295;
	shr_u64	$d1, $d1, 32;
	cvt_u32_u64	$s2, $d1;
	xor_b32	$s1, $s2, $s1;
	pack_u32x2_u32	$d1, u32x2(0,0), $s1, 1;
	or_b64	$d0, $d0, $d1;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d0, $c0, 9221120237041090560, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_sin];
	ret;
};


decl function &_gcc_asinpi(arg_f64 %ret)(arg_f64 %x);


function &_gcc_asinpi(arg_f64 %_gcc_asinpi)(arg_f64 %x)
{

@_gcc_asinpi_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	abs_f64	$d1, $d0;
	sub_f64	$d3, 0D3ff0000000000000, $d1;
	mul_f64	$d2, $d1, $d1;
	mul_f64	$d3, $d3, 0D3fe0000000000000;
	mov_b64	$d4, $d1;
	shr_u64	$d4, $d4, 32;
	cvt_u32_u64	$s0, $d4;
	shr_s32	$s0, $s0, 20;
	add_u32	$s0, $s0, 4294966273;
	cmp_gt_b1_s32	$c0, $s0, -2;
	cmov_b64	$d2, $c0, $d3, $d2;
	fma_f64	$d3, $d2, 0D3fbb1a422982ce76, 0Dbfee324ab418f78d;
	fma_f64	$d3, $d2, $d3, 0D40062021571dccfc;
	fma_f64	$d3, $d2, $d3, 0Dc00a4646f903cdea;
	fma_f64	$d3, $d2, $d3, 0D3ff5d6b12001f228;
	fma_f64	$d4, $d2, 0D3f0951665d321061, 0D3f51e5f887a62135;
	fma_f64	$d4, $d2, $d4, 0Dbfac28d390c29690;
	fma_f64	$d4, $d2, $d4, 0D3fd1a2bec1b7ef59;
	fma_f64	$d4, $d2, $d4, 0Dbfdc7b297e269eac;
	fma_f64	$d4, $d2, $d4, 0D3fcd1e4180029834;
	div_f64	$d3, $d4, $d3;
	sqrt_f64	$d4, $d2;
	mov_b64	$d5, $d4;
	and_b64	$d5, $d5, 18446744069414584320;
	mul_f64	$d3, $d2, $d3;
	neg_f64	$d6, $d5;
	fma_f64	$d2, $d6, $d5, $d2;
	add_f64	$d6, $d4, $d5;
	div_f64	$d2, $d2, $d6;
	fma_f64	$d2, 0Dc000000000000000, $d2, 0D3c91a62633145c07;
	add_f64	$d4, $d4, $d4;
	neg_f64	$d2, $d2;
	fma_f64	$d2, $d4, $d3, $d2;
	fma_f64	$d4, 0Dc000000000000000, $d5, 0D3fe921fb54442d18;
	sub_f64	$d2, $d2, $d4;
	sub_f64	$d2, 0D3fe921fb54442d18, $d2;
	fma_f64	$d3, $d1, $d3, $d1;
	cmov_b64	$d2, $c0, $d2, $d3;
	cmp_lt_b1_s32	$c0, $s0, -28;
	cmov_b64	$d2, $c0, $d1, $d2;
	div_f64	$d2, $d2, 0D400921fb54442d18;
	cmp_gt_b1_s32	$c0, $s0, -1;
	cmov_b64	$d2, $c0, 9221120237041090560, $d2;
	cmp_eq_b1_f64	$c0, $d1, 0D3ff0000000000000;
	cmov_b64	$d1, $c0, 4602678819172646912, $d2;
	shr_u64	$d0, $d0, 32;
	cvt_u32_u64	$s0, $d0;
	neg_f64	$d0, $d1;
	cmp_lt_b1_s32	$c0, $s0, 0;
	cmov_b64	$d0, $c0, $d0, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_asinpi];
	ret;
};


decl function &_gcc_mad(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y,
	arg_f64 %z);


function &_gcc_mad(arg_f64 %_gcc_mad)(
	arg_f64 %x,
	arg_f64 %y,
	arg_f64 %z)
{

@_gcc_mad_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%z];
	ld_arg_align(8)_f64	$d1, [%y];
	ld_arg_align(8)_f64	$d2, [%x];
	nfma_f64	$d0, $d2, $d1, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_mad];
	ret;
};


decl function &_gcc_logb(arg_f64 %ret)(arg_f64 %x);


function &_gcc_logb(arg_f64 %_gcc_logb)(arg_f64 %x)
{

@_gcc_logb_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	mov_b64	$d2, $d0;
	and_b64	$d0, $d2, 9223372036854775807;
	mov_b64	$d1, $d0;
	shr_u64	$d3, $d0, 52;
	cvt_u32_u64	$s0, $d3;
	add_u32	$s0, $s0, 4294966273;
	cvt_near_f64_s32	$d3, $s0;
	cmp_gt_b1_u64	$c0, $d0, 9218868437227405311;
	cmov_b64	$d1, $c0, $d1, $d3;
	cvt_u32_u64	$s0, $d2;
	firstbit_u32_u32	$s1, $s0;
	add_u32	$s1, $s1, 32;
	cmp_eq_b1_s32	$c0, $s0, 0;
	cmov_b32	$s0, $c0, 64, $s1;
	shr_u64	$d2, $d0, 32;
	cvt_u32_u64	$s1, $d2;
	firstbit_u32_u32	$s2, $s1;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b32	$s0, $c0, $s0, $s2;
	cvt_u64_u32	$d2, $s0;
	sub_u64	$d2, 18446744073709550605, $d2;
	cvt_near_f64_s64	$d2, $d2;
	cmp_lt_b1_u64	$c0, $d0, 4503599627370496;
	cmov_b64	$d1, $c0, $d2, $d1;
	cmp_eq_b1_s64	$c0, $d0, 0;
	cmov_b64	$d0, $c0, 18442240474082181120, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_logb];
	ret;
};


decl function &_gcc_rootn(arg_f64 %ret)(
	arg_f64 %x,
	arg_u32 %ny);


function &_gcc_rootn(arg_f64 %_gcc_rootn)(
	arg_f64 %x,
	arg_u32 %ny)
{

@_gcc_rootn_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	and_b64	$d1, $d0, 9223372036854775807;
	cmp_ne_b1_s64	$c0, $d1, $d0;
	cvt_u32_b1	$s2, $c0;
	ld_arg_align(4)_u32	$s0, [%ny];
	and_b32	$s1, $s2, $s0;
	cmp_ne_b1_s32	$c0, $s1, 0;
	cmov_b64	$d2, $c0, 13830554455654793216, 4607182418800017408;
	cvt_near_f64_s32	$d5, $s0;
	div_f64	$d3, 0D3ff0000000000000, $d5;
	mov_b64	$d6, $d3;
	and_b64	$d3, $d6, 9223372036854775807;
	cmp_eq_b1_s64	$c2, $d3, $d6;
	cmp_ne_b1_s64	$c0, $d3, $d6;
	cmp_eq_b1_s64	$c1, $d1, 0;
	and_b1	$c4, $c0, $c1;
	and_b1	$c5, $c1, $c2;
	cvt_u32_b1	$s1, $c0;
	cmp_eq_b1_s64	$c1, $d0, 9218868437227405312;
	and_b1	$c0, $c0, $c1;
	and_b1	$c1, $c1, $c2;
	cmp_eq_b1_s64	$c6, $d0, -4503599627370496;
	and_b1	$c2, $c6, $c2;
	and_b32	$s5, $s0, 1;
	cvt_b1_u32	$c3, $s5;
	and_b1	$c2, $c2, $c3;
	and_b1	$c3, $c5, $c3;
	cvt_u32_b1	$s3, $c5;
	cmp_eq_b1_s64	$c5, $d1, $d0;
	cmov_b64	$d3, $c5, 0, 9223372036854775808;
	cmov_b64	$d4, $c5, 9218868437227405312, 18442240474082181120;
	cvt_u32_b1	$s6, $c4;
	cvt_u32_b1	$s4, $c6;
	and_b64	$d7, $d0, 4503599627370495;
	or_b64	$d8, $d7, 4607182418800017408;
	add_f64	$d8, $d8, 0Dbff0000000000000;
	and_b64	$d9, $d8, 4503599627370495;
	shr_u64	$d10, $d1, 52;
	cvt_u32_u64	$s7, $d10;
	cmp_eq_b1_s32	$c4, $s7, 0;
	cmov_b64	$d7, $c4, $d9, $d7;
	add_u32	$s7, $s7, 4294966273;
	bitextract_u64	$d8, $d8, 52, 11;
	add_u64	$d8, $d8, 4294965251;
	cvt_u32_u64	$s8, $d8;
	cmov_b32	$s7, $c4, $s8, $s7;
	mov_b64	$d9, $d5;
	and_b64	$d8, $d7, 4486007441326080;
	shl_u64	$d10, $d7, 1;
	and_b64	$d9, $d9, 18446744073708503040;
	and_b64	$d11, $d10, 17592186044416;
	mov_b64	$d10, $d9;
	add_u64	$d9, $d11, $d8;
	cvt_s32_f64	$s8, $d10;
	and_b64	$d6, $d6, 18446744073575333888;
	neg_f64	$d8, $d10;
	or_b64	$d10, $d9, 4602678819172646912;
	fma_f64	$d8, $d8, $d6, 0D3ff0000000000000;
	sub_u32	$s8, $s0, $s8;
	mov_b64	$d12, $d10;
	or_b64	$d7, $d7, 4602678819172646912;
	sub_f64	$d10, $d12, $d7;
	shr_u64	$d7, $d9, 40;
	ld_v2_readonly_align(16)_f64	($d9, $d11), [&__math64_LOG_F_INV_TBL][$d7];
	add_f64	$d11, $d9, $d11;
	mul_f64	$d9, $d10, $d11;
	neg_f64	$d12, $d12;
	ld_v2_readonly_align(16)_f64	($d14, $d13), [&__math64_POWLOG_TBL][$d7];
	cvt_near_f64_s32	$d7, $s8;
	neg_f64	$d7, $d7;
	fma_f64	$d15, $d7, $d6, $d8;
	cvt_near_f64_s32	$d8, $s7;
	fma_f64	$d7, $d8, 0D3fe62e42e0000000, $d14;
	fma_f64	$d8, $d8, 0D3e6efa39ef35793c, $d13;
	div_f64	$d5, $d15, $d5;
	and_b64	$d9, $d9, 18446744073575333888;
	fma_f64	$d10, $d12, $d9, $d10;
	mul_f64	$d10, $d10, $d11;
	add_f64	$d11, $d10, $d9;
	fma_f64	$d12, $d11, 0D3fc2492492492492, 0D3fc5555555555555;
	fma_f64	$d12, $d11, $d12, 0D3fc999999999999a;
	fma_f64	$d12, $d11, $d12, 0D3fd0000000000000;
	fma_f64	$d14, $d11, $d12, 0D3fd5555555555555;
	mul_f64	$d12, $d9, 0D3fe0000000000000;
	mul_f64	$d13, $d9, $d12;
	add_f64	$d12, $d9, $d13;
	sub_f64	$d15, $d9, $d12;
	add_f64	$d13, $d13, $d15;
	mul_f64	$d14, $d14, $d11;
	mul_f64	$d14, $d11, $d14;
	mul_f64	$d15, $d10, 0D3fe0000000000000;
	mul_f64	$d11, $d11, $d14;
	fma_f64	$d11, $d15, $d10, $d11;
	fma_f64	$d9, $d9, $d10, $d11;
	add_f64	$d9, $d10, $d9;
	add_f64	$d9, $d9, $d13;
	sub_f64	$d8, $d8, $d9;
	sub_f64	$d9, $d8, $d12;
	add_f64	$d10, $d12, $d9;
	sub_f64	$d10, $d8, $d10;
	add_f64	$d8, $d7, $d9;
	sub_f64	$d7, $d7, $d8;
	add_f64	$d7, $d9, $d7;
	add_f64	$d9, $d10, $d7;
	mov_b64	$d7, $d8;
	and_b64	$d7, $d7, 18446744073575333888;
	sub_f64	$d8, $d8, $d7;
	add_f64	$d8, $d9, $d8;
	mul_f64	$d9, $d5, $d8;
	fma_f64	$d8, $d6, $d8, $d9;
	fma_f64	$d8, $d5, $d7, $d8;
	fma_f64	$d5, $d6, $d7, $d8;
	neg_f64	$d9, $d5;
	fma_f64	$d6, $d6, $d7, $d9;
	add_f64	$d6, $d8, $d6;
	mul_f64	$d7, $d5, 0D40571547652b82fe;
	cvt_s32_f64	$s7, $d7;
	cvt_near_f64_s32	$d7, $s7;
	fma_f64	$d8, $d7, 0Dbf862e42f0000000, $d5;
	mul_f64	$d7, $d7, 0Dbdfdf473de6af278;
	add_f64	$d7, $d8, $d7;
	add_f64	$d6, $d6, $d7;
	fma_f64	$d7, $d6, 0D3f56c1728d739765, 0D3f811115b7aa905e;
	fma_f64	$d7, $d6, $d7, 0D3fa5555555545d4e;
	fma_f64	$d7, $d6, $d7, 0D3fc5555555548f7c;
	fma_f64	$d7, $d6, $d7, 0D3fe0000000000000;
	mul_f64	$d8, $d6, $d6;
	and_b32	$s8, $s7, 63;
	cvt_u64_u32	$d9, $s8;
	fma_f64	$d6, $d8, $d7, $d6;
	shl_u64	$d9, $d9, 4;
	ld_v2_readonly_align(16)_f64	($d7, $d8), [&__math64_TWO_TO_JBY64_EP][$d9];
	add_f64	$d9, $d7, $d8;
	fma_f64	$d6, $d9, $d6, $d8;
	add_f64	$d6, $d7, $d6;
	mul_f64	$d7, $d6, 0D4340000000000000;
	mov_b64	$d8, $d7;
	shr_u64	$d7, $d8, 52;
	cvt_u32_u64	$s8, $d7;
	and_b32	$s8, $s8, 2047;
	add_u32	$s8, $s8, 4294967243;
	mov_b64	$d7, $d6;
	shr_u64	$d9, $d7, 52;
	cvt_u32_u64	$s9, $d9;
	and_b32	$s9, $s9, 2047;
	cmp_eq_b1_s32	$c4, $s9, 0;
	cmov_b32	$s9, $c4, $s8, $s9;
	cmov_b64	$d8, $c4, $d8, $d7;
	shr_s32	$s10, $s7, 6;
	cmp_eq_b1_s32	$c4, $s10, 0;
	cmp_eq_b1_f64	$c5, $d6, 0D0000000000000000;
	or_b1	$c4, $c4, $c5;
	class_b1_f64	$c5, $d6, 516;
	cvt_u32_b1	$s7, $c5;
	and_b32	$s7, $s7, 1;
	cvt_u32_b1	$s8, $c4;
	and_b64	$d8, $d8, 9227875636482146303;
	add_u32	$s9, $s9, $s10;
	max_s32	$s9, $s9, -2047;
	min_s32	$s9, $s9, 2047;
	cvt_u64_u32	$d9, $s9;
	shl_u64	$d9, $d9, 52;
	or_b64	$d9, $d8, $d9;
	add_u32	$s10, $s9, 53;
	cvt_u64_u32	$d10, $s10;
	shl_u64	$d10, $d10, 52;
	or_b64	$d8, $d8, $d10;
	mul_f64	$d8, $d8, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c4, $s9, 0;
	cmov_b64	$d8, $c4, $d9, $d8;
	and_b64	$d7, $d7, 9223372036854775808;
	or_b64	$d9, $d7, 9218868437227405312;
	cmp_eq_b1_s32	$c4, $s9, 2047;
	cmov_b64	$d8, $c4, $d9, $d8;
	cmp_lt_b1_s32	$c4, $s9, -53;
	cmov_b64	$d7, $c4, $d7, $d8;
	or_b32	$s7, $s8, $s7;
	cmp_ne_b1_s32	$c4, $s7, 0;
	cmov_b64	$d6, $c4, $d6, $d7;
	cmp_gt_b1_f64	$c4, $d5, 0D40862e42fefa39ef;
	cmov_b64	$d6, $c4, 9218868437227405312, $d6;
	cmp_lt_b1_f64	$c4, $d5, 0Dc0874910d52d3051;
	cmov_b64	$d5, $c4, 0, $d6;
	xor_b32	$s7, $s5, 1;
	and_b32	$s2, $s2, $s7;
	mul_f64	$d2, $d2, $d5;
	cmp_ne_b1_s32	$c4, $s2, 0;
	cmov_b64	$d2, $c4, 9221120237041090560, $d2;
	and_b32	$s2, $s6, $s5;
	cmp_ne_b1_s32	$c4, $s2, 0;
	cmov_b64	$d2, $c4, $d4, $d2;
	and_b32	$s2, $s6, $s7;
	cmp_ne_b1_s32	$c4, $s2, 0;
	cmov_b64	$d2, $c4, 9218868437227405312, $d2;
	and_b32	$s2, $s3, $s7;
	cmp_ne_b1_s32	$c4, $s2, 0;
	cmov_b64	$d2, $c4, 0, $d2;
	cmov_b64	$d2, $c3, $d3, $d2;
	cmov_b64	$d2, $c2, 18442240474082181120, $d2;
	and_b32	$s2, $s4, $s0;
	and_b32	$s1, $s2, $s1;
	cmp_ne_b1_s32	$c2, $s1, 0;
	cmov_b64	$d2, $c2, 9223372036854775808, $d2;
	cmov_b64	$d2, $c0, 0, $d2;
	cmov_b64	$d2, $c1, 9218868437227405312, $d2;
	cmp_gt_b1_u64	$c0, $d1, 9218868437227405312;
	cmov_b64	$d0, $c0, $d0, $d2;
	cmp_eq_b1_s32	$c0, $s0, 0;
	cmov_b64	$d0, $c0, 9221120237041090560, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_rootn];
	ret;
};


decl function &_gcc_lgamma_r(arg_f64 %ret)(
	arg_f64 %x,
	arg_u64 %ip);


function &_gcc_lgamma_r(arg_f64 %_gcc_lgamma_r)(
	arg_f64 %x,
	arg_u64 %ip)
{

@_gcc_lgamma_r_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d2, [%x];
	mov_b64	$d3, $d2;
	and_b64	$d4, $d3, 9223372036854775807;
	mov_b64	$d1, $d4;
	ld_arg_align(8)_u64	$d0, [%ip];
	cmp_lt_b1_u64	$c0, $d4, 9218868437227405312;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	cvt_u32_u64	$s0, $d0;
	st_private_align(4)_u32	1, [$s0];
	br	@BB0_18;

@BB0_2:
	cmp_geu_b1_f64	$c0, $d1, 0D3b90000000000000;
	cbr_b1	$c0, @BB0_4;
	// BB#3:
	cvt_u32_u64	$s0, $d0;
	or_b64	$d0, $d4, 274719577269600256;
	add_f64	$d0, $d0, 0D83d0000000000000;
	cmp_lt_b1_u64	$c0, $d4, 4503599627370496;
	cmov_b64	$d0, $c0, $d0, $d4;
	cmov_b32	$s4, $c0, 4294966213, 4294966273;
	cmp_le_b1_f64	$c0, $d1, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c1, $d1, 0D3fee0faa00000000;
	and_b1	$c0, $c1, $c0;
	cmp_eq_b1_s64	$c1, $d4, $d3;
	cmov_b32	$s1, $c1, 1, 4294967295;
	cmp_lt_b1_f64	$c1, $d1, 0D0000000000000000;
	cvt_u32_b1	$s2, $c1;
	class_b1_f64	$c1, $d1, 3;
	cvt_u32_b1	$s3, $c1;
	and_b32	$s3, $s3, 1;
	class_b1_f64	$c1, $d1, 516;
	cvt_u32_b1	$s5, $c1;
	and_b32	$s5, $s5, 1;
	shr_s64	$d2, $d0, 45;
	cvt_u32_u64	$s6, $d2;
	add_f64	$d2, $d1, 0Dbff0000000000000;
	and_b32	$s7, $s6, 1;
	bitextract_u32	$s6, $s6, 1, 6;
	or_b32	$s6, $s6, 64;
	add_u32	$s6, $s6, $s7;
	cvt_near_f64_s32	$d3, $s6;
	add_u32	$s6, $s6, 4294967232;
	and_b64	$d4, $d0, 4503599627370495;
	or_b64	$d4, $d4, 4602678819172646912;
	cvt_s64_s32	$d5, $s6;
	mul_f64	$d3, $d3, 0D3f80000000000000;
	add_f64	$d6, $d2, 0D4000000000000000;
	div_f64	$d6, $d2, $d6;
	add_f64	$d7, $d6, $d6;
	mul_f64	$d8, $d7, $d7;
	fma_f64	$d9, $d8, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	mul_f64	$d7, $d7, $d8;
	sub_f64	$d4, $d4, $d3;
	fma_f64	$d10, $d8, $d9, 0D3f89999999bac6d4;
	fma_f64	$d3, $d4, 0D3fe0000000000000, $d3;
	div_f64	$d3, $d4, $d3;
	mul_f64	$d4, $d3, $d3;
	shl_u64	$d9, $d5, 4;
	fma_f64	$d5, $d8, $d10, 0D3fb55555555554e6;
	mul_f64	$d6, $d2, $d6;
	neg_f64	$d6, $d6;
	fma_f64	$d5, $d7, $d5, $d6;
	shr_u64	$d0, $d0, 52;
	cvt_u32_u64	$s6, $d0;
	add_f64	$d0, $d2, $d5;
	ld_v2_readonly_align(16)_f64	($d2, $d5), [&__math64_LN_TBL][$d9];
	and_b32	$s6, $s6, 2047;
	add_u32	$s4, $s6, $s4;
	cvt_near_f64_s32	$d6, $s4;
	fma_f64	$d7, $d4, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d7, $d4, $d7, 0D3fb5555555555557;
	mul_f64	$d4, $d4, $d7;
	fma_f64	$d3, $d3, $d4, $d3;
	add_f64	$d3, $d5, $d3;
	fma_f64	$d2, $d6, 0D3fe62e42e0000000, $d2;
	fma_f64	$d3, $d6, 0D3e6efa39ef35793c, $d3;
	add_f64	$d2, $d2, $d3;
	cmov_b64	$d0, $c0, $d0, $d2;
	cvt_b1_u32	$c0, $s5;
	cmov_b64	$d0, $c0, 9218868437227405312, $d0;
	or_b32	$s2, $s3, $s2;
	cmp_ne_b1_s32	$c0, $s2, 0;
	cmov_b64	$d0, $c0, 9221120237041090560, $d0;
	cmp_eq_b1_f64	$c0, $d1, 0D0000000000000000;
	cmov_b64	$d0, $c0, 18442240474082181120, $d0;
	st_private_align(4)_u32	$s1, [$s0];
	neg_f64	$d1, $d0;
	br	@BB0_18;

@BB0_4:
	cmp_geu_b1_f64	$c0, $d1, 0D4000000000000000;
	cbr_b1	$c0, @BB0_11;
	// BB#5:
	sub_f64	$d5, 0D4000000000000000, $d1;
	add_f64	$d6, $d1, 0Dbff762d86356be3f;
	cmp_lt_b1_f64	$c0, $d1, 0D3ffbb4c300000000;
	cmov_b64	$d6, $c0, $d6, $d5;
	cvt_u32_b1	$s0, $c0;
	add_f64	$d5, $d1, 0Dbff0000000000000;
	cmp_lt_b1_f64	$c0, $d1, 0D3ff3b4c400000000;
	cmov_b64	$d6, $c0, $d5, $d6;
	cmov_b32	$s0, $c0, 2, $s0;
	sub_f64	$d7, 0D3ff0000000000000, $d1;
	cmp_le_b1_f64	$c0, $d1, 0D3feccccc00000000;
	cmov_b64	$d6, $c0, $d7, $d6;
	cmov_b32	$s0, $c0, 0, $s0;
	add_f64	$d7, $d1, 0Dbfdd8b618d5af8fc;
	cmp_lt_b1_f64	$c1, $d1, 0D3fe7694400000000;
	cmov_b64	$d7, $c1, $d7, $d6;
	cmov_b32	$s0, $c1, 1, $s0;
	or_b64	$d6, $d4, 274719577269600256;
	add_f64	$d6, $d6, 0D83d0000000000000;
	cmp_lt_b1_u64	$c1, $d4, 4503599627370496;
	cmov_b64	$d6, $c1, $d6, $d4;
	cmov_b32	$s3, $c1, 4294966213, 4294966273;
	cmp_le_b1_f64	$c1, $d1, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c2, $d1, 0D3fee0faa00000000;
	and_b1	$c1, $c2, $c1;
	cmp_lt_b1_f64	$c2, $d1, 0D0000000000000000;
	cvt_u32_b1	$s1, $c2;
	class_b1_f64	$c2, $d1, 3;
	cvt_u32_b1	$s2, $c2;
	and_b32	$s2, $s2, 1;
	class_b1_f64	$c2, $d1, 516;
	cvt_u32_b1	$s4, $c2;
	and_b32	$s4, $s4, 1;
	cmp_lt_b1_f64	$c2, $d1, 0D3fcda66100000000;
	cmov_b64	$d4, $c2, $d1, $d7;
	cmov_b32	$s0, $c2, 2, $s0;
	shr_s64	$d7, $d6, 45;
	cvt_u32_u64	$s6, $d7;
	and_b32	$s5, $s6, 1;
	bitextract_u32	$s6, $s6, 1, 6;
	or_b32	$s6, $s6, 64;
	add_u32	$s5, $s6, $s5;
	cvt_near_f64_s32	$d7, $s5;
	add_u32	$s5, $s5, 4294967232;
	and_b64	$d8, $d6, 4503599627370495;
	or_b64	$d8, $d8, 4602678819172646912;
	cvt_s64_s32	$d9, $s5;
	mul_f64	$d7, $d7, 0D3f80000000000000;
	add_f64	$d10, $d5, 0D4000000000000000;
	div_f64	$d10, $d5, $d10;
	add_f64	$d11, $d10, $d10;
	mul_f64	$d12, $d11, $d11;
	fma_f64	$d13, $d12, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	mul_f64	$d11, $d11, $d12;
	sub_f64	$d8, $d8, $d7;
	fma_f64	$d14, $d12, $d13, 0D3f89999999bac6d4;
	fma_f64	$d7, $d8, 0D3fe0000000000000, $d7;
	div_f64	$d7, $d8, $d7;
	mul_f64	$d8, $d7, $d7;
	shl_u64	$d13, $d9, 4;
	fma_f64	$d9, $d12, $d14, 0D3fb55555555554e6;
	mul_f64	$d10, $d5, $d10;
	neg_f64	$d10, $d10;
	fma_f64	$d9, $d11, $d9, $d10;
	shr_u64	$d6, $d6, 52;
	cvt_u32_u64	$s5, $d6;
	add_f64	$d5, $d5, $d9;
	ld_v2_readonly_align(16)_f64	($d6, $d9), [&__math64_LN_TBL][$d13];
	and_b32	$s5, $s5, 2047;
	add_u32	$s3, $s5, $s3;
	cvt_near_f64_s32	$d10, $s3;
	fma_f64	$d11, $d8, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d11, $d8, $d11, 0D3fb5555555555557;
	mul_f64	$d8, $d8, $d11;
	fma_f64	$d7, $d7, $d8, $d7;
	add_f64	$d7, $d9, $d7;
	fma_f64	$d6, $d10, 0D3fe62e42e0000000, $d6;
	fma_f64	$d7, $d10, 0D3e6efa39ef35793c, $d7;
	add_f64	$d6, $d6, $d7;
	cmov_b64	$d5, $c1, $d5, $d6;
	cvt_b1_u32	$c1, $s4;
	cmov_b64	$d5, $c1, 9218868437227405312, $d5;
	or_b32	$s1, $s2, $s1;
	cmp_ne_b1_s32	$c1, $s1, 0;
	cmov_b64	$d5, $c1, 9221120237041090560, $d5;
	cmp_eq_b1_f64	$c1, $d1, 0D0000000000000000;
	cmov_b64	$d1, $c1, 18442240474082181120, $d5;
	neg_f64	$d1, $d1;
	cmov_b64	$d1, $c0, $d1, 0;
	cmp_eq_b1_s32	$c0, $s0, 2;
	cbr_b1	$c0, @BB0_10;
	// BB#6:
	cmp_ne_b1_s32	$c0, $s0, 1;
	cbr_b1	$c0, @BB0_7;
	// BB#9:
	fma_f64	$d5, $d4, 0D3f35fd3ee8c2d3f4, 0Dbf347f24ecc38c38;
	fma_f64	$d5, $d4, $d5, 0D3f34af6d6c0ebbf7;
	fma_f64	$d5, $d4, $d5, 0Dbf41a6109c73e0ec;
	fma_f64	$d5, $d4, $d5, 0D3f4cdf0cef61a8e9;
	fma_f64	$d5, $d4, $d5, 0Dbf56fe8ebf2d1af1;
	fma_f64	$d6, $d4, $d5, 0D3f6282d32e15c915;
	mul_f64	$d5, $d4, $d4;
	fma_f64	$d6, $d4, $d6, 0Dbf6e2effb3e914d7;
	fma_f64	$d6, $d4, $d6, 0D3f78fce0e370e344;
	fma_f64	$d6, $d4, $d6, 0Dbf851f9fba91ec6a;
	fma_f64	$d6, $d4, $d6, 0D3f9266e7970af9ec;
	fma_f64	$d6, $d4, $d6, 0Dbfa0c9a8df35b713;
	fma_f64	$d6, $d4, $d6, 0D3fb08b4294d5419b;
	fma_f64	$d6, $d4, $d6, 0Dbfc2e4278dc6c509;
	fma_f64	$d4, $d4, $d6, 0D3fdef72bc8ee38a2;
	fma_f64	$d4, $d5, $d4, 0D3c50c7caa48a971f;
	add_f64	$d4, $d4, 0Dbfbf19b9bcc38a42;
	add_f64	$d1, $d1, $d4;
	br	@BB0_14;

@BB0_11:
	cmp_geu_b1_f64	$c0, $d1, 0D4020000000000000;
	cbr_b1	$c0, @BB0_13;
	// BB#12:
	cvt_s32_f64	$s0, $d1;
	cvt_near_f64_s32	$d4, $s0;
	sub_f64	$d1, $d1, $d4;
	add_f64	$d4, $d1, 0D4000000000000000;
	cmp_gt_b1_s32	$c0, $s0, 2;
	cmov_b64	$d4, $c0, $d4, 4607182418800017408;
	add_f64	$d5, $d1, 0D4008000000000000;
	cmp_gt_b1_s32	$c0, $s0, 3;
	cmov_b64	$d5, $c0, $d5, 4607182418800017408;
	add_f64	$d6, $d1, 0D4010000000000000;
	cmp_gt_b1_s32	$c0, $s0, 4;
	cmov_b64	$d6, $c0, $d6, 4607182418800017408;
	add_f64	$d7, $d1, 0D4014000000000000;
	cmp_gt_b1_s32	$c0, $s0, 5;
	cmov_b64	$d7, $c0, $d7, 4607182418800017408;
	add_f64	$d8, $d1, 0D4018000000000000;
	cmp_gt_b1_s32	$c0, $s0, 6;
	cmov_b64	$d8, $c0, $d8, 4607182418800017408;
	mul_f64	$d7, $d8, $d7;
	mul_f64	$d6, $d6, $d7;
	mul_f64	$d5, $d5, $d6;
	mul_f64	$d4, $d4, $d5;
	mov_b64	$d5, $d4;
	or_b64	$d6, $d5, 274719577269600256;
	add_f64	$d6, $d6, 0D83d0000000000000;
	cmp_lt_b1_u64	$c0, $d5, 4503599627370496;
	cmov_b64	$d5, $c0, $d6, $d5;
	cmov_b32	$s2, $c0, 4294966213, 4294966273;
	cmp_le_b1_f64	$c0, $d4, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c1, $d4, 0D3fee0faa00000000;
	and_b1	$c0, $c1, $c0;
	cmp_lt_b1_f64	$c1, $d4, 0D0000000000000000;
	cvt_u32_b1	$s0, $c1;
	class_b1_f64	$c1, $d4, 3;
	cvt_u32_b1	$s1, $c1;
	and_b32	$s1, $s1, 1;
	class_b1_f64	$c1, $d4, 516;
	cvt_u32_b1	$s3, $c1;
	and_b32	$s3, $s3, 1;
	shr_s64	$d7, $d5, 45;
	add_f64	$d6, $d4, 0Dbff0000000000000;
	cvt_u32_u64	$s5, $d7;
	add_f64	$d7, $d6, 0D4000000000000000;
	and_b32	$s4, $s5, 1;
	bitextract_u32	$s5, $s5, 1, 6;
	div_f64	$d7, $d6, $d7;
	or_b32	$s5, $s5, 64;
	add_f64	$d8, $d7, $d7;
	add_u32	$s4, $s5, $s4;
	mul_f64	$d10, $d8, $d8;
	cvt_near_f64_s32	$d9, $s4;
	mul_f64	$d8, $d8, $d10;
	fma_f64	$d11, $d10, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	fma_f64	$d11, $d10, $d11, 0D3f89999999bac6d4;
	fma_f64	$d10, $d10, $d11, 0D3fb55555555554e6;
	mul_f64	$d7, $d6, $d7;
	neg_f64	$d7, $d7;
	fma_f64	$d8, $d8, $d10, $d7;
	mul_f64	$d7, $d9, 0D3f80000000000000;
	shr_u64	$d9, $d5, 52;
	and_b64	$d5, $d5, 4503599627370495;
	or_b64	$d5, $d5, 4602678819172646912;
	sub_f64	$d5, $d5, $d7;
	cvt_u32_u64	$s5, $d9;
	fma_f64	$d7, $d5, 0D3fe0000000000000, $d7;
	div_f64	$d7, $d5, $d7;
	add_f64	$d5, $d6, $d8;
	mul_f64	$d6, $d7, $d7;
	add_u32	$s4, $s4, 4294967232;
	cvt_s64_s32	$d8, $s4;
	shl_u64	$d10, $d8, 4;
	ld_v2_readonly_align(16)_f64	($d8, $d9), [&__math64_LN_TBL][$d10];
	and_b32	$s4, $s5, 2047;
	add_u32	$s2, $s4, $s2;
	cvt_near_f64_s32	$d10, $s2;
	fma_f64	$d11, $d6, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d11, $d6, $d11, 0D3fb5555555555557;
	mul_f64	$d6, $d6, $d11;
	fma_f64	$d6, $d7, $d6, $d7;
	add_f64	$d6, $d9, $d6;
	fma_f64	$d7, $d10, 0D3fe62e42e0000000, $d8;
	fma_f64	$d6, $d10, 0D3e6efa39ef35793c, $d6;
	add_f64	$d6, $d7, $d6;
	cmov_b64	$d5, $c0, $d5, $d6;
	cvt_b1_u32	$c0, $s3;
	cmov_b64	$d5, $c0, 9218868437227405312, $d5;
	or_b32	$s0, $s1, $s0;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d5, $c0, 9221120237041090560, $d5;
	cmp_eq_b1_f64	$c0, $d4, 0D0000000000000000;
	cmov_b64	$d4, $c0, 18442240474082181120, $d5;
	fma_f64	$d5, $d1, 0D3edebaf7a5b38140, 0D3f497ddaca41a95b;
	fma_f64	$d5, $d1, $d5, 0D3f9317ea742ed475;
	fma_f64	$d5, $d1, $d5, 0D3fc601edccfbdf27;
	fma_f64	$d5, $d1, $d5, 0D3fe71a1893d3dcdc;
	fma_f64	$d5, $d1, $d5, 0D3ff645a762c4ab74;
	fma_f64	$d5, $d1, $d5, 0D3ff0000000000000;
	fma_f64	$d6, $d1, 0D3f00bfecdd17e945, 0D3f5e26b67368f239;
	fma_f64	$d6, $d1, $d6, 0D3f9b481c7e939961;
	fma_f64	$d6, $d1, $d6, 0D3fc2bb9cbee5f2f7;
	fma_f64	$d6, $d1, $d6, 0D3fd4d98f4f139f59;
	fma_f64	$d6, $d1, $d6, 0D3fcb848b36e20878;
	fma_f64	$d6, $d1, $d6, 0Dbfb3c467e37db0c8;
	mul_f64	$d6, $d1, $d6;
	div_f64	$d5, $d6, $d5;
	fma_f64	$d1, 0D3fe0000000000000, $d1, $d5;
	add_f64	$d1, $d1, $d4;
	br	@BB0_14;

@BB0_13:
	or_b64	$d5, $d4, 274719577269600256;
	add_f64	$d5, $d5, 0D83d0000000000000;
	cmp_lt_b1_u64	$c0, $d4, 4503599627370496;
	cmov_b64	$d4, $c0, $d5, $d4;
	cmov_b32	$s2, $c0, 4294966213, 4294966273;
	cmp_le_b1_f64	$c0, $d1, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c1, $d1, 0D3fee0faa00000000;
	and_b1	$c0, $c1, $c0;
	cmp_lt_b1_f64	$c1, $d1, 0D0000000000000000;
	cvt_u32_b1	$s0, $c1;
	class_b1_f64	$c1, $d1, 3;
	cvt_u32_b1	$s1, $c1;
	and_b32	$s1, $s1, 1;
	class_b1_f64	$c1, $d1, 516;
	cvt_u32_b1	$s3, $c1;
	and_b32	$s3, $s3, 1;
	shr_s64	$d5, $d4, 45;
	cvt_u32_u64	$s4, $d5;
	add_f64	$d5, $d1, 0Dbff0000000000000;
	and_b32	$s5, $s4, 1;
	bitextract_u32	$s4, $s4, 1, 6;
	or_b32	$s4, $s4, 64;
	add_u32	$s4, $s4, $s5;
	cvt_near_f64_s32	$d6, $s4;
	add_u32	$s4, $s4, 4294967232;
	and_b64	$d7, $d4, 4503599627370495;
	or_b64	$d7, $d7, 4602678819172646912;
	cvt_s64_s32	$d8, $s4;
	mul_f64	$d6, $d6, 0D3f80000000000000;
	add_f64	$d9, $d5, 0D4000000000000000;
	div_f64	$d9, $d5, $d9;
	add_f64	$d10, $d9, $d9;
	mul_f64	$d11, $d10, $d10;
	fma_f64	$d12, $d11, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	mul_f64	$d10, $d10, $d11;
	sub_f64	$d7, $d7, $d6;
	fma_f64	$d13, $d11, $d12, 0D3f89999999bac6d4;
	fma_f64	$d6, $d7, 0D3fe0000000000000, $d6;
	div_f64	$d6, $d7, $d6;
	mul_f64	$d7, $d6, $d6;
	shl_u64	$d12, $d8, 4;
	fma_f64	$d8, $d11, $d13, 0D3fb55555555554e6;
	mul_f64	$d9, $d5, $d9;
	neg_f64	$d9, $d9;
	fma_f64	$d8, $d10, $d8, $d9;
	shr_u64	$d4, $d4, 52;
	cvt_u32_u64	$s4, $d4;
	add_f64	$d4, $d5, $d8;
	ld_v2_readonly_align(16)_f64	($d5, $d8), [&__math64_LN_TBL][$d12];
	and_b32	$s4, $s4, 2047;
	add_u32	$s2, $s4, $s2;
	cvt_near_f64_s32	$d9, $s2;
	fma_f64	$d10, $d7, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d10, $d7, $d10, 0D3fb5555555555557;
	mul_f64	$d7, $d7, $d10;
	fma_f64	$d6, $d6, $d7, $d6;
	add_f64	$d6, $d8, $d6;
	fma_f64	$d5, $d9, 0D3fe62e42e0000000, $d5;
	fma_f64	$d6, $d9, 0D3e6efa39ef35793c, $d6;
	add_f64	$d5, $d5, $d6;
	cmov_b64	$d4, $c0, $d4, $d5;
	cvt_b1_u32	$c0, $s3;
	cmov_b64	$d4, $c0, 9218868437227405312, $d4;
	or_b32	$s0, $s1, $s0;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d4, $c0, 9221120237041090560, $d4;
	cmp_eq_b1_f64	$c0, $d1, 0D0000000000000000;
	cmov_b64	$d4, $c0, 18442240474082181120, $d4;
	div_f64	$d5, 0D3ff0000000000000, $d1;
	mul_f64	$d6, $d5, $d5;
	fma_f64	$d7, $d6, 0Dbf5ab89d0b9e43e4, 0D3f4b67ba4cdad5d1;
	fma_f64	$d7, $d6, $d7, 0Dbf4380cb8c0fe741;
	fma_f64	$d7, $d6, $d7, 0D3f4a019f98cf38b6;
	fma_f64	$d7, $d6, $d7, 0Dbf66c16c16b02e5c;
	fma_f64	$d6, $d6, $d7, 0D3fb555555555553b;
	add_f64	$d1, $d1, 0Dbfe0000000000000;
	fma_f64	$d5, $d5, $d6, 0D3fdacfe390c97d69;
	add_f64	$d4, $d4, 0Dbff0000000000000;
	mul_f64	$d1, $d1, $d4;
	add_f64	$d1, $d1, $d5;
	br	@BB0_14;

@BB0_10:
	fma_f64	$d5, $d4, 0D3f6a5abb57d0cf61, 0D3fbaae55d6537c88;
	fma_f64	$d5, $d4, $d5, 0D3fe89dfbe45050af;
	fma_f64	$d5, $d4, $d5, 0D40010725a42b18f5;
	fma_f64	$d5, $d4, $d5, 0D4003a5d7c2bd619c;
	fma_f64	$d5, $d4, $d5, 0D3ff0000000000000;
	fma_f64	$d6, $d4, 0D3f8b678bbf2bab09, 0D3fcd4eaef6010924;
	fma_f64	$d6, $d4, $d6, 0D3fef497644ea8450;
	fma_f64	$d6, $d4, $d6, 0D3ff7475cd119bd6f;
	fma_f64	$d6, $d4, $d6, 0D3fe4401e8b005dff;
	fma_f64	$d6, $d4, $d6, 0Dbfb3c467e37db0c8;
	mul_f64	$d6, $d4, $d6;
	div_f64	$d5, $d6, $d5;
	fma_f64	$d4, 0Dbfe0000000000000, $d4, $d5;
	add_f64	$d1, $d1, $d4;
	br	@BB0_14;

@BB0_7:
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_14;
	// BB#8:
	fma_f64	$d5, $d4, 0D3f07858e90a45837, 0D3efa7074428cfa52;
	fma_f64	$d5, $d4, $d5, 0D3f1c5088987dfb07;
	fma_f64	$d5, $d4, $d5, 0D3f2cf2eced10e54d;
	fma_f64	$d5, $d4, $d5, 0D3f40b6c689b99c00;
	fma_f64	$d5, $d4, $d5, 0D3f538a94116f3f5d;
	fma_f64	$d5, $d4, $d5, 0D3f67add8ccb7926b;
	fma_f64	$d5, $d4, $d5, 0D3f7e404fb68fefe8;
	fma_f64	$d5, $d4, $d5, 0D3f951322ac92547b;
	fma_f64	$d5, $d4, $d5, 0D3fb13e001a5562a7;
	fma_f64	$d5, $d4, $d5, 0D3fd4a34cc4a60fad;
	fma_f64	$d5, $d4, $d5, 0D3fb3c467e37db0c8;
	add_f64	$d5, $d5, 0Dbfe0000000000000;
	fma_f64	$d1, $d4, $d5, $d1;

@BB0_14:
	cmp_geu_b1_f64	$c0, $d2, 0D0000000000000000;
	cbr_b1	$c0, @BB0_15;
	// BB#16:
	and_b64	$d4, $d3, 9223372036854775808;
	xor_b64	$d6, $d4, $d3;
	mov_b64	$d3, $d6;
	cvt_s64_f64	$d5, $d3;
	cvt_near_f64_s64	$d7, $d5;
	sub_f64	$d7, $d3, $d7;
	sub_f64	$d8, 0D3ff0000000000000, $d7;
	add_f64	$d9, $d7, 0Dbfe0000000000000;
	cmp_le_b1_f64	$c0, $d7, 0D3fe8000000000000;
	cmov_b64	$d8, $c0, $d9, $d8;
	sub_f64	$d9, 0D3fe0000000000000, $d7;
	cmp_lt_b1_f64	$c1, $d7, 0D3fe0000000000000;
	cmov_b64	$d8, $c1, $d9, $d8;
	cmp_le_b1_f64	$c1, $d7, 0D3fd0000000000000;
	cmov_b64	$d8, $c1, $d7, $d8;
	cmp_gtu_b1_f64	$c1, $d7, 0D3fd0000000000000;
	and_b1	$c0, $c0, $c1;
	cmp_lt_b1_s64	$c1, $d6, 9218868437227405312;
	cmov_b64	$d6, $c1, $d4, 9221120237041090560;
	mul_f64	$d7, $d8, 0D400921fb54442d18;
	mul_f64	$d8, $d7, $d7;
	mul_f64	$d10, $d8, 0D3fe0000000000000;
	sub_f64	$d9, 0D3ff0000000000000, $d10;
	sub_f64	$d11, 0D3ff0000000000000, $d9;
	sub_f64	$d10, $d11, $d10;
	fma_f64	$d11, 0Dbda907db46cc5e42, $d8, 0D3e21eeb69037ab78;
	fma_f64	$d11, $d11, $d8, 0Dbe927e4fa17f65f6;
	fma_f64	$d11, $d11, $d8, 0D3efa01a019f4ec90;
	fma_f64	$d11, $d11, $d8, 0Dbf56c16c16c16967;
	fma_f64	$d11, $d11, $d8, 0D3fa5555555555555;
	mul_f64	$d12, $d8, $d8;
	fma_f64	$d10, $d11, $d12, $d10;
	fma_f64	$d11, 0D3de5e0b2f9a43bb8, $d8, 0Dbe5ae600b42fdfa7;
	fma_f64	$d11, $d11, $d8, 0D3ec71de3796cde01;
	fma_f64	$d11, $d11, $d8, 0Dbf2a01a019e83e5c;
	add_f64	$d9, $d9, $d10;
	fma_f64	$d10, $d11, $d8, 0D3f81111111110bb3;
	mul_f64	$d11, $d7, $d8;
	neg_f64	$d11, $d11;
	mul_f64	$d10, $d10, $d11;
	mul_f64	$d8, $d8, $d10;
	fma_f64	$d8, $d11, 0Dbfc5555555555555, $d8;
	sub_f64	$d7, $d7, $d8;
	cmov_b64	$d7, $c0, $d9, $d7;
	shl_u64	$d5, $d5, 63;
	xor_b64	$d4, $d5, $d4;
	mov_b64	$d5, $d7;
	xor_b64	$d4, $d4, $d5;
	cmp_lt_b1_f64	$c0, $d3, 0D4330000000000000;
	cmov_b64	$d3, $c0, $d4, $d6;
	mul_f64	$d2, $d3, $d2;
	abs_f64	$d2, $d2;
	div_f64	$d2, 0D400921fb54442d18, $d2;
	cmp_le_b1_f64	$c0, $d2, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c1, $d2, 0D3fee0faa00000000;
	and_b1	$c0, $c1, $c0;
	cmp_lt_b1_f64	$c1, $d2, 0D0000000000000000;
	cvt_u32_b1	$s1, $c1;
	class_b1_f64	$c1, $d2, 3;
	cvt_u32_b1	$s0, $c1;
	and_b32	$s2, $s0, 1;
	class_b1_f64	$c1, $d2, 516;
	cvt_u32_b1	$s0, $c1;
	and_b32	$s3, $s0, 1;
	cmp_lt_b1_f64	$c1, $d3, 0D0000000000000000;
	cmov_b32	$s0, $c1, 4294967295, 1;
	mov_b64	$d4, $d2;
	or_b64	$d5, $d4, 274719577269600256;
	add_f64	$d5, $d5, 0D83d0000000000000;
	cmp_lt_b1_u64	$c1, $d4, 4503599627370496;
	cmov_b32	$s4, $c1, 4294966213, 4294966273;
	cmov_b64	$d5, $c1, $d5, $d4;
	shr_s64	$d6, $d5, 45;
	add_f64	$d4, $d2, 0Dbff0000000000000;
	cvt_u32_u64	$s6, $d6;
	add_f64	$d6, $d4, 0D4000000000000000;
	and_b32	$s5, $s6, 1;
	bitextract_u32	$s6, $s6, 1, 6;
	div_f64	$d6, $d4, $d6;
	or_b32	$s6, $s6, 64;
	add_f64	$d8, $d6, $d6;
	add_u32	$s5, $s6, $s5;
	mul_f64	$d9, $d8, $d8;
	cvt_near_f64_s32	$d7, $s5;
	mul_f64	$d8, $d8, $d9;
	fma_f64	$d10, $d9, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	fma_f64	$d10, $d9, $d10, 0D3f89999999bac6d4;
	fma_f64	$d9, $d9, $d10, 0D3fb55555555554e6;
	mul_f64	$d6, $d4, $d6;
	neg_f64	$d6, $d6;
	fma_f64	$d6, $d8, $d9, $d6;
	mul_f64	$d7, $d7, 0D3f80000000000000;
	shr_u64	$d8, $d5, 52;
	and_b64	$d5, $d5, 4503599627370495;
	or_b64	$d5, $d5, 4602678819172646912;
	sub_f64	$d5, $d5, $d7;
	cvt_u32_u64	$s6, $d8;
	fma_f64	$d7, $d5, 0D3fe0000000000000, $d7;
	div_f64	$d5, $d5, $d7;
	add_f64	$d4, $d4, $d6;
	mul_f64	$d6, $d5, $d5;
	add_u32	$s5, $s5, 4294967232;
	cvt_s64_s32	$d7, $s5;
	shl_u64	$d9, $d7, 4;
	ld_v2_readonly_align(16)_f64	($d7, $d8), [&__math64_LN_TBL][$d9];
	and_b32	$s5, $s6, 2047;
	add_u32	$s4, $s5, $s4;
	cvt_near_f64_s32	$d9, $s4;
	fma_f64	$d10, $d6, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d10, $d6, $d10, 0D3fb5555555555557;
	mul_f64	$d6, $d6, $d10;
	fma_f64	$d5, $d5, $d6, $d5;
	add_f64	$d5, $d8, $d5;
	fma_f64	$d6, $d9, 0D3fe62e42e0000000, $d7;
	fma_f64	$d5, $d9, 0D3e6efa39ef35793c, $d5;
	add_f64	$d5, $d6, $d5;
	cmov_b64	$d4, $c0, $d4, $d5;
	cvt_b1_u32	$c0, $s3;
	cmov_b64	$d4, $c0, 9218868437227405312, $d4;
	or_b32	$s1, $s2, $s1;
	cmp_ne_b1_s32	$c0, $s1, 0;
	cmov_b64	$d4, $c0, 9221120237041090560, $d4;
	cmp_eq_b1_f64	$c0, $d2, 0D0000000000000000;
	cmov_b64	$d2, $c0, 18442240474082181120, $d4;
	sub_f64	$d1, $d2, $d1;
	cmp_eq_b1_f64	$c0, $d3, 0D0000000000000000;
	cmov_b64	$d1, $c0, 9218868437227405312, $d1;
	br	@BB0_17;

@BB0_15:
	mov_b32	$s0, 1;

@BB0_17:
	cvt_u32_u64	$s1, $d0;
	st_private_align(4)_u32	$s0, [$s1];

@BB0_18:
	st_arg_align(8)_f64	$d1, [%_gcc_lgamma_r];
	ret;
};


decl function &_gcc_cos(arg_f64 %ret)(arg_f64 %x);


function &_gcc_cos(arg_f64 %_gcc_cos)(arg_f64 %x)
{

@_gcc_cos_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	abs_f64	$d0, $d0;
	cmp_geu_b1_f64	$c0, $d0, 0D42e0000000000000;
	cbr_b1	$c0, @BB0_2;
	// BB#1:
	fma_f64	$d1, $d0, 0D3fe45f306dc9c883, 0D3fe0000000000000;
	trunc_f64	$d1, $d1;
	mul_f64	$d2, $d1, 0D3ff921fb54442d18;
	fma_f64	$d3, 0Dbff921fb54442d18, $d1, $d2;
	mul_f64	$d4, $d1, 0Dbc91a62633145c06;
	add_f64	$d2, $d3, $d4;
	sub_f64	$d3, $d2, $d3;
	sub_f64	$d4, $d4, $d3;
	mul_f64	$d5, $d1, 0Dbff921fb54442d18;
	add_f64	$d3, $d5, $d2;
	sub_f64	$d5, $d3, $d5;
	mul_f64	$d6, $d1, 0Db94c1cd129024e08;
	sub_f64	$d2, $d2, $d5;
	add_f64	$d4, $d6, $d4;
	mul_f64	$d5, $d1, 0D3c91a62633145c06;
	fma_f64	$d5, 0Dbc91a62633145c06, $d1, $d5;
	add_f64	$d4, $d5, $d4;
	mul_f64	$d5, $d1, 0D394c1cd129024e08;
	fma_f64	$d5, 0Db94c1cd129024e08, $d1, $d5;
	add_f64	$d4, $d5, $d4;
	add_f64	$d5, $d2, $d4;
	add_f64	$d3, $d0, $d3;
	cvt_s64_f64	$d1, $d1;
	cvt_u32_u64	$s0, $d1;
	add_f64	$d1, $d3, $d5;
	sub_f64	$d3, $d1, $d3;
	sub_f64	$d3, $d5, $d3;
	sub_f64	$d2, $d5, $d2;
	sub_f64	$d2, $d4, $d2;
	add_f64	$d2, $d2, $d3;
	br	@BB0_3;

@BB0_2:
	mov_b64	$d1, $d0;
	shr_s64	$d1, $d1, 52;
	cvt_u32_u64	$s0, $d1;
	add_u32	$s0, $s0, 4294966273;
	shr_s32	$s0, $s0, 3;
	add_u32	$s0, $s0, 17;
	max_s32	$s5, 23, $s0;
	sub_u32	$s0, 150, $s5;
	bitextract_u32	$s9, $s0, 2, 2;
	cmp_eq_b1_s32	$c0, $s9, 1;
	cmov_b32	$s7, $c0, 4294967295, 0;
	and_b32	$s1, $s0, 4294967280;
	cvt_s64_s32	$d1, $s1;
	ld_v4_readonly_align(16)_u32	($s10, $s11, $s8, $s2), [&__math64_PIBITS][$d1];
	ld_v4_readonly_align(16)_u32	($s1, $s3, $s6, $s4), [&__math64_PIBITS][$d1+16];
	cmp_ne_b1_s32	$c0, $s7, 0;
	cmov_b32	$s13, $c0, $s1, $s2;
	cmov_b32	$s7, $c0, $s4, $s6;
	cmov_b32	$s12, $c0, $s6, $s3;
	cmov_b32	$s15, $c0, $s3, $s1;
	cmov_b32	$s16, $c0, $s2, $s8;
	cmov_b32	$s18, $c0, $s8, $s11;
	cmov_b32	$s19, $c0, $s11, $s10;
	cmp_eq_b1_s32	$c0, $s9, 2;
	cmov_b32	$s17, $c0, 4294967295, 0;
	cmp_eq_b1_s32	$c0, $s9, 3;
	cmov_b32	$s14, $c0, 4294967295, 0;
	ld_v2_readonly_align(16)_u32	($s10, $s11), [&__math64_PIBITS][$d1+32];
	cmp_ne_b1_s32	$c0, $s17, 0;
	cmov_b32	$s17, $c0, $s3, $s13;
	cmov_b32	$s8, $c0, $s8, $s19;
	cmov_b32	$s13, $c0, $s2, $s18;
	cmov_b32	$s16, $c0, $s1, $s16;
	cmov_b32	$s15, $c0, $s6, $s15;
	cmov_b32	$s12, $c0, $s4, $s12;
	cmov_b32	$s18, $c0, $s10, $s7;
	shl_u32	$s5, $s5, 3;
	or_b32	$s7, $s5, 2;
	cmp_gt_b1_s32	$c0, $s7, 1018;
	cmov_b32	$s9, $c0, 136, 0;
	cmov_b64	$d1, $c0, 3994692869477629952, 4607182418800017408;
	cmp_ne_b1_s32	$c0, $s14, 0;
	cmov_b32	$s5, $c0, $s6, $s17;
	cmov_b32	$s11, $c0, $s11, $s18;
	cmov_b32	$s10, $c0, $s10, $s12;
	cmov_b32	$s4, $c0, $s4, $s15;
	cmov_b32	$s6, $c0, $s3, $s16;
	cmov_b32	$s1, $c0, $s1, $s13;
	cmov_b32	$s2, $c0, $s2, $s8;
	bytealign_b32	$s3, $s5, $s4, $s0;
	bytealign_b32	$s4, $s4, $s10, $s0;
	shr_u32	$s12, $s4, 16;
	bytealign_b32	$s8, $s10, $s11, $s0;
	shl_u32	$s10, $s8, 16;
	or_b32	$s10, $s10, $s12;
	cvt_u64_u32	$d2, $s3;
	and_b32	$s4, $s4, 65535;
	sub_u32	$s3, $s9, $s7;
	shl_u32	$s3, $s3, 20;
	add_u32	$s7, $s3, 1227882496;
	or_b32	$s4, $s4, $s7;
	pack_u32x2_u32	$d3, u32x2(0,0), $s4, 1;
	or_b64	$d2, $d2, $d3;
	bytealign_b32	$s4, $s1, $s6, $s0;
	mul_f64	$d1, $d0, $d1;
	cvt_u64_u32	$d3, $s10;
	shr_u32	$s9, $s8, 16;
	add_u32	$s8, $s3, 1278214144;
	or_b32	$s9, $s9, $s8;
	pack_u32x2_u32	$d4, u32x2(0,0), $s9, 1;
	or_b64	$d3, $d3, $d4;
	pack_u32x2_u32	$d4, u32x2(0,0), $s8, 1;
	sub_f64	$d4, $d3, $d4;
	mul_f64	$d7, $d1, $d4;
	pack_u32x2_u32	$d3, u32x2(0,0), $s7, 1;
	sub_f64	$d2, $d2, $d3;
	mul_f64	$d3, $d1, $d2;
	shr_u32	$s7, $s4, 16;
	bytealign_b32	$s5, $s6, $s5, $s0;
	shl_u32	$s6, $s5, 16;
	add_f64	$d5, $d3, $d7;
	or_b32	$s6, $s6, $s7;
	neg_f64	$d6, $d7;
	fma_f64	$d6, $d4, $d1, $d6;
	sub_f64	$d4, $d5, $d7;
	cvt_u64_u32	$d7, $s6;
	shr_u32	$s6, $s5, 16;
	add_u32	$s5, $s3, 1177550848;
	or_b32	$s6, $s5, $s6;
	pack_u32x2_u32	$d8, u32x2(0,0), $s6, 1;
	sub_f64	$d10, $d3, $d4;
	or_b64	$d4, $d7, $d8;
	add_f64	$d11, $d6, $d10;
	pack_u32x2_u32	$d7, u32x2(0,0), $s5, 1;
	sub_f64	$d7, $d4, $d7;
	mul_f64	$d12, $d1, $d7;
	add_f64	$d4, $d12, $d11;
	mul_f64	$d5, $d5, 0D3f50000000000000;
	fract_f64	$d5, $d5;
	mul_f64	$d5, $d5, 0D4090000000000000;
	add_f64	$d8, $d5, $d4;
	cmp_lt_b1_f64	$c0, $d8, 0D0000000000000000;
	cmov_b64	$d8, $c0, 4652218415073722368, 0;
	add_f64	$d8, $d5, $d8;
	add_f64	$d5, $d4, $d8;
	fract_f64	$d9, $d5;
	sub_f64	$d5, $d5, $d9;
	sub_f64	$d9, $d8, $d5;
	add_f64	$d8, $d4, $d9;
	cmp_ge_b1_f64	$c0, $d8, 0D3fe0000000000000;
	cvt_u32_b1	$s5, $c0;
	bytealign_b32	$s0, $s2, $s1, $s0;
	cvt_u64_u32	$d13, $s0;
	and_b32	$s1, $s4, 65535;
	add_u32	$s0, $s3, 1127219200;
	or_b32	$s1, $s0, $s1;
	pack_u32x2_u32	$d14, u32x2(0,0), $s1, 1;
	or_b64	$d13, $d13, $d14;
	sub_f64	$d14, $d4, $d11;
	sub_f64	$d14, $d12, $d14;
	sub_f64	$d6, $d11, $d6;
	sub_f64	$d10, $d10, $d6;
	neg_f64	$d11, $d3;
	neg_f64	$d6, $d12;
	add_f64	$d3, $d10, $d14;
	fma_f64	$d10, $d2, $d1, $d11;
	mov_b64	$d2, $d13;
	pack_u32x2_u32	$d11, u32x2(0,0), $s0, 1;
	sub_f64	$d2, $d2, $d11;
	mul_f64	$d11, $d1, $d2;
	neg_f64	$d12, $d11;
	fma_f64	$d2, $d2, $d1, $d12;
	fma_f64	$d6, $d7, $d1, $d6;
	add_f64	$d7, $d10, $d3;
	sub_f64	$d1, $d7, $d10;
	sub_f64	$d3, $d3, $d1;
	add_f64	$d1, $d11, $d7;
	sub_f64	$d7, $d1, $d7;
	sub_f64	$d7, $d11, $d7;
	add_f64	$d10, $d3, $d7;
	sub_f64	$d3, $d8, $d9;
	sub_f64	$d7, $d4, $d3;
	add_f64	$d3, $d1, $d7;
	cvt_near_f32_s32	$s0, $s5;
	cvt_ftz_f64_f32	$d4, $s0;
	sub_f64	$d8, $d8, $d4;
	add_f64	$d4, $d3, $d8;
	add_f64	$d6, $d6, $d10;
	add_f64	$d2, $d2, $d6;
	cvt_ftz_near_f32_f64	$s0, $d5;
	cvt_ftz_s32_f32	$s0, $s0;
	mul_f64	$d5, $d4, 0Dbff921fb54442d18;
	fma_f64	$d5, $d4, 0D3ff921fb54442d18, $d5;
	fma_f64	$d5, $d4, 0D3c91a62633145c06, $d5;
	sub_f64	$d6, $d3, $d7;
	sub_f64	$d1, $d1, $d6;
	add_f64	$d1, $d2, $d1;
	sub_f64	$d2, $d4, $d8;
	sub_f64	$d2, $d3, $d2;
	add_f64	$d1, $d1, $d2;
	fma_f64	$d2, $d1, 0D3ff921fb54442d18, $d5;
	mul_f64	$d3, $d4, 0D3ff921fb54442d18;
	add_u32	$s0, $s5, $s0;
	add_f64	$d1, $d2, $d3;
	sub_f64	$d3, $d1, $d3;
	sub_f64	$d2, $d2, $d3;

@BB0_3:
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s1, $c0;
	class_b1_f64	$c0, $d0, 516;
	cvt_u32_b1	$s2, $c0;
	or_b32	$s1, $s2, $s1;
	and_b32	$s2, $s0, 2;
	cmp_gt_b1_u32	$c0, $s2, 1;
	cvt_u32_b1	$s2, $c0;
	mul_f64	$d0, $d1, $d1;
	mul_f64	$d4, $d0, 0D3fe0000000000000;
	sub_f64	$d3, 0D3ff0000000000000, $d4;
	sub_f64	$d5, 0D3ff0000000000000, $d3;
	sub_f64	$d4, $d5, $d4;
	fma_f64	$d4, $d1, $d2, $d4;
	fma_f64	$d5, 0Dbda907db46cc5e42, $d0, 0D3e21eeb69037ab78;
	fma_f64	$d5, $d5, $d0, 0Dbe927e4fa17f65f6;
	fma_f64	$d5, $d5, $d0, 0D3efa01a019f4ec90;
	fma_f64	$d5, $d5, $d0, 0Dbf56c16c16c16967;
	fma_f64	$d5, $d5, $d0, 0D3fa5555555555555;
	fma_f64	$d6, 0D3de5e0b2f9a43bb8, $d0, 0Dbe5ae600b42fdfa7;
	mul_f64	$d7, $d0, $d0;
	fma_f64	$d4, $d5, $d7, $d4;
	fma_f64	$d5, $d6, $d0, 0D3ec71de3796cde01;
	fma_f64	$d5, $d5, $d0, 0Dbf2a01a019e83e5c;
	fma_f64	$d6, $d5, $d0, 0D3f81111111110bb3;
	mul_f64	$d5, $d1, $d0;
	neg_f64	$d5, $d5;
	and_b32	$s0, $s0, 1;
	mul_f64	$d7, $d2, 0D3fe0000000000000;
	add_f64	$d3, $d3, $d4;
	fma_f64	$d4, $d5, $d6, $d7;
	neg_f64	$d2, $d2;
	fma_f64	$d0, $d4, $d0, $d2;
	fma_f64	$d0, $d5, 0Dbfc5555555555555, $d0;
	sub_f64	$d0, $d1, $d0;
	neg_f64	$d0, $d0;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d0, $c0, $d0, $d3;
	and_b32	$s0, $s1, 1;
	shl_u32	$s1, $s2, 31;
	mov_b64	$d1, $d0;
	and_b64	$d0, $d1, 4294967295;
	shr_u64	$d1, $d1, 32;
	cvt_u32_u64	$s2, $d1;
	xor_b32	$s1, $s2, $s1;
	pack_u32x2_u32	$d1, u32x2(0,0), $s1, 1;
	or_b64	$d0, $d0, $d1;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d0, $c0, 9221120237041090560, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_cos];
	ret;
};


decl function &_gcc_minmag(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y);


function &_gcc_minmag(arg_f64 %_gcc_minmag)(
	arg_f64 %x,
	arg_f64 %y)
{

@_gcc_minmag_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%y];
	and_b64	$d2, $d0, 9223372036854775807;
	ld_arg_align(8)_f64	$d1, [%x];
	and_b64	$d3, $d1, 9223372036854775807;
	cmp_lt_b1_u64	$c0, $d3, $d2;
	cvt_u32_b1	$s0, $c0;
	cmp_lt_b1_u64	$c0, $d2, $d3;
	cvt_u32_b1	$s1, $c0;
	cmp_eq_b1_s64	$c0, $d3, $d2;
	cvt_u32_b1	$s2, $c0;
	or_b64	$d2, $d0, $d1;
	neg_s32	$s2, $s2;
	cvt_s64_s32	$d3, $s2;
	and_b64	$d2, $d3, $d2;
	neg_s32	$s1, $s1;
	cvt_s64_s32	$d3, $s1;
	and_b64	$d0, $d3, $d0;
	neg_s32	$s0, $s0;
	cvt_s64_s32	$d3, $s0;
	and_b64	$d1, $d3, $d1;
	or_b64	$d0, $d1, $d0;
	or_b64	$d0, $d0, $d2;
	st_arg_align(8)_f64	$d0, [%_gcc_minmag];
	ret;
};


decl function &_gcc_cospi(arg_f64 %ret)(arg_f64 %x);


function &_gcc_cospi(arg_f64 %_gcc_cospi)(arg_f64 %x)
{

@_gcc_cospi_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	and_b64	$d1, $d0, 9223372036854775807;
	mov_b64	$d0, $d1;
	cvt_s64_f64	$d3, $d0;
	cvt_near_f64_s64	$d2, $d3;
	sub_f64	$d2, $d0, $d2;
	sub_f64	$d4, 0D3ff0000000000000, $d2;
	add_f64	$d5, $d2, 0Dbfe0000000000000;
	cmp_le_b1_f64	$c0, $d2, 0D3fe8000000000000;
	cmov_b64	$d4, $c0, $d5, $d4;
	cmp_lt_b1_u64	$c0, $d1, 9218868437227405312;
	cmov_b64	$d1, $c0, 4607182418800017408, 9221120237041090560;
	shl_u64	$d3, $d3, 63;
	or_b64	$d5, $d3, 4607182418800017408;
	cmp_lt_b1_f64	$c0, $d0, 0D4340000000000000;
	cmov_b64	$d1, $c0, $d5, $d1;
	sub_f64	$d5, 0D3fe0000000000000, $d2;
	cmp_lt_b1_f64	$c1, $d2, 0D3fe0000000000000;
	cmov_b64	$d4, $c1, $d5, $d4;
	cmp_le_b1_f64	$c0, $d2, 0D3fd0000000000000;
	cmov_b64	$d4, $c0, $d2, $d4;
	cmp_gtu_b1_f64	$c2, $d2, 0D3fe8000000000000;
	or_b1	$c0, $c0, $c2;
	xor_b64	$d2, $d3, 9223372036854775808;
	cmov_b64	$d2, $c1, $d3, $d2;
	mul_f64	$d3, $d4, 0D400921fb54442d18;
	mul_f64	$d4, $d3, $d3;
	mul_f64	$d6, $d4, 0D3fe0000000000000;
	sub_f64	$d5, 0D3ff0000000000000, $d6;
	sub_f64	$d7, 0D3ff0000000000000, $d5;
	sub_f64	$d6, $d7, $d6;
	fma_f64	$d7, 0Dbda907db46cc5e42, $d4, 0D3e21eeb69037ab78;
	fma_f64	$d7, $d7, $d4, 0Dbe927e4fa17f65f6;
	fma_f64	$d7, $d7, $d4, 0D3efa01a019f4ec90;
	fma_f64	$d7, $d7, $d4, 0Dbf56c16c16c16967;
	fma_f64	$d7, $d7, $d4, 0D3fa5555555555555;
	mul_f64	$d8, $d4, $d4;
	fma_f64	$d6, $d7, $d8, $d6;
	fma_f64	$d7, 0D3de5e0b2f9a43bb8, $d4, 0Dbe5ae600b42fdfa7;
	fma_f64	$d7, $d7, $d4, 0D3ec71de3796cde01;
	fma_f64	$d7, $d7, $d4, 0Dbf2a01a019e83e5c;
	add_f64	$d5, $d5, $d6;
	fma_f64	$d6, $d7, $d4, 0D3f81111111110bb3;
	mul_f64	$d7, $d3, $d4;
	neg_f64	$d7, $d7;
	mul_f64	$d6, $d6, $d7;
	mul_f64	$d4, $d4, $d6;
	fma_f64	$d4, $d7, 0Dbfc5555555555555, $d4;
	sub_f64	$d3, $d3, $d4;
	cmov_b64	$d3, $c0, $d5, $d3;
	xor_b64	$d2, $d3, $d2;
	cmp_lt_b1_f64	$c0, $d0, 0D4330000000000000;
	cmov_b64	$d0, $c0, $d2, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_cospi];
	ret;
};


decl function &_gcc_log1p(arg_f64 %ret)(arg_f64 %x);


function &_gcc_log1p(arg_f64 %_gcc_log1p)(arg_f64 %x)
{

@_gcc_log1p_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	cmp_gt_b1_f64	$c0, $d0, 0D3fb082b577d34ed8;
	cmp_lt_b1_f64	$c1, $d0, 0Dbfaf0540438fd5c3;
	or_b1	$c0, $c1, $c0;
	class_b1_f64	$c1, $d0, 516;
	cvt_u32_b1	$s0, $c1;
	and_b32	$s0, $s0, 1;
	add_f64	$d1, $d0, 0D3ff0000000000000;
	mov_b64	$d2, $d1;
	shr_s64	$d1, $d2, 45;
	cvt_u32_u64	$s2, $d1;
	and_b32	$s1, $s2, 1;
	bitextract_u32	$s2, $s2, 1, 6;
	or_b32	$s2, $s2, 64;
	add_u32	$s1, $s2, $s1;
	cvt_near_f64_s32	$d3, $s1;
	mul_f64	$d1, $d3, 0D3f90000000000000;
	shr_u64	$d4, $d2, 52;
	cvt_u32_u64	$s2, $d4;
	and_b32	$s3, $s2, 2047;
	sub_u32	$s2, 2046, $s3;
	cvt_u64_u32	$d4, $s2;
	shl_u64	$d4, $d4, 52;
	mov_b64	$d5, $d4;
	sub_f64	$d4, $d5, $d1;
	fma_f64	$d4, $d5, $d0, $d4;
	mul_f64	$d3, $d3, 0Dbf90000000000000;
	fma_f64	$d3, $d5, $d0, $d3;
	add_f64	$d3, $d5, $d3;
	add_u32	$s2, $s3, 4294966273;
	cmp_lt_b1_s32	$c1, $s2, 53;
	cmov_b64	$d3, $c1, $d4, $d3;
	and_b64	$d2, $d2, 4503599627370495;
	or_b64	$d2, $d2, 4607182418800017408;
	sub_f64	$d2, $d2, $d1;
	add_u32	$s3, $s3, 4294966274;
	cmp_gt_b1_u32	$c1, $s3, 61;
	cmov_b64	$d2, $c1, $d2, $d3;
	add_f64	$d3, $d0, 0D4000000000000000;
	div_f64	$d3, $d0, $d3;
	add_f64	$d4, $d3, $d3;
	mul_f64	$d5, $d4, $d4;
	mul_f64	$d4, $d4, $d5;
	fma_f64	$d6, $d5, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	fma_f64	$d6, $d5, $d6, 0D3f89999999bac6d4;
	fma_f64	$d5, $d5, $d6, 0D3fb55555555554e6;
	mul_f64	$d3, $d3, $d0;
	neg_f64	$d3, $d3;
	fma_f64	$d3, $d4, $d5, $d3;
	add_u32	$s1, $s1, 4294967232;
	cvt_s64_s32	$d4, $s1;
	shl_u64	$d5, $d4, 4;
	add_f64	$d3, $d3, $d0;
	ld_v2_readonly_align(16)_f64	($d6, $d4), [&__math64_LN_TBL][$d5];
	cvt_near_f64_s32	$d5, $s2;
	fma_f64	$d1, 0D3fe0000000000000, $d2, $d1;
	div_f64	$d1, $d2, $d1;
	mul_f64	$d7, $d1, $d1;
	fma_f64	$d2, $d7, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d8, $d7, $d2, 0D3fb5555555555557;
	fma_f64	$d2, $d5, 0D3fe62e42e0000000, $d6;
	mul_f64	$d6, $d7, $d8;
	fma_f64	$d1, $d1, $d6, $d1;
	add_f64	$d1, $d4, $d1;
	fma_f64	$d1, $d5, 0D3e6efa39ef35793c, $d1;
	add_f64	$d1, $d2, $d1;
	cmov_b64	$d1, $c0, $d1, $d3;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d1, $c0, $d0, $d1;
	cmp_lt_b1_f64	$c0, $d0, 0Dbff0000000000000;
	cmov_b64	$d1, $c0, 9221120237041090560, $d1;
	cmp_eq_b1_f64	$c0, $d0, 0Dbff0000000000000;
	cmov_b64	$d0, $c0, 18442240474082181120, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_log1p];
	ret;
};


decl function &_gcc_acos(arg_f64 %ret)(arg_f64 %x);


function &_gcc_acos(arg_f64 %_gcc_acos)(arg_f64 %x)
{

@_gcc_acos_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s0, $s0, 1;
	abs_f64	$d4, $d0;
	sub_f64	$d3, 0D3ff0000000000000, $d4;
	mov_b64	$d1, $d0;
	mul_f64	$d2, $d4, $d4;
	mul_f64	$d3, $d3, 0D3fe0000000000000;
	shr_u64	$d4, $d4, 32;
	cvt_u32_u64	$s1, $d4;
	shr_s32	$s1, $s1, 20;
	add_u32	$s1, $s1, 4294966273;
	cmp_gt_b1_s32	$c0, $s1, -2;
	cmov_b64	$d3, $c0, $d3, $d2;
	shr_u64	$d4, $d1, 32;
	sqrt_f64	$d2, $d3;
	cvt_u32_u64	$s2, $d4;
	mov_b64	$d4, $d2;
	and_b64	$d4, $d4, 18446744069414584320;
	neg_f64	$d5, $d4;
	fma_f64	$d5, $d5, $d4, $d3;
	fma_f64	$d6, $d3, 0D3fbb1a422982ce76, 0Dbfee324ab418f78d;
	fma_f64	$d6, $d3, $d6, 0D40062021571dccfc;
	fma_f64	$d6, $d3, $d6, 0Dc00a4646f903cdea;
	add_f64	$d7, $d2, $d4;
	div_f64	$d5, $d5, $d7;
	fma_f64	$d6, $d3, $d6, 0D3ff5d6b12001f228;
	fma_f64	$d7, $d3, 0D3f0951665d321061, 0D3f51e5f887a62135;
	fma_f64	$d7, $d3, $d7, 0Dbfac28d390c29690;
	fma_f64	$d7, $d3, $d7, 0D3fd1a2bec1b7ef59;
	fma_f64	$d7, $d3, $d7, 0Dbfdc7b297e269eac;
	fma_f64	$d7, $d3, $d7, 0D3fcd1e4180029834;
	div_f64	$d6, $d7, $d6;
	mul_f64	$d3, $d3, $d6;
	fma_f64	$d5, $d2, $d3, $d5;
	add_f64	$d4, $d4, $d5;
	add_f64	$d4, $d4, $d4;
	fma_f64	$d5, $d2, $d3, 0Dbc91a62633145c07;
	add_f64	$d2, $d2, $d5;
	fma_f64	$d2, 0Dc000000000000000, $d2, 0D400921fb54442d18;
	cmp_lt_b1_s32	$c1, $s2, 0;
	cmov_b64	$d2, $c1, $d2, $d4;
	neg_f64	$d4, $d0;
	fma_f64	$d3, $d4, $d3, 0D3c91a62633145c07;
	sub_f64	$d3, $d0, $d3;
	sub_f64	$d3, 0D3ff921fb54442d18, $d3;
	cmov_b64	$d2, $c0, $d2, $d3;
	cmp_lt_b1_s32	$c0, $s1, -56;
	cmov_b64	$d2, $c0, 4609753056924675352, $d2;
	or_b64	$d1, $d1, 9221120237041090560;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d1, $c0, $d1, $d2;
	cmp_eq_b1_f64	$c0, $d0, 0D3ff0000000000000;
	cmov_b64	$d1, $c0, 0, $d1;
	cmp_eq_b1_f64	$c0, $d0, 0Dbff0000000000000;
	cmov_b64	$d0, $c0, 4614256656552045848, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_acos];
	ret;
};


decl function &_gcc_powr(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y);


function &_gcc_powr(arg_f64 %_gcc_powr)(
	arg_f64 %x,
	arg_f64 %y)
{
	align(4) spill_u8 %__spillStack[36];

@_gcc_powr_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d5, [%y];
	mov_b64	$d0, $d5;
	and_b64	$d1, $d0, 9223372036854775807;
	shr_u64	$d2, $d1, 52;
	cvt_u32_u64	$s1, $d2;
	sub_u32	$s0, 1075, $s1;
	shl_u64	$d2, 1, $s0;
	and_b64	$d3, $d2, $d1;
	cmp_ne_b1_s64	$c0, $d3, 0;
	cmov_b32	$s0, $c0, 1, 2;
	add_u64	$d2, $d2, 9223372036854775807;
	and_b64	$d2, $d2, $d1;
	cmp_ne_b1_s64	$c0, $d2, 0;
	cmov_b32	$s0, $c0, 0, $s0;
	add_u32	$s2, $s1, 4294966274;
	cmp_lt_b1_s32	$c0, $s2, 1;
	cmov_b32	$s1, $c0, 0, 2;
	cmp_gt_b1_s32	$c1, $s2, 53;
	cmov_b32	$s1, $c1, 2, $s1;
	cmp_lt_b1_s32	$c1, $s2, 54;
	cvt_u32_b1	$s2, $c1;
	cvt_u32_b1	$s3, $c0;
	ld_arg_align(8)_f64	$d2, [%x];
	and_b64	$d3, $d2, 9223372036854775807;
	cmp_eq_b1_s64	$c1, $d1, 9218868437227405312;
	cmp_eq_b1_s64	$c0, $d3, 4607182418800017408;
	and_b1	$c1, $c0, $c1;
	cvt_u32_b1	$s4, $c1;
	st_spill_align(4)_u32	$s4, [%__spillStack][12];
	cmp_lt_b1_u64	$c1, $d1, 9218868437227405312;
	and_b1	$c0, $c0, $c1;
	cvt_u32_b1	$s4, $c0;
	st_spill_align(4)_u32	$s4, [%__spillStack][16];
	cmp_ne_b1_s64	$c0, $d1, $d0;
	cmp_eq_b1_s64	$c1, $d1, $d0;
	cmp_eq_b1_s64	$c2, $d3, 0;
	and_b1	$c3, $c2, $c1;
	cvt_u32_b1	$s4, $c3;
	st_spill_align(4)_u32	$s4, [%__spillStack];
	and_b1	$c2, $c0, $c2;
	cvt_u32_b1	$s4, $c2;
	st_spill_align(4)_u32	$s4, [%__spillStack][8];
	cmp_lt_b1_s64	$c2, $d2, 9218868437227405312;
	cmp_eq_b1_s64	$c3, $d1, 0;
	and_b1	$c2, $c2, $c3;
	cvt_u32_b1	$s4, $c2;
	st_spill_align(4)_u32	$s4, [%__spillStack][24];
	cmp_eq_b1_s64	$c2, $d3, 9218868437227405312;
	and_b1	$c3, $c2, $c3;
	cvt_u32_b1	$s4, $c3;
	st_spill_align(4)_u32	$s4, [%__spillStack][20];
	and_b1	$c1, $c2, $c1;
	cvt_u32_b1	$s4, $c1;
	st_spill_align(4)_u32	$s4, [%__spillStack][28];
	and_b1	$c7, $c0, $c2;
	cmp_eq_b1_s64	$c4, $d0, 9218868437227405312;
	and_b1	$c0, $c2, $c4;
	cvt_u32_b1	$s4, $c0;
	st_spill_align(4)_u32	$s4, [%__spillStack][32];
	cmp_gt_b1_u64	$c2, $d3, 4607182418800017408;
	cmp_eq_b1_s64	$c1, $d0, -4503599627370496;
	cmp_lt_b1_u64	$c5, $d3, 4607182418800017408;
	and_b1	$c3, $c5, $c1;
	and_b1	$c1, $c2, $c1;
	and_b1	$c2, $c2, $c4;
	and_b1	$c4, $c5, $c4;
	not_b32	$s3, $s3;
	and_b32	$s2, $s3, $s2;
	cmp_ne_b1_s32	$c5, $s2, 0;
	cmov_b32	$s1, $c5, $s0, $s1;
	and_b64	$d4, $d2, 4503599627370495;
	or_b64	$d6, $d4, 4607182418800017408;
	add_f64	$d6, $d6, 0Dbff0000000000000;
	shr_u64	$d7, $d3, 52;
	cvt_u32_u64	$s2, $d7;
	add_u32	$s0, $s2, 4294966273;
	bitextract_u64	$d7, $d6, 52, 11;
	add_u64	$d7, $d7, 4294965251;
	cvt_u32_u64	$s3, $d7;
	and_b64	$d6, $d6, 4503599627370495;
	cmp_eq_b1_s32	$c5, $s2, 0;
	cmov_b64	$d7, $c5, $d6, $d4;
	cmov_b32	$s0, $c5, $s3, $s0;
	cmp_ne_b1_s64	$c6, $d3, $d2;
	cmp_ne_b1_s64	$c5, $d3, 0;
	and_b1	$c5, $c5, $c6;
	cmp_eq_b1_s32	$c0, $s1, 1;
	and_b1	$c0, $c0, $c6;
	cmov_b64	$d4, $c0, 13830554455654793216, 4607182418800017408;
	and_b64	$d6, $d0, 18446744073575333888;
	and_b64	$d8, $d7, 4486007441326080;
	shl_u64	$d9, $d7, 1;
	and_b64	$d9, $d9, 17592186044416;
	sub_f64	$d5, $d5, $d6;
	add_u64	$d9, $d9, $d8;
	or_b64	$d8, $d9, 4602678819172646912;
	or_b64	$d7, $d7, 4602678819172646912;
	sub_f64	$d7, $d8, $d7;
	shr_u64	$d12, $d9, 40;
	ld_v2_readonly_align(16)_f64	($d9, $d10), [&__math64_LOG_F_INV_TBL][$d12];
	add_f64	$d9, $d9, $d10;
	mul_f64	$d10, $d7, $d9;
	and_b64	$d13, $d10, 18446744073575333888;
	ld_v2_readonly_align(16)_f64	($d11, $d10), [&__math64_POWLOG_TBL][$d12];
	neg_f64	$d14, $d8;
	cvt_near_f64_s32	$d12, $s0;
	mov_b64	$d8, $d13;
	fma_f64	$d7, $d14, $d8, $d7;
	mul_f64	$d9, $d7, $d9;
	fma_f64	$d7, $d12, 0D3fe62e42e0000000, $d11;
	fma_f64	$d10, $d12, 0D3e6efa39ef35793c, $d10;
	add_f64	$d11, $d9, $d8;
	fma_f64	$d12, $d11, 0D3fc2492492492492, 0D3fc5555555555555;
	fma_f64	$d12, $d11, $d12, 0D3fc999999999999a;
	fma_f64	$d12, $d11, $d12, 0D3fd0000000000000;
	fma_f64	$d14, $d11, $d12, 0D3fd5555555555555;
	mul_f64	$d12, $d8, 0D3fe0000000000000;
	mul_f64	$d13, $d8, $d12;
	add_f64	$d12, $d8, $d13;
	sub_f64	$d15, $d8, $d12;
	add_f64	$d13, $d13, $d15;
	mul_f64	$d14, $d14, $d11;
	mul_f64	$d14, $d11, $d14;
	mul_f64	$d15, $d9, 0D3fe0000000000000;
	mul_f64	$d11, $d11, $d14;
	fma_f64	$d11, $d15, $d9, $d11;
	fma_f64	$d8, $d8, $d9, $d11;
	add_f64	$d8, $d9, $d8;
	add_f64	$d8, $d8, $d13;
	sub_f64	$d8, $d10, $d8;
	sub_f64	$d9, $d8, $d12;
	add_f64	$d10, $d12, $d9;
	sub_f64	$d10, $d8, $d10;
	add_f64	$d8, $d7, $d9;
	sub_f64	$d7, $d7, $d8;
	add_f64	$d7, $d9, $d7;
	add_f64	$d9, $d10, $d7;
	mov_b64	$d7, $d8;
	and_b64	$d7, $d7, 18446744073575333888;
	sub_f64	$d8, $d8, $d7;
	add_f64	$d8, $d9, $d8;
	mul_f64	$d9, $d5, $d8;
	fma_f64	$d8, $d6, $d8, $d9;
	fma_f64	$d8, $d5, $d7, $d8;
	fma_f64	$d5, $d6, $d7, $d8;
	neg_f64	$d9, $d5;
	fma_f64	$d6, $d6, $d7, $d9;
	add_f64	$d6, $d8, $d6;
	mul_f64	$d7, $d5, 0D40571547652b82fe;
	cvt_s32_f64	$s0, $d7;
	cvt_near_f64_s32	$d7, $s0;
	fma_f64	$d8, $d7, 0Dbf862e42f0000000, $d5;
	mul_f64	$d7, $d7, 0Dbdfdf473de6af278;
	add_f64	$d7, $d8, $d7;
	add_f64	$d6, $d6, $d7;
	fma_f64	$d7, $d6, 0D3f56c1728d739765, 0D3f811115b7aa905e;
	fma_f64	$d7, $d6, $d7, 0D3fa5555555545d4e;
	fma_f64	$d7, $d6, $d7, 0D3fc5555555548f7c;
	fma_f64	$d7, $d6, $d7, 0D3fe0000000000000;
	mul_f64	$d8, $d6, $d6;
	and_b32	$s1, $s0, 63;
	cvt_u64_u32	$d9, $s1;
	fma_f64	$d6, $d8, $d7, $d6;
	shl_u64	$d9, $d9, 4;
	ld_v2_readonly_align(16)_f64	($d7, $d8), [&__math64_TWO_TO_JBY64_EP][$d9];
	add_f64	$d9, $d7, $d8;
	fma_f64	$d6, $d9, $d6, $d8;
	add_f64	$d6, $d7, $d6;
	mul_f64	$d7, $d6, 0D4340000000000000;
	mov_b64	$d8, $d7;
	shr_u64	$d7, $d8, 52;
	cvt_u32_u64	$s1, $d7;
	and_b32	$s1, $s1, 2047;
	add_u32	$s1, $s1, 4294967243;
	mov_b64	$d7, $d6;
	shr_u64	$d9, $d7, 52;
	cvt_u32_u64	$s2, $d9;
	and_b32	$s2, $s2, 2047;
	cmp_eq_b1_s32	$c6, $s2, 0;
	cmov_b32	$s2, $c6, $s1, $s2;
	cmov_b64	$d8, $c6, $d8, $d7;
	shr_s32	$s3, $s0, 6;
	cmp_eq_b1_s32	$c6, $s3, 0;
	cmp_eq_b1_f64	$c0, $d6, 0D0000000000000000;
	or_b1	$c6, $c6, $c0;
	class_b1_f64	$c0, $d6, 516;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s0, $s0, 1;
	cvt_u32_b1	$s1, $c6;
	and_b64	$d8, $d8, 9227875636482146303;
	add_u32	$s2, $s2, $s3;
	max_s32	$s2, $s2, -2047;
	min_s32	$s2, $s2, 2047;
	cvt_u64_u32	$d9, $s2;
	shl_u64	$d9, $d9, 52;
	or_b64	$d9, $d8, $d9;
	add_u32	$s3, $s2, 53;
	cvt_u64_u32	$d10, $s3;
	shl_u64	$d10, $d10, 52;
	or_b64	$d8, $d8, $d10;
	mul_f64	$d8, $d8, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c0, $s2, 0;
	cmov_b64	$d8, $c0, $d9, $d8;
	and_b64	$d7, $d7, 9223372036854775808;
	or_b64	$d9, $d7, 9218868437227405312;
	cmp_eq_b1_s32	$c0, $s2, 2047;
	cmov_b64	$d8, $c0, $d9, $d8;
	cmp_lt_b1_s32	$c0, $s2, -53;
	cmov_b64	$d7, $c0, $d7, $d8;
	or_b32	$s0, $s1, $s0;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d6, $c0, $d6, $d7;
	cmp_gt_b1_f64	$c0, $d5, 0D40862e42fefa39ef;
	cmov_b64	$d6, $c0, 9218868437227405312, $d6;
	cmp_lt_b1_f64	$c0, $d5, 0Dc0874910d52d3051;
	cmov_b64	$d5, $c0, 0, $d6;
	mul_f64	$d4, $d4, $d5;
	cmov_b64	$d4, $c3, 9218868437227405312, $d4;
	cmov_b64	$d4, $c4, 0, $d4;
	ld_spill_align(4)_u32	$s0, [%__spillStack][16];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, 4607182418800017408, $d4;
	ld_spill_align(4)_u32	$s0, [%__spillStack][12];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, 9221120237041090560, $d4;
	cmov_b64	$d4, $c1, 0, $d4;
	cmov_b64	$d4, $c2, 9218868437227405312, $d4;
	ld_spill_align(4)_u32	$s0, [%__spillStack][24];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, 4607182418800017408, $d4;
	cmov_b64	$d4, $c7, 0, $d4;
	ld_spill_align(4)_u32	$s0, [%__spillStack][28];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, 9218868437227405312, $d4;
	ld_spill_align(4)_u32	$s0, [%__spillStack][32];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, 9218868437227405312, $d4;
	ld_spill_align(4)_u32	$s0, [%__spillStack][20];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, 9221120237041090560, $d4;
	ld_spill_align(4)_u32	$s0, [%__spillStack][8];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, 9218868437227405312, $d4;
	ld_spill_align(4)_u32	$s0, [%__spillStack];
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d4, $c0, 0, $d4;
	or_b64	$d5, $d0, $d2;
	and_b64	$d5, $d5, 9223372036854775807;
	cmp_eq_b1_s64	$c0, $d5, 0;
	cmov_b64	$d4, $c0, 9221120237041090560, $d4;
	cmov_b64	$d4, $c5, 9221120237041090560, $d4;
	cmp_gt_b1_u64	$c0, $d3, 9218868437227405312;
	cmov_b64	$d2, $c0, $d2, $d4;
	cmp_gt_b1_u64	$c0, $d1, 9218868437227405312;
	cmov_b64	$d0, $c0, $d0, $d2;
	st_arg_align(8)_f64	$d0, [%_gcc_powr];
	ret;
};


decl function &_gcc_log(arg_f64 %ret)(arg_f64 %x);


function &_gcc_log(arg_f64 %_gcc_log)(arg_f64 %x)
{

@_gcc_log_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	mov_b64	$d1, $d0;
	or_b64	$d2, $d1, 274719577269600256;
	add_f64	$d2, $d2, 0D83d0000000000000;
	cmp_lt_b1_u64	$c0, $d1, 4503599627370496;
	cmov_b64	$d1, $c0, $d2, $d1;
	cmov_b32	$s2, $c0, 4294966213, 4294966273;
	cmp_le_b1_f64	$c0, $d0, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c1, $d0, 0D3fee0faa00000000;
	and_b1	$c0, $c1, $c0;
	cmp_lt_b1_f64	$c1, $d0, 0D0000000000000000;
	cvt_u32_b1	$s0, $c1;
	class_b1_f64	$c1, $d0, 3;
	cvt_u32_b1	$s1, $c1;
	and_b32	$s1, $s1, 1;
	class_b1_f64	$c1, $d0, 516;
	cvt_u32_b1	$s3, $c1;
	and_b32	$s3, $s3, 1;
	shr_s64	$d3, $d1, 45;
	add_f64	$d2, $d0, 0Dbff0000000000000;
	cvt_u32_u64	$s5, $d3;
	add_f64	$d3, $d2, 0D4000000000000000;
	and_b32	$s4, $s5, 1;
	bitextract_u32	$s5, $s5, 1, 6;
	div_f64	$d3, $d2, $d3;
	or_b32	$s5, $s5, 64;
	add_f64	$d4, $d3, $d3;
	add_u32	$s4, $s5, $s4;
	mul_f64	$d6, $d4, $d4;
	cvt_near_f64_s32	$d5, $s4;
	mul_f64	$d4, $d4, $d6;
	fma_f64	$d7, $d6, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	fma_f64	$d7, $d6, $d7, 0D3f89999999bac6d4;
	fma_f64	$d6, $d6, $d7, 0D3fb55555555554e6;
	mul_f64	$d3, $d2, $d3;
	neg_f64	$d3, $d3;
	fma_f64	$d4, $d4, $d6, $d3;
	mul_f64	$d3, $d5, 0D3f80000000000000;
	shr_u64	$d5, $d1, 52;
	and_b64	$d1, $d1, 4503599627370495;
	or_b64	$d1, $d1, 4602678819172646912;
	sub_f64	$d1, $d1, $d3;
	cvt_u32_u64	$s5, $d5;
	fma_f64	$d3, $d1, 0D3fe0000000000000, $d3;
	div_f64	$d3, $d1, $d3;
	add_f64	$d1, $d2, $d4;
	mul_f64	$d2, $d3, $d3;
	add_u32	$s4, $s4, 4294967232;
	cvt_s64_s32	$d4, $s4;
	shl_u64	$d6, $d4, 4;
	ld_v2_readonly_align(16)_f64	($d4, $d5), [&__math64_LN_TBL][$d6];
	and_b32	$s4, $s5, 2047;
	add_u32	$s2, $s2, $s4;
	cvt_near_f64_s32	$d6, $s2;
	fma_f64	$d7, $d2, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d7, $d2, $d7, 0D3fb5555555555557;
	mul_f64	$d2, $d2, $d7;
	fma_f64	$d2, $d3, $d2, $d3;
	add_f64	$d2, $d5, $d2;
	fma_f64	$d3, $d6, 0D3fe62e42e0000000, $d4;
	fma_f64	$d2, $d6, 0D3e6efa39ef35793c, $d2;
	add_f64	$d2, $d3, $d2;
	cmov_b64	$d1, $c0, $d1, $d2;
	cvt_b1_u32	$c0, $s3;
	cmov_b64	$d1, $c0, 9218868437227405312, $d1;
	or_b32	$s0, $s1, $s0;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d1, $c0, 9221120237041090560, $d1;
	cmp_eq_b1_f64	$c0, $d0, 0D0000000000000000;
	cmov_b64	$d0, $c0, 18442240474082181120, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_log];
	ret;
};


decl function &_gcc_sinpi(arg_f64 %ret)(arg_f64 %x);


function &_gcc_sinpi(arg_f64 %_gcc_sinpi)(arg_f64 %x)
{

@_gcc_sinpi_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	and_b64	$d1, $d0, 9223372036854775808;
	xor_b64	$d3, $d1, $d0;
	mov_b64	$d0, $d3;
	cvt_s64_f64	$d2, $d0;
	cvt_near_f64_s64	$d4, $d2;
	sub_f64	$d4, $d0, $d4;
	sub_f64	$d5, 0D3ff0000000000000, $d4;
	add_f64	$d6, $d4, 0Dbfe0000000000000;
	cmp_le_b1_f64	$c0, $d4, 0D3fe8000000000000;
	cmov_b64	$d5, $c0, $d6, $d5;
	sub_f64	$d6, 0D3fe0000000000000, $d4;
	cmp_lt_b1_f64	$c1, $d4, 0D3fe0000000000000;
	cmov_b64	$d5, $c1, $d6, $d5;
	cmp_le_b1_f64	$c1, $d4, 0D3fd0000000000000;
	cmov_b64	$d5, $c1, $d4, $d5;
	cmp_gtu_b1_f64	$c1, $d4, 0D3fd0000000000000;
	and_b1	$c0, $c0, $c1;
	cmp_lt_b1_s64	$c1, $d3, 9218868437227405312;
	cmov_b64	$d3, $c1, $d1, 9221120237041090560;
	mul_f64	$d4, $d5, 0D400921fb54442d18;
	mul_f64	$d5, $d4, $d4;
	mul_f64	$d7, $d5, 0D3fe0000000000000;
	sub_f64	$d6, 0D3ff0000000000000, $d7;
	sub_f64	$d8, 0D3ff0000000000000, $d6;
	sub_f64	$d7, $d8, $d7;
	fma_f64	$d8, 0Dbda907db46cc5e42, $d5, 0D3e21eeb69037ab78;
	fma_f64	$d8, $d8, $d5, 0Dbe927e4fa17f65f6;
	fma_f64	$d8, $d8, $d5, 0D3efa01a019f4ec90;
	fma_f64	$d8, $d8, $d5, 0Dbf56c16c16c16967;
	fma_f64	$d8, $d8, $d5, 0D3fa5555555555555;
	mul_f64	$d9, $d5, $d5;
	fma_f64	$d7, $d8, $d9, $d7;
	fma_f64	$d8, 0D3de5e0b2f9a43bb8, $d5, 0Dbe5ae600b42fdfa7;
	fma_f64	$d8, $d8, $d5, 0D3ec71de3796cde01;
	fma_f64	$d8, $d8, $d5, 0Dbf2a01a019e83e5c;
	add_f64	$d6, $d6, $d7;
	fma_f64	$d7, $d8, $d5, 0D3f81111111110bb3;
	mul_f64	$d8, $d4, $d5;
	neg_f64	$d8, $d8;
	mul_f64	$d7, $d7, $d8;
	mul_f64	$d5, $d5, $d7;
	fma_f64	$d5, $d8, 0Dbfc5555555555555, $d5;
	sub_f64	$d4, $d4, $d5;
	cmov_b64	$d4, $c0, $d6, $d4;
	shl_u64	$d2, $d2, 63;
	xor_b64	$d1, $d2, $d1;
	mov_b64	$d2, $d4;
	xor_b64	$d1, $d1, $d2;
	cmp_lt_b1_f64	$c0, $d0, 0D4330000000000000;
	cmov_b64	$d0, $c0, $d1, $d3;
	st_arg_align(8)_f64	$d0, [%_gcc_sinpi];
	ret;
};


decl function &_gcc_exp(arg_f64 %ret)(arg_f64 %x);


function &_gcc_exp(arg_f64 %_gcc_exp)(arg_f64 %x)
{

@_gcc_exp_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s0, $s0, 1;
	mul_f64	$d1, $d0, 0D40571547652b82fe;
	cvt_s32_f64	$s1, $d1;
	cvt_near_f64_s32	$d1, $s1;
	fma_f64	$d2, 0Dbf862e42fefa0000, $d1, $d0;
	fma_f64	$d1, 0Dbd1cf79abc9e3b39, $d1, $d2;
	fma_f64	$d2, $d1, 0D3f56c16c16c16c17, 0D3f81111111111111;
	fma_f64	$d2, $d1, $d2, 0D3fa5555555555555;
	fma_f64	$d2, $d1, $d2, 0D3fc5555555555555;
	fma_f64	$d2, $d1, $d2, 0D3fe0000000000000;
	and_b32	$s2, $s1, 63;
	fma_f64	$d2, $d1, $d2, 0D3ff0000000000000;
	cvt_u64_u32	$d3, $s2;
	mul_f64	$d1, $d1, $d2;
	shl_u64	$d4, $d3, 4;
	ld_v2_readonly_align(16)_f64	($d2, $d3), [&__math64_TWO_TO_JBY64_EP][$d4];
	add_f64	$d4, $d2, $d3;
	fma_f64	$d1, $d4, $d1, $d3;
	add_f64	$d1, $d1, $d2;
	mul_f64	$d2, $d1, 0D4340000000000000;
	mov_b64	$d3, $d2;
	shr_u64	$d2, $d3, 52;
	cvt_u32_u64	$s2, $d2;
	and_b32	$s2, $s2, 2047;
	add_u32	$s2, $s2, 4294967243;
	mov_b64	$d2, $d1;
	shr_u64	$d4, $d2, 52;
	cvt_u32_u64	$s3, $d4;
	and_b32	$s3, $s3, 2047;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cmov_b32	$s5, $c0, $s2, $s3;
	cmov_b64	$d3, $c0, $d3, $d2;
	shr_s32	$s2, $s1, 6;
	cmp_eq_b1_s32	$c0, $s2, -1022;
	cmp_lt_b1_f64	$c1, $d1, 0D3ff0000000000000;
	and_b1	$c0, $c0, $c1;
	cmp_eq_b1_s32	$c1, $s2, 0;
	cmp_eq_b1_f64	$c2, $d1, 0D0000000000000000;
	or_b1	$c1, $c1, $c2;
	class_b1_f64	$c2, $d1, 516;
	cvt_u32_b1	$s3, $c2;
	and_b32	$s3, $s3, 1;
	cvt_u32_b1	$s4, $c1;
	cmp_lt_b1_s32	$c1, $s2, -1022;
	or_b1	$c0, $c1, $c0;
	and_b64	$d3, $d3, 9227875636482146303;
	add_u32	$s5, $s5, $s2;
	max_s32	$s5, $s5, -2047;
	min_s32	$s5, $s5, 2047;
	cvt_u64_u32	$d4, $s5;
	shl_u64	$d4, $d4, 52;
	or_b64	$d4, $d3, $d4;
	add_u32	$s6, $s5, 53;
	cvt_u64_u32	$d5, $s6;
	shl_u64	$d5, $d5, 52;
	or_b64	$d3, $d3, $d5;
	mul_f64	$d3, $d3, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c1, $s5, 0;
	cmov_b64	$d3, $c1, $d4, $d3;
	and_b64	$d2, $d2, 9223372036854775808;
	or_b64	$d4, $d2, 9218868437227405312;
	cmp_eq_b1_s32	$c1, $s5, 2047;
	cmov_b64	$d3, $c1, $d4, $d3;
	cmp_lt_b1_s32	$c1, $s5, -53;
	cmov_b64	$d2, $c1, $d2, $d3;
	or_b32	$s3, $s4, $s3;
	cmp_ne_b1_s32	$c1, $s3, 0;
	cmov_b64	$d2, $c1, $d1, $d2;
	shr_s32	$s1, $s1, 8;
	sub_u32	$s3, 1023, $s1;
	add_u32	$s2, $s3, $s2;
	cvt_u64_u32	$d3, $s2;
	shl_u64	$d3, $d3, 52;
	add_u32	$s1, $s1, 1023;
	cvt_u64_u32	$d4, $s1;
	shl_u64	$d4, $d4, 52;
	mul_f64	$d1, $d4, $d1;
	mul_f64	$d1, $d3, $d1;
	cmov_b64	$d1, $c0, $d1, $d2;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d1, $c0, $d0, $d1;
	cmp_gt_b1_f64	$c0, $d0, 0D40862e42fefa39ef;
	cmov_b64	$d1, $c0, 9218868437227405312, $d1;
	cmp_lt_b1_f64	$c0, $d0, 0Dc0874910d52d3051;
	cmov_b64	$d0, $c0, 0, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_exp];
	ret;
};


decl function &_gcc_atan(arg_f64 %ret)(arg_f64 %x);


function &_gcc_atan(arg_f64 %_gcc_atan)(arg_f64 %x)
{

@_gcc_atan_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	abs_f64	$d1, $d0;
	mul_f64	$d2, $d1, 0D3ff8000000000000;
	add_f64	$d2, $d2, 0D3ff0000000000000;
	cmp_le_b1_f64	$c0, $d1, 0D4003800000000000;
	cmov_b64	$d2, $c0, $d2, $d1;
	add_f64	$d3, $d1, 0Dbff8000000000000;
	cmov_b64	$d5, $c0, $d3, 13830554455654793216;
	cmov_b64	$d3, $c0, 4354989122426817468, 4364452196894661638;
	cmov_b64	$d6, $c0, 4607027438436873883, 4609753056924675352;
	add_f64	$d4, $d1, 0D3ff0000000000000;
	cmp_le_b1_f64	$c0, $d1, 0D3ff3000000000000;
	cmov_b64	$d4, $c0, $d4, $d2;
	add_f64	$d2, $d1, 0Dbff0000000000000;
	cmov_b64	$d2, $c0, $d2, $d5;
	cmov_b64	$d5, $c0, 4605249457297304856, $d6;
	cmov_b64	$d6, $c0, 4359948597267291142, $d3;
	add_f64	$d7, $d1, $d1;
	add_f64	$d3, $d1, 0D4000000000000000;
	cmp_le_b1_f64	$c0, $d1, 0D3fe6000000000000;
	cmov_b64	$d3, $c0, $d3, $d4;
	add_f64	$d7, $d7, 0Dbff0000000000000;
	cmov_b64	$d4, $c0, 4357843414468748768, $d6;
	cmov_b64	$d5, $c0, 4602023952714414927, $d5;
	cmov_b64	$d6, $c0, $d7, $d2;
	class_b1_f64	$c0, $d0, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s0, $s0, 1;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d2, $c0, $d0, 4609753056924675352;
	cmp_le_b1_f64	$c0, $d1, 0D3fdc000000000000;
	cmov_b64	$d7, $c0, 4607182418800017408, $d3;
	cmov_b64	$d6, $c0, $d1, $d6;
	cmov_b64	$d3, $c0, 0, $d5;
	cmov_b64	$d4, $c0, 0, $d4;
	div_f64	$d5, $d6, $d7;
	mul_f64	$d6, $d5, $d5;
	mul_f64	$d7, $d5, $d6;
	fma_f64	$d8, $d6, 0D3f22a75ce41b9f87, 0D3f9f2d2116f053f2;
	fma_f64	$d8, $d6, $d8, 0D3fcc3de43db425c0;
	fma_f64	$d8, $d6, $d8, 0D3fdca6be4c993b3c;
	fma_f64	$d8, $d6, $d8, 0D3fd12bcb0a9169f3;
	mul_f64	$d7, $d7, $d8;
	fma_f64	$d8, $d6, 0D3fa3f197f1e85ed9, 0D3fdb2cb05bf9beff;
	fma_f64	$d8, $d6, $d8, 0D3ff699c644c48d2e;
	fma_f64	$d8, $d6, $d8, 0D3ffd372a17cdf5a0;
	fma_f64	$d6, $d6, $d8, 0D3fe9c1b08fda1eec;
	div_f64	$d6, $d7, $d6;
	sub_f64	$d4, $d6, $d4;
	sub_f64	$d4, $d4, $d5;
	sub_f64	$d3, $d3, $d4;
	cmp_le_b1_f64	$c0, $d1, 0D4370000000000000;
	cmov_b64	$d2, $c0, $d3, $d2;
	cmp_lt_b1_f64	$c0, $d1, 0D3e50000000000000;
	cmov_b64	$d2, $c0, $d1, $d2;
	neg_f64	$d3, $d2;
	cmp_eq_b1_f64	$c0, $d1, $d0;
	cmov_b64	$d0, $c0, $d2, $d3;
	st_arg_align(8)_f64	$d0, [%_gcc_atan];
	ret;
};


decl function &_gcc_fmod(arg_f64 %ret)(
	arg_f64 %x,
	arg_f64 %y);


function &_gcc_fmod(arg_f64 %_gcc_fmod)(
	arg_f64 %x,
	arg_f64 %y)
{

@_gcc_fmod_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d1, [%y];
	mov_b64	$d3, $d1;
	cvt_u32_u64	$s0, $d3;
	firstbit_u32_u32	$s1, $s0;
	add_u32	$s1, $s1, 32;
	cmp_eq_b1_s32	$c0, $s0, 0;
	cmov_b32	$s0, $c0, 64, $s1;
	ld_arg_align(8)_f64	$d0, [%x];
	mov_b64	$d2, $d0;
	cvt_u32_u64	$s1, $d2;
	firstbit_u32_u32	$s2, $s1;
	add_u32	$s2, $s2, 32;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b32	$s1, $c0, 64, $s2;
	shr_u64	$d4, $d2, 32;
	cvt_u32_u64	$s2, $d4;
	and_b32	$s2, $s2, 1048575;
	firstbit_u32_u32	$s3, $s2;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmov_b32	$s1, $c0, $s1, $s3;
	shr_u64	$d4, $d3, 32;
	cvt_u32_u64	$s2, $d4;
	and_b32	$s2, $s2, 1048575;
	firstbit_u32_u32	$s3, $s2;
	cmp_eq_b1_s32	$c0, $s2, 0;
	cmov_b32	$s0, $c0, $s0, $s3;
	sub_u32	$s2, 11, $s0;
	and_b64	$d5, $d3, 9223372036854775807;
	shr_u64	$d4, $d5, 52;
	cvt_u32_u64	$s0, $d4;
	cmp_eq_b1_s32	$c0, $s0, 0;
	cmov_b32	$s2, $c0, $s2, $s0;
	sub_u32	$s3, 11, $s1;
	and_b64	$d4, $d2, 9223372036854775807;
	shr_u64	$d6, $d4, 52;
	cvt_u32_u64	$s1, $d6;
	cmp_eq_b1_s32	$c0, $s1, 0;
	cmov_b32	$s3, $c0, $s3, $s1;
	shr_u64	$d7, $d3, 52;
	mov_b64	$d3, $d5;
	mul_f64	$d6, $d3, 0D4340000000000000;
	shr_u64	$d8, $d6, 52;
	cvt_u32_u64	$s4, $d8;
	and_b32	$s4, $s4, 2047;
	add_u32	$s4, $s4, 4294967243;
	cvt_u32_u64	$s5, $d7;
	and_b32	$s5, $s5, 2047;
	cmp_eq_b1_s32	$c0, $s5, 0;
	cmov_b32	$s6, $c0, $s4, $s5;
	cmov_b64	$d5, $c0, $d6, $d5;
	class_b1_f64	$c0, $d3, 516;
	cvt_u32_b1	$s4, $c0;
	and_b32	$s5, $s4, 1;
	sub_u32	$s2, $s3, $s2;
	cvt_s64_s32	$d6, $s2;
	mul_u64	$d6, $d6, 1296593901;
	shr_u64	$d7, $d6, 63;
	cvt_u32_u64	$s2, $d7;
	shr_u64	$d6, $d6, 32;
	cvt_u32_u64	$s3, $d6;
	shr_s32	$s3, $s3, 4;
	add_u32	$s2, $s3, $s2;
	max_s32	$s2, 0, $s2;
	mul_u32	$s3, $s2, 53;
	shr_s32	$s4, $s3, 1;
	cmp_eq_b1_f64	$c0, $d3, 0D0000000000000000;
	cmp_eq_b1_s32	$c1, $s4, 0;
	or_b1	$c1, $c1, $c0;
	cvt_u32_b1	$s7, $c1;
	and_b64	$d5, $d5, 9227875636482146303;
	add_u32	$s6, $s4, $s6;
	max_s32	$s6, $s6, -2047;
	min_s32	$s6, $s6, 2047;
	cvt_u64_u32	$d6, $s6;
	shl_u64	$d6, $d6, 52;
	or_b64	$d6, $d6, $d5;
	add_u32	$s8, $s6, 53;
	cvt_u64_u32	$d7, $s8;
	shl_u64	$d7, $d7, 52;
	or_b64	$d5, $d7, $d5;
	mul_f64	$d5, $d5, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c1, $s6, 0;
	cmov_b64	$d5, $c1, $d6, $d5;
	cmp_eq_b1_s32	$c1, $s6, 2047;
	cmov_b64	$d5, $c1, 9218868437227405312, $d5;
	cmp_lt_b1_s32	$c1, $s6, -53;
	cmov_b64	$d5, $c1, 0, $d5;
	or_b32	$s5, $s7, $s5;
	cmp_ne_b1_s32	$c1, $s5, 0;
	cmov_b64	$d5, $c1, $d3, $d5;
	mul_f64	$d6, $d5, 0D4340000000000000;
	mov_b64	$d7, $d6;
	shr_u64	$d6, $d7, 52;
	cvt_u32_u64	$s5, $d6;
	and_b32	$s5, $s5, 2047;
	add_u32	$s5, $s5, 4294967243;
	mov_b64	$d6, $d5;
	shr_u64	$d8, $d6, 52;
	cvt_u32_u64	$s6, $d8;
	and_b32	$s6, $s6, 2047;
	cmp_eq_b1_s32	$c1, $s6, 0;
	cmov_b32	$s7, $c1, $s5, $s6;
	cmov_b64	$d7, $c1, $d7, $d6;
	cmp_eq_b1_s32	$c1, $s3, $s4;
	cmp_eq_b1_f64	$c2, $d5, 0D0000000000000000;
	or_b1	$c1, $c1, $c2;
	class_b1_f64	$c2, $d5, 516;
	cvt_u32_b1	$s5, $c2;
	and_b32	$s5, $s5, 1;
	cvt_u32_b1	$s6, $c1;
	sub_u32	$s3, $s3, $s4;
	and_b64	$d7, $d7, 9227875636482146303;
	add_u32	$s3, $s3, $s7;
	max_s32	$s3, $s3, -2047;
	min_s32	$s3, $s3, 2047;
	cvt_u64_u32	$d8, $s3;
	shl_u64	$d8, $d8, 52;
	or_b64	$d8, $d7, $d8;
	add_u32	$s4, $s3, 53;
	cvt_u64_u32	$d9, $s4;
	shl_u64	$d9, $d9, 52;
	or_b64	$d7, $d7, $d9;
	mul_f64	$d7, $d7, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c1, $s3, 0;
	cmov_b64	$d7, $c1, $d8, $d7;
	and_b64	$d6, $d6, 9223372036854775808;
	or_b64	$d8, $d6, 9218868437227405312;
	cmp_eq_b1_s32	$c1, $s3, 2047;
	cmov_b64	$d7, $c1, $d8, $d7;
	cmp_lt_b1_s32	$c1, $s3, -53;
	cmov_b64	$d6, $c1, $d6, $d7;
	or_b32	$s3, $s6, $s5;
	cmp_ne_b1_s32	$c1, $s3, 0;
	cmov_b64	$d5, $c1, $d5, $d6;
	cmp_eq_b1_s32	$c1, $s2, 0;
	cmov_b64	$d6, $c1, $d3, $d5;
	mov_b64	$d5, $d4;
	div_f64	$d7, $d5, $d6;
	cmp_ge_b1_s32	$c2, $s2, 1;
	cbr_b1	$c2, @BB0_2;
	br	@BB0_1;

@BB0_2:
	cmov_b64	$d8, $c1, 4607182418800017408, 4368491638549381120;
	mov_b64	$d9, $d5;

@BB0_3:
	// %.lr.ph
	trunc_f64	$d7, $d7;
	mul_f64	$d11, $d6, $d7;
	sub_f64	$d10, $d9, $d11;
	sub_f64	$d9, $d9, $d10;
	sub_f64	$d9, $d9, $d11;
	neg_f64	$d11, $d11;
	fma_f64	$d7, $d6, $d7, $d11;
	sub_f64	$d7, $d9, $d7;
	add_f64	$d7, $d10, $d7;
	cmp_lt_b1_f64	$c1, $d7, 0D0000000000000000;
	cmov_b64	$d9, $c1, $d6, 0;
	mul_f64	$d6, $d8, $d6;
	add_u32	$s2, $s2, 4294967295;
	add_f64	$d9, $d7, $d9;
	div_f64	$d7, $d9, $d6;
	cmp_ne_b1_s32	$c1, $s2, 0;
	cbr_b1	$c1, @BB0_3;
	br	@BB0_4;

@BB0_1:
	mov_b64	$d9, $d5;

@BB0_4:
	// %._crit_edge
	xor_b64	$d2, $d4, $d2;
	cmp_num_b1_f64	$c1, $d1, $d1;
	cmov_b64	$d1, $c1, $d0, $d1;
	floor_f64	$d4, $d7;
	mul_f64	$d8, $d6, $d4;
	sub_f64	$d7, $d9, $d8;
	sub_f64	$d9, $d9, $d7;
	sub_f64	$d9, $d9, $d8;
	neg_f64	$d8, $d8;
	fma_f64	$d4, $d6, $d4, $d8;
	sub_f64	$d4, $d9, $d4;
	add_f64	$d4, $d7, $d4;
	cmp_lt_b1_f64	$c1, $d4, 0D0000000000000000;
	cmov_b64	$d6, $c1, $d6, 0;
	add_f64	$d4, $d4, $d6;
	cmp_eq_b1_f64	$c1, $d5, $d3;
	cmov_b64	$d4, $c1, 0, $d4;
	xor_b64	$d2, $d2, $d4;
	cmp_lt_b1_f64	$c1, $d5, $d3;
	cmov_b64	$d0, $c1, $d0, $d2;
	cmov_b64	$d0, $c0, 9221120237041090560, $d0;
	cmp_eq_b1_s32	$c0, $s0, 2047;
	cmov_b64	$d0, $c0, $d1, $d0;
	cmp_eq_b1_s32	$c0, $s1, 2047;
	cmov_b64	$d0, $c0, 9221120237041090560, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_fmod];
	ret;
};


decl function &_gcc_tgamma(arg_f64 %ret)(arg_f64 %x);


function &_gcc_tgamma(arg_f64 %_gcc_tgamma)(arg_f64 %x)
{

@_gcc_tgamma_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d1, [%x];
	abs_f64	$d0, $d1;
	mov_b64	$d3, $d0;
	and_b64	$d4, $d3, 9223372036854775807;
	mov_b64	$d2, $d4;
	cmp_gt_b1_u64	$c0, $d4, 9218868437227405311;
	cbr_b1	$c0, @BB0_15;
	// BB#1:
	cmp_geu_b1_f64	$c0, $d2, 0D3b90000000000000;
	cbr_b1	$c0, @BB0_3;
	// BB#2:
	or_b64	$d3, $d4, 274719577269600256;
	add_f64	$d3, $d3, 0D83d0000000000000;
	cmp_lt_b1_u64	$c0, $d4, 4503599627370496;
	cmov_b64	$d3, $c0, $d3, $d4;
	cmov_b32	$s2, $c0, 4294966213, 4294966273;
	cmp_le_b1_f64	$c0, $d2, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c1, $d2, 0D3fee0faa00000000;
	and_b1	$c0, $c1, $c0;
	cmp_lt_b1_f64	$c1, $d2, 0D0000000000000000;
	cvt_u32_b1	$s0, $c1;
	class_b1_f64	$c1, $d2, 3;
	cvt_u32_b1	$s1, $c1;
	and_b32	$s1, $s1, 1;
	class_b1_f64	$c1, $d2, 516;
	cvt_u32_b1	$s3, $c1;
	and_b32	$s3, $s3, 1;
	shr_s64	$d4, $d3, 45;
	cvt_u32_u64	$s4, $d4;
	add_f64	$d4, $d2, 0Dbff0000000000000;
	and_b32	$s5, $s4, 1;
	bitextract_u32	$s4, $s4, 1, 6;
	or_b32	$s4, $s4, 64;
	add_u32	$s4, $s4, $s5;
	cvt_near_f64_s32	$d5, $s4;
	add_u32	$s4, $s4, 4294967232;
	and_b64	$d6, $d3, 4503599627370495;
	or_b64	$d6, $d6, 4602678819172646912;
	cvt_s64_s32	$d7, $s4;
	mul_f64	$d5, $d5, 0D3f80000000000000;
	add_f64	$d8, $d4, 0D4000000000000000;
	div_f64	$d8, $d4, $d8;
	add_f64	$d9, $d8, $d8;
	mul_f64	$d10, $d9, $d9;
	fma_f64	$d11, $d10, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	mul_f64	$d9, $d9, $d10;
	sub_f64	$d6, $d6, $d5;
	fma_f64	$d12, $d10, $d11, 0D3f89999999bac6d4;
	fma_f64	$d5, $d6, 0D3fe0000000000000, $d5;
	div_f64	$d5, $d6, $d5;
	mul_f64	$d6, $d5, $d5;
	shl_u64	$d11, $d7, 4;
	fma_f64	$d7, $d10, $d12, 0D3fb55555555554e6;
	mul_f64	$d8, $d4, $d8;
	neg_f64	$d8, $d8;
	fma_f64	$d7, $d9, $d7, $d8;
	shr_u64	$d3, $d3, 52;
	cvt_u32_u64	$s4, $d3;
	add_f64	$d3, $d4, $d7;
	ld_v2_readonly_align(16)_f64	($d4, $d7), [&__math64_LN_TBL][$d11];
	and_b32	$s4, $s4, 2047;
	add_u32	$s2, $s4, $s2;
	cvt_near_f64_s32	$d8, $s2;
	fma_f64	$d9, $d6, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d9, $d6, $d9, 0D3fb5555555555557;
	mul_f64	$d6, $d6, $d9;
	fma_f64	$d5, $d5, $d6, $d5;
	add_f64	$d5, $d7, $d5;
	fma_f64	$d4, $d8, 0D3fe62e42e0000000, $d4;
	fma_f64	$d5, $d8, 0D3e6efa39ef35793c, $d5;
	add_f64	$d4, $d4, $d5;
	cmov_b64	$d3, $c0, $d3, $d4;
	cvt_b1_u32	$c0, $s3;
	cmov_b64	$d3, $c0, 9218868437227405312, $d3;
	or_b32	$s0, $s1, $s0;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d3, $c0, 9221120237041090560, $d3;
	cmp_eq_b1_f64	$c0, $d2, 0D0000000000000000;
	cmov_b64	$d2, $c0, 18442240474082181120, $d3;
	neg_f64	$d2, $d2;
	br	@BB0_15;

@BB0_3:
	cmp_geu_b1_f64	$c0, $d2, 0D4000000000000000;
	cbr_b1	$c0, @BB0_10;
	// BB#4:
	sub_f64	$d5, 0D4000000000000000, $d2;
	add_f64	$d6, $d2, 0Dbff762d86356be3f;
	cmp_lt_b1_f64	$c0, $d2, 0D3ffbb4c300000000;
	cmov_b64	$d6, $c0, $d6, $d5;
	cvt_u32_b1	$s0, $c0;
	add_f64	$d5, $d2, 0Dbff0000000000000;
	cmp_lt_b1_f64	$c0, $d2, 0D3ff3b4c400000000;
	cmov_b64	$d6, $c0, $d5, $d6;
	cmov_b32	$s0, $c0, 2, $s0;
	sub_f64	$d7, 0D3ff0000000000000, $d2;
	cmp_le_b1_f64	$c0, $d2, 0D3feccccc00000000;
	cmov_b64	$d6, $c0, $d7, $d6;
	cmov_b32	$s0, $c0, 0, $s0;
	add_f64	$d7, $d2, 0Dbfdd8b618d5af8fc;
	cmp_lt_b1_f64	$c1, $d2, 0D3fe7694400000000;
	cmov_b64	$d7, $c1, $d7, $d6;
	cmov_b32	$s0, $c1, 1, $s0;
	or_b64	$d6, $d4, 274719577269600256;
	add_f64	$d6, $d6, 0D83d0000000000000;
	cmp_lt_b1_u64	$c1, $d4, 4503599627370496;
	cmov_b64	$d6, $c1, $d6, $d4;
	cmov_b32	$s3, $c1, 4294966213, 4294966273;
	cmp_le_b1_f64	$c1, $d2, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c2, $d2, 0D3fee0faa00000000;
	and_b1	$c1, $c2, $c1;
	cmp_lt_b1_f64	$c2, $d2, 0D0000000000000000;
	cvt_u32_b1	$s1, $c2;
	class_b1_f64	$c2, $d2, 3;
	cvt_u32_b1	$s2, $c2;
	and_b32	$s2, $s2, 1;
	class_b1_f64	$c2, $d2, 516;
	cvt_u32_b1	$s4, $c2;
	and_b32	$s4, $s4, 1;
	cmp_lt_b1_f64	$c2, $d2, 0D3fcda66100000000;
	cmov_b64	$d4, $c2, $d2, $d7;
	cmov_b32	$s0, $c2, 2, $s0;
	shr_s64	$d7, $d6, 45;
	cvt_u32_u64	$s6, $d7;
	and_b32	$s5, $s6, 1;
	bitextract_u32	$s6, $s6, 1, 6;
	or_b32	$s6, $s6, 64;
	add_u32	$s5, $s6, $s5;
	cvt_near_f64_s32	$d7, $s5;
	add_u32	$s5, $s5, 4294967232;
	and_b64	$d8, $d6, 4503599627370495;
	or_b64	$d8, $d8, 4602678819172646912;
	cvt_s64_s32	$d9, $s5;
	mul_f64	$d7, $d7, 0D3f80000000000000;
	add_f64	$d10, $d5, 0D4000000000000000;
	div_f64	$d10, $d5, $d10;
	add_f64	$d11, $d10, $d10;
	mul_f64	$d12, $d11, $d11;
	fma_f64	$d13, $d12, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	mul_f64	$d11, $d11, $d12;
	sub_f64	$d8, $d8, $d7;
	fma_f64	$d14, $d12, $d13, 0D3f89999999bac6d4;
	fma_f64	$d7, $d8, 0D3fe0000000000000, $d7;
	div_f64	$d7, $d8, $d7;
	mul_f64	$d8, $d7, $d7;
	shl_u64	$d13, $d9, 4;
	fma_f64	$d9, $d12, $d14, 0D3fb55555555554e6;
	mul_f64	$d10, $d5, $d10;
	neg_f64	$d10, $d10;
	fma_f64	$d9, $d11, $d9, $d10;
	shr_u64	$d6, $d6, 52;
	cvt_u32_u64	$s5, $d6;
	add_f64	$d5, $d5, $d9;
	ld_v2_readonly_align(16)_f64	($d6, $d9), [&__math64_LN_TBL][$d13];
	and_b32	$s5, $s5, 2047;
	add_u32	$s3, $s5, $s3;
	cvt_near_f64_s32	$d10, $s3;
	fma_f64	$d11, $d8, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d11, $d8, $d11, 0D3fb5555555555557;
	mul_f64	$d8, $d8, $d11;
	fma_f64	$d7, $d7, $d8, $d7;
	add_f64	$d7, $d9, $d7;
	fma_f64	$d6, $d10, 0D3fe62e42e0000000, $d6;
	fma_f64	$d7, $d10, 0D3e6efa39ef35793c, $d7;
	add_f64	$d6, $d6, $d7;
	cmov_b64	$d5, $c1, $d5, $d6;
	cvt_b1_u32	$c1, $s4;
	cmov_b64	$d5, $c1, 9218868437227405312, $d5;
	or_b32	$s1, $s2, $s1;
	cmp_ne_b1_s32	$c1, $s1, 0;
	cmov_b64	$d5, $c1, 9221120237041090560, $d5;
	cmp_eq_b1_f64	$c1, $d2, 0D0000000000000000;
	cmov_b64	$d2, $c1, 18442240474082181120, $d5;
	neg_f64	$d2, $d2;
	cmov_b64	$d2, $c0, $d2, 0;
	cmp_eq_b1_s32	$c0, $s0, 2;
	cbr_b1	$c0, @BB0_9;
	// BB#5:
	cmp_ne_b1_s32	$c0, $s0, 1;
	cbr_b1	$c0, @BB0_6;
	// BB#8:
	fma_f64	$d5, $d4, 0D3f35fd3ee8c2d3f4, 0Dbf347f24ecc38c38;
	fma_f64	$d5, $d4, $d5, 0D3f34af6d6c0ebbf7;
	fma_f64	$d5, $d4, $d5, 0Dbf41a6109c73e0ec;
	fma_f64	$d5, $d4, $d5, 0D3f4cdf0cef61a8e9;
	fma_f64	$d5, $d4, $d5, 0Dbf56fe8ebf2d1af1;
	fma_f64	$d6, $d4, $d5, 0D3f6282d32e15c915;
	mul_f64	$d5, $d4, $d4;
	fma_f64	$d6, $d4, $d6, 0Dbf6e2effb3e914d7;
	fma_f64	$d6, $d4, $d6, 0D3f78fce0e370e344;
	fma_f64	$d6, $d4, $d6, 0Dbf851f9fba91ec6a;
	fma_f64	$d6, $d4, $d6, 0D3f9266e7970af9ec;
	fma_f64	$d6, $d4, $d6, 0Dbfa0c9a8df35b713;
	fma_f64	$d6, $d4, $d6, 0D3fb08b4294d5419b;
	fma_f64	$d6, $d4, $d6, 0Dbfc2e4278dc6c509;
	fma_f64	$d4, $d4, $d6, 0D3fdef72bc8ee38a2;
	fma_f64	$d4, $d5, $d4, 0D3c50c7caa48a971f;
	add_f64	$d4, $d4, 0Dbfbf19b9bcc38a42;
	add_f64	$d2, $d2, $d4;
	br	@BB0_13;

@BB0_10:
	cmp_geu_b1_f64	$c0, $d2, 0D4020000000000000;
	cbr_b1	$c0, @BB0_12;
	// BB#11:
	cvt_s32_f64	$s0, $d2;
	cvt_near_f64_s32	$d4, $s0;
	sub_f64	$d2, $d2, $d4;
	add_f64	$d4, $d2, 0D4000000000000000;
	cmp_gt_b1_s32	$c0, $s0, 2;
	cmov_b64	$d4, $c0, $d4, 4607182418800017408;
	add_f64	$d5, $d2, 0D4008000000000000;
	cmp_gt_b1_s32	$c0, $s0, 3;
	cmov_b64	$d5, $c0, $d5, 4607182418800017408;
	add_f64	$d6, $d2, 0D4010000000000000;
	cmp_gt_b1_s32	$c0, $s0, 4;
	cmov_b64	$d6, $c0, $d6, 4607182418800017408;
	add_f64	$d7, $d2, 0D4014000000000000;
	cmp_gt_b1_s32	$c0, $s0, 5;
	cmov_b64	$d7, $c0, $d7, 4607182418800017408;
	add_f64	$d8, $d2, 0D4018000000000000;
	cmp_gt_b1_s32	$c0, $s0, 6;
	cmov_b64	$d8, $c0, $d8, 4607182418800017408;
	mul_f64	$d7, $d8, $d7;
	mul_f64	$d6, $d6, $d7;
	mul_f64	$d5, $d5, $d6;
	mul_f64	$d4, $d4, $d5;
	mov_b64	$d5, $d4;
	or_b64	$d6, $d5, 274719577269600256;
	add_f64	$d6, $d6, 0D83d0000000000000;
	cmp_lt_b1_u64	$c0, $d5, 4503599627370496;
	cmov_b64	$d5, $c0, $d6, $d5;
	cmov_b32	$s2, $c0, 4294966213, 4294966273;
	cmp_le_b1_f64	$c0, $d4, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c1, $d4, 0D3fee0faa00000000;
	and_b1	$c0, $c1, $c0;
	cmp_lt_b1_f64	$c1, $d4, 0D0000000000000000;
	cvt_u32_b1	$s0, $c1;
	class_b1_f64	$c1, $d4, 3;
	cvt_u32_b1	$s1, $c1;
	and_b32	$s1, $s1, 1;
	class_b1_f64	$c1, $d4, 516;
	cvt_u32_b1	$s3, $c1;
	and_b32	$s3, $s3, 1;
	shr_s64	$d7, $d5, 45;
	add_f64	$d6, $d4, 0Dbff0000000000000;
	cvt_u32_u64	$s5, $d7;
	add_f64	$d7, $d6, 0D4000000000000000;
	and_b32	$s4, $s5, 1;
	bitextract_u32	$s5, $s5, 1, 6;
	div_f64	$d7, $d6, $d7;
	or_b32	$s5, $s5, 64;
	add_f64	$d8, $d7, $d7;
	add_u32	$s4, $s5, $s4;
	mul_f64	$d10, $d8, $d8;
	cvt_near_f64_s32	$d9, $s4;
	mul_f64	$d8, $d8, $d10;
	fma_f64	$d11, $d10, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	fma_f64	$d11, $d10, $d11, 0D3f89999999bac6d4;
	fma_f64	$d10, $d10, $d11, 0D3fb55555555554e6;
	mul_f64	$d7, $d6, $d7;
	neg_f64	$d7, $d7;
	fma_f64	$d8, $d8, $d10, $d7;
	mul_f64	$d7, $d9, 0D3f80000000000000;
	shr_u64	$d9, $d5, 52;
	and_b64	$d5, $d5, 4503599627370495;
	or_b64	$d5, $d5, 4602678819172646912;
	sub_f64	$d5, $d5, $d7;
	cvt_u32_u64	$s5, $d9;
	fma_f64	$d7, $d5, 0D3fe0000000000000, $d7;
	div_f64	$d7, $d5, $d7;
	add_f64	$d5, $d6, $d8;
	mul_f64	$d6, $d7, $d7;
	add_u32	$s4, $s4, 4294967232;
	cvt_s64_s32	$d8, $s4;
	shl_u64	$d10, $d8, 4;
	ld_v2_readonly_align(16)_f64	($d8, $d9), [&__math64_LN_TBL][$d10];
	and_b32	$s4, $s5, 2047;
	add_u32	$s2, $s4, $s2;
	cvt_near_f64_s32	$d10, $s2;
	fma_f64	$d11, $d6, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d11, $d6, $d11, 0D3fb5555555555557;
	mul_f64	$d6, $d6, $d11;
	fma_f64	$d6, $d7, $d6, $d7;
	add_f64	$d6, $d9, $d6;
	fma_f64	$d7, $d10, 0D3fe62e42e0000000, $d8;
	fma_f64	$d6, $d10, 0D3e6efa39ef35793c, $d6;
	add_f64	$d6, $d7, $d6;
	cmov_b64	$d5, $c0, $d5, $d6;
	cvt_b1_u32	$c0, $s3;
	cmov_b64	$d5, $c0, 9218868437227405312, $d5;
	or_b32	$s0, $s1, $s0;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d5, $c0, 9221120237041090560, $d5;
	cmp_eq_b1_f64	$c0, $d4, 0D0000000000000000;
	cmov_b64	$d4, $c0, 18442240474082181120, $d5;
	fma_f64	$d5, $d2, 0D3edebaf7a5b38140, 0D3f497ddaca41a95b;
	fma_f64	$d5, $d2, $d5, 0D3f9317ea742ed475;
	fma_f64	$d5, $d2, $d5, 0D3fc601edccfbdf27;
	fma_f64	$d5, $d2, $d5, 0D3fe71a1893d3dcdc;
	fma_f64	$d5, $d2, $d5, 0D3ff645a762c4ab74;
	fma_f64	$d5, $d2, $d5, 0D3ff0000000000000;
	fma_f64	$d6, $d2, 0D3f00bfecdd17e945, 0D3f5e26b67368f239;
	fma_f64	$d6, $d2, $d6, 0D3f9b481c7e939961;
	fma_f64	$d6, $d2, $d6, 0D3fc2bb9cbee5f2f7;
	fma_f64	$d6, $d2, $d6, 0D3fd4d98f4f139f59;
	fma_f64	$d6, $d2, $d6, 0D3fcb848b36e20878;
	fma_f64	$d6, $d2, $d6, 0Dbfb3c467e37db0c8;
	mul_f64	$d6, $d2, $d6;
	div_f64	$d5, $d6, $d5;
	fma_f64	$d2, 0D3fe0000000000000, $d2, $d5;
	add_f64	$d2, $d2, $d4;
	br	@BB0_13;

@BB0_12:
	or_b64	$d5, $d4, 274719577269600256;
	add_f64	$d5, $d5, 0D83d0000000000000;
	cmp_lt_b1_u64	$c0, $d4, 4503599627370496;
	cmov_b64	$d4, $c0, $d5, $d4;
	cmov_b32	$s2, $c0, 4294966213, 4294966273;
	cmp_le_b1_f64	$c0, $d2, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c1, $d2, 0D3fee0faa00000000;
	and_b1	$c0, $c1, $c0;
	cmp_lt_b1_f64	$c1, $d2, 0D0000000000000000;
	cvt_u32_b1	$s0, $c1;
	class_b1_f64	$c1, $d2, 3;
	cvt_u32_b1	$s1, $c1;
	and_b32	$s1, $s1, 1;
	class_b1_f64	$c1, $d2, 516;
	cvt_u32_b1	$s3, $c1;
	and_b32	$s3, $s3, 1;
	shr_s64	$d5, $d4, 45;
	cvt_u32_u64	$s4, $d5;
	add_f64	$d5, $d2, 0Dbff0000000000000;
	and_b32	$s5, $s4, 1;
	bitextract_u32	$s4, $s4, 1, 6;
	or_b32	$s4, $s4, 64;
	add_u32	$s4, $s4, $s5;
	cvt_near_f64_s32	$d6, $s4;
	add_u32	$s4, $s4, 4294967232;
	and_b64	$d7, $d4, 4503599627370495;
	or_b64	$d7, $d7, 4602678819172646912;
	cvt_s64_s32	$d8, $s4;
	mul_f64	$d6, $d6, 0D3f80000000000000;
	add_f64	$d9, $d5, 0D4000000000000000;
	div_f64	$d9, $d5, $d9;
	add_f64	$d10, $d9, $d9;
	mul_f64	$d11, $d10, $d10;
	fma_f64	$d12, $d11, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	mul_f64	$d10, $d10, $d11;
	sub_f64	$d7, $d7, $d6;
	fma_f64	$d13, $d11, $d12, 0D3f89999999bac6d4;
	fma_f64	$d6, $d7, 0D3fe0000000000000, $d6;
	div_f64	$d6, $d7, $d6;
	mul_f64	$d7, $d6, $d6;
	shl_u64	$d12, $d8, 4;
	fma_f64	$d8, $d11, $d13, 0D3fb55555555554e6;
	mul_f64	$d9, $d5, $d9;
	neg_f64	$d9, $d9;
	fma_f64	$d8, $d10, $d8, $d9;
	shr_u64	$d4, $d4, 52;
	cvt_u32_u64	$s4, $d4;
	add_f64	$d4, $d5, $d8;
	ld_v2_readonly_align(16)_f64	($d5, $d8), [&__math64_LN_TBL][$d12];
	and_b32	$s4, $s4, 2047;
	add_u32	$s2, $s4, $s2;
	cvt_near_f64_s32	$d9, $s2;
	fma_f64	$d10, $d7, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d10, $d7, $d10, 0D3fb5555555555557;
	mul_f64	$d7, $d7, $d10;
	fma_f64	$d6, $d6, $d7, $d6;
	add_f64	$d6, $d8, $d6;
	fma_f64	$d5, $d9, 0D3fe62e42e0000000, $d5;
	fma_f64	$d6, $d9, 0D3e6efa39ef35793c, $d6;
	add_f64	$d5, $d5, $d6;
	cmov_b64	$d4, $c0, $d4, $d5;
	cvt_b1_u32	$c0, $s3;
	cmov_b64	$d4, $c0, 9218868437227405312, $d4;
	or_b32	$s0, $s1, $s0;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d4, $c0, 9221120237041090560, $d4;
	cmp_eq_b1_f64	$c0, $d2, 0D0000000000000000;
	cmov_b64	$d4, $c0, 18442240474082181120, $d4;
	div_f64	$d5, 0D3ff0000000000000, $d2;
	mul_f64	$d6, $d5, $d5;
	fma_f64	$d7, $d6, 0Dbf5ab89d0b9e43e4, 0D3f4b67ba4cdad5d1;
	fma_f64	$d7, $d6, $d7, 0Dbf4380cb8c0fe741;
	fma_f64	$d7, $d6, $d7, 0D3f4a019f98cf38b6;
	fma_f64	$d7, $d6, $d7, 0Dbf66c16c16b02e5c;
	fma_f64	$d6, $d6, $d7, 0D3fb555555555553b;
	add_f64	$d2, $d2, 0Dbfe0000000000000;
	fma_f64	$d5, $d5, $d6, 0D3fdacfe390c97d69;
	add_f64	$d4, $d4, 0Dbff0000000000000;
	mul_f64	$d2, $d2, $d4;
	add_f64	$d2, $d2, $d5;
	br	@BB0_13;

@BB0_9:
	fma_f64	$d5, $d4, 0D3f6a5abb57d0cf61, 0D3fbaae55d6537c88;
	fma_f64	$d5, $d4, $d5, 0D3fe89dfbe45050af;
	fma_f64	$d5, $d4, $d5, 0D40010725a42b18f5;
	fma_f64	$d5, $d4, $d5, 0D4003a5d7c2bd619c;
	fma_f64	$d5, $d4, $d5, 0D3ff0000000000000;
	fma_f64	$d6, $d4, 0D3f8b678bbf2bab09, 0D3fcd4eaef6010924;
	fma_f64	$d6, $d4, $d6, 0D3fef497644ea8450;
	fma_f64	$d6, $d4, $d6, 0D3ff7475cd119bd6f;
	fma_f64	$d6, $d4, $d6, 0D3fe4401e8b005dff;
	fma_f64	$d6, $d4, $d6, 0Dbfb3c467e37db0c8;
	mul_f64	$d6, $d4, $d6;
	div_f64	$d5, $d6, $d5;
	fma_f64	$d4, 0Dbfe0000000000000, $d4, $d5;
	add_f64	$d2, $d2, $d4;
	br	@BB0_13;

@BB0_6:
	cmp_ne_b1_s32	$c0, $s0, 0;
	cbr_b1	$c0, @BB0_13;
	// BB#7:
	fma_f64	$d5, $d4, 0D3f07858e90a45837, 0D3efa7074428cfa52;
	fma_f64	$d5, $d4, $d5, 0D3f1c5088987dfb07;
	fma_f64	$d5, $d4, $d5, 0D3f2cf2eced10e54d;
	fma_f64	$d5, $d4, $d5, 0D3f40b6c689b99c00;
	fma_f64	$d5, $d4, $d5, 0D3f538a94116f3f5d;
	fma_f64	$d5, $d4, $d5, 0D3f67add8ccb7926b;
	fma_f64	$d5, $d4, $d5, 0D3f7e404fb68fefe8;
	fma_f64	$d5, $d4, $d5, 0D3f951322ac92547b;
	fma_f64	$d5, $d4, $d5, 0D3fb13e001a5562a7;
	fma_f64	$d5, $d4, $d5, 0D3fd4a34cc4a60fad;
	fma_f64	$d5, $d4, $d5, 0D3fb3c467e37db0c8;
	add_f64	$d5, $d5, 0Dbfe0000000000000;
	fma_f64	$d2, $d4, $d5, $d2;

@BB0_13:
	cmp_geu_b1_f64	$c0, $d0, 0D0000000000000000;
	cbr_b1	$c0, @BB0_15;
	// BB#14:
	and_b64	$d4, $d3, 9223372036854775808;
	xor_b64	$d6, $d4, $d3;
	mov_b64	$d3, $d6;
	cvt_s64_f64	$d5, $d3;
	cvt_near_f64_s64	$d7, $d5;
	sub_f64	$d7, $d3, $d7;
	sub_f64	$d8, 0D3ff0000000000000, $d7;
	add_f64	$d9, $d7, 0Dbfe0000000000000;
	cmp_le_b1_f64	$c0, $d7, 0D3fe8000000000000;
	cmov_b64	$d8, $c0, $d9, $d8;
	sub_f64	$d9, 0D3fe0000000000000, $d7;
	cmp_lt_b1_f64	$c1, $d7, 0D3fe0000000000000;
	cmov_b64	$d8, $c1, $d9, $d8;
	cmp_le_b1_f64	$c1, $d7, 0D3fd0000000000000;
	cmov_b64	$d8, $c1, $d7, $d8;
	cmp_gtu_b1_f64	$c1, $d7, 0D3fd0000000000000;
	and_b1	$c0, $c0, $c1;
	cmp_lt_b1_s64	$c1, $d6, 9218868437227405312;
	cmov_b64	$d6, $c1, $d4, 9221120237041090560;
	mul_f64	$d7, $d8, 0D400921fb54442d18;
	mul_f64	$d8, $d7, $d7;
	mul_f64	$d10, $d8, 0D3fe0000000000000;
	sub_f64	$d9, 0D3ff0000000000000, $d10;
	sub_f64	$d11, 0D3ff0000000000000, $d9;
	sub_f64	$d10, $d11, $d10;
	fma_f64	$d11, 0Dbda907db46cc5e42, $d8, 0D3e21eeb69037ab78;
	fma_f64	$d11, $d11, $d8, 0Dbe927e4fa17f65f6;
	fma_f64	$d11, $d11, $d8, 0D3efa01a019f4ec90;
	fma_f64	$d11, $d11, $d8, 0Dbf56c16c16c16967;
	fma_f64	$d11, $d11, $d8, 0D3fa5555555555555;
	mul_f64	$d12, $d8, $d8;
	fma_f64	$d10, $d11, $d12, $d10;
	fma_f64	$d11, 0D3de5e0b2f9a43bb8, $d8, 0Dbe5ae600b42fdfa7;
	fma_f64	$d11, $d11, $d8, 0D3ec71de3796cde01;
	fma_f64	$d11, $d11, $d8, 0Dbf2a01a019e83e5c;
	add_f64	$d9, $d9, $d10;
	fma_f64	$d10, $d11, $d8, 0D3f81111111110bb3;
	mul_f64	$d11, $d7, $d8;
	neg_f64	$d11, $d11;
	mul_f64	$d10, $d10, $d11;
	mul_f64	$d8, $d8, $d10;
	fma_f64	$d8, $d11, 0Dbfc5555555555555, $d8;
	sub_f64	$d7, $d7, $d8;
	cmov_b64	$d7, $c0, $d9, $d7;
	shl_u64	$d5, $d5, 63;
	xor_b64	$d4, $d5, $d4;
	mov_b64	$d5, $d7;
	xor_b64	$d4, $d4, $d5;
	cmp_lt_b1_f64	$c0, $d3, 0D4330000000000000;
	cmov_b64	$d3, $c0, $d4, $d6;
	mul_f64	$d4, $d0, $d3;
	abs_f64	$d4, $d4;
	div_f64	$d4, 0D400921fb54442d18, $d4;
	mov_b64	$d5, $d4;
	or_b64	$d6, $d5, 274719577269600256;
	add_f64	$d6, $d6, 0D83d0000000000000;
	cmp_lt_b1_u64	$c0, $d5, 4503599627370496;
	cmov_b64	$d5, $c0, $d6, $d5;
	cmov_b32	$s2, $c0, 4294966213, 4294966273;
	cmp_le_b1_f64	$c0, $d4, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c1, $d4, 0D3fee0faa00000000;
	and_b1	$c0, $c1, $c0;
	cmp_lt_b1_f64	$c1, $d4, 0D0000000000000000;
	cvt_u32_b1	$s0, $c1;
	class_b1_f64	$c1, $d4, 3;
	cvt_u32_b1	$s1, $c1;
	and_b32	$s1, $s1, 1;
	class_b1_f64	$c1, $d4, 516;
	cvt_u32_b1	$s3, $c1;
	and_b32	$s3, $s3, 1;
	shr_s64	$d7, $d5, 45;
	add_f64	$d6, $d4, 0Dbff0000000000000;
	cvt_u32_u64	$s5, $d7;
	add_f64	$d7, $d6, 0D4000000000000000;
	and_b32	$s4, $s5, 1;
	bitextract_u32	$s5, $s5, 1, 6;
	div_f64	$d7, $d6, $d7;
	or_b32	$s5, $s5, 64;
	add_f64	$d8, $d7, $d7;
	add_u32	$s4, $s5, $s4;
	mul_f64	$d10, $d8, $d8;
	cvt_near_f64_s32	$d9, $s4;
	mul_f64	$d8, $d8, $d10;
	fma_f64	$d11, $d10, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	fma_f64	$d11, $d10, $d11, 0D3f89999999bac6d4;
	fma_f64	$d10, $d10, $d11, 0D3fb55555555554e6;
	mul_f64	$d7, $d6, $d7;
	neg_f64	$d7, $d7;
	fma_f64	$d8, $d8, $d10, $d7;
	mul_f64	$d7, $d9, 0D3f80000000000000;
	shr_u64	$d9, $d5, 52;
	and_b64	$d5, $d5, 4503599627370495;
	or_b64	$d5, $d5, 4602678819172646912;
	sub_f64	$d5, $d5, $d7;
	cvt_u32_u64	$s5, $d9;
	fma_f64	$d7, $d5, 0D3fe0000000000000, $d7;
	div_f64	$d7, $d5, $d7;
	add_f64	$d5, $d6, $d8;
	mul_f64	$d6, $d7, $d7;
	add_u32	$s4, $s4, 4294967232;
	cvt_s64_s32	$d8, $s4;
	shl_u64	$d10, $d8, 4;
	ld_v2_readonly_align(16)_f64	($d8, $d9), [&__math64_LN_TBL][$d10];
	and_b32	$s4, $s5, 2047;
	add_u32	$s2, $s4, $s2;
	cvt_near_f64_s32	$d10, $s2;
	fma_f64	$d11, $d6, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d11, $d6, $d11, 0D3fb5555555555557;
	mul_f64	$d6, $d6, $d11;
	fma_f64	$d6, $d7, $d6, $d7;
	add_f64	$d6, $d9, $d6;
	fma_f64	$d7, $d10, 0D3fe62e42e0000000, $d8;
	fma_f64	$d6, $d10, 0D3e6efa39ef35793c, $d6;
	add_f64	$d6, $d7, $d6;
	cmov_b64	$d5, $c0, $d5, $d6;
	cvt_b1_u32	$c0, $s3;
	cmov_b64	$d5, $c0, 9218868437227405312, $d5;
	or_b32	$s0, $s1, $s0;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d5, $c0, 9221120237041090560, $d5;
	cmp_eq_b1_f64	$c0, $d4, 0D0000000000000000;
	cmov_b64	$d4, $c0, 18442240474082181120, $d5;
	sub_f64	$d2, $d4, $d2;
	cmp_eq_b1_f64	$c0, $d3, 0D0000000000000000;
	cmov_b64	$d2, $c0, 9218868437227405312, $d2;

@BB0_15:
	// %_Z6lgammad.exit
	class_b1_f64	$c0, $d2, 3;
	cvt_u32_b1	$s0, $c0;
	and_b32	$s0, $s0, 1;
	mul_f64	$d3, $d2, 0D40571547652b82fe;
	cvt_s32_f64	$s1, $d3;
	cvt_near_f64_s32	$d3, $s1;
	fma_f64	$d4, 0Dbf862e42fefa0000, $d3, $d2;
	fma_f64	$d3, 0Dbd1cf79abc9e3b39, $d3, $d4;
	fma_f64	$d4, $d3, 0D3f56c16c16c16c17, 0D3f81111111111111;
	fma_f64	$d4, $d3, $d4, 0D3fa5555555555555;
	fma_f64	$d4, $d3, $d4, 0D3fc5555555555555;
	fma_f64	$d4, $d3, $d4, 0D3fe0000000000000;
	and_b32	$s2, $s1, 63;
	fma_f64	$d4, $d3, $d4, 0D3ff0000000000000;
	cvt_u64_u32	$d5, $s2;
	mul_f64	$d3, $d3, $d4;
	shl_u64	$d6, $d5, 4;
	ld_v2_readonly_align(16)_f64	($d4, $d5), [&__math64_TWO_TO_JBY64_EP][$d6];
	add_f64	$d6, $d4, $d5;
	fma_f64	$d3, $d6, $d3, $d5;
	add_f64	$d3, $d3, $d4;
	mul_f64	$d4, $d3, 0D4340000000000000;
	mov_b64	$d5, $d4;
	shr_u64	$d4, $d5, 52;
	cvt_u32_u64	$s2, $d4;
	and_b32	$s2, $s2, 2047;
	add_u32	$s2, $s2, 4294967243;
	mov_b64	$d4, $d3;
	shr_u64	$d6, $d4, 52;
	cvt_u32_u64	$s3, $d6;
	and_b32	$s3, $s3, 2047;
	cmp_eq_b1_s32	$c0, $s3, 0;
	cmov_b32	$s5, $c0, $s2, $s3;
	cmov_b64	$d5, $c0, $d5, $d4;
	shr_s32	$s2, $s1, 6;
	cmp_eq_b1_s32	$c0, $s2, -1022;
	cmp_lt_b1_f64	$c1, $d3, 0D3ff0000000000000;
	and_b1	$c0, $c0, $c1;
	cmp_eq_b1_s32	$c1, $s2, 0;
	cmp_eq_b1_f64	$c2, $d3, 0D0000000000000000;
	or_b1	$c1, $c1, $c2;
	class_b1_f64	$c2, $d3, 516;
	cvt_u32_b1	$s3, $c2;
	and_b32	$s3, $s3, 1;
	cvt_u32_b1	$s4, $c1;
	cmp_lt_b1_s32	$c1, $s2, -1022;
	or_b1	$c0, $c1, $c0;
	and_b64	$d5, $d5, 9227875636482146303;
	add_u32	$s5, $s5, $s2;
	max_s32	$s5, $s5, -2047;
	min_s32	$s5, $s5, 2047;
	cvt_u64_u32	$d6, $s5;
	shl_u64	$d6, $d6, 52;
	or_b64	$d6, $d5, $d6;
	add_u32	$s6, $s5, 53;
	cvt_u64_u32	$d7, $s6;
	shl_u64	$d7, $d7, 52;
	or_b64	$d5, $d5, $d7;
	mul_f64	$d5, $d5, 0D3ca0000000000000;
	cmp_gt_b1_s32	$c1, $s5, 0;
	cmov_b64	$d5, $c1, $d6, $d5;
	and_b64	$d4, $d4, 9223372036854775808;
	or_b64	$d6, $d4, 9218868437227405312;
	cmp_eq_b1_s32	$c1, $s5, 2047;
	cmov_b64	$d5, $c1, $d6, $d5;
	cmp_lt_b1_s32	$c1, $s5, -53;
	cmov_b64	$d4, $c1, $d4, $d5;
	or_b32	$s3, $s4, $s3;
	cmp_ne_b1_s32	$c1, $s3, 0;
	cmov_b64	$d4, $c1, $d3, $d4;
	shr_s32	$s1, $s1, 8;
	sub_u32	$s3, 1023, $s1;
	add_u32	$s2, $s3, $s2;
	cvt_u64_u32	$d5, $s2;
	shl_u64	$d5, $d5, 52;
	add_u32	$s1, $s1, 1023;
	cvt_u64_u32	$d6, $s1;
	shl_u64	$d6, $d6, 52;
	mul_f64	$d3, $d6, $d3;
	mul_f64	$d3, $d5, $d3;
	cmov_b64	$d3, $c0, $d3, $d4;
	cvt_b1_u32	$c0, $s0;
	cmov_b64	$d3, $c0, $d2, $d3;
	cmp_gt_b1_f64	$c0, $d2, 0D40862e42fefa39ef;
	cmov_b64	$d3, $c0, 9218868437227405312, $d3;
	cmp_lt_b1_f64	$c0, $d2, 0Dc0874910d52d3051;
	cmov_b64	$d2, $c0, 0, $d3;
	cmp_geu_b1_f64	$c0, $d1, 0D0000000000000000;
	cbr_b1	$c0, @BB0_17;
	// BB#16:
	and_b64	$d3, $d1, 9223372036854775808;
	xor_b64	$d5, $d3, $d1;
	mov_b64	$d1, $d5;
	cvt_s64_f64	$d4, $d1;
	cvt_near_f64_s64	$d6, $d4;
	sub_f64	$d6, $d1, $d6;
	sub_f64	$d7, 0D3ff0000000000000, $d6;
	add_f64	$d8, $d6, 0Dbfe0000000000000;
	cmp_le_b1_f64	$c0, $d6, 0D3fe8000000000000;
	cmov_b64	$d7, $c0, $d8, $d7;
	sub_f64	$d8, 0D3fe0000000000000, $d6;
	cmp_lt_b1_f64	$c1, $d6, 0D3fe0000000000000;
	cmov_b64	$d7, $c1, $d8, $d7;
	cmp_le_b1_f64	$c1, $d6, 0D3fd0000000000000;
	cmov_b64	$d7, $c1, $d6, $d7;
	cmp_gtu_b1_f64	$c1, $d6, 0D3fd0000000000000;
	and_b1	$c0, $c0, $c1;
	cmp_lt_b1_s64	$c1, $d5, 9218868437227405312;
	cmov_b64	$d5, $c1, $d3, 9221120237041090560;
	mul_f64	$d6, $d7, 0D400921fb54442d18;
	mul_f64	$d7, $d6, $d6;
	mul_f64	$d9, $d7, 0D3fe0000000000000;
	sub_f64	$d8, 0D3ff0000000000000, $d9;
	sub_f64	$d10, 0D3ff0000000000000, $d8;
	sub_f64	$d9, $d10, $d9;
	fma_f64	$d10, 0Dbda907db46cc5e42, $d7, 0D3e21eeb69037ab78;
	fma_f64	$d10, $d10, $d7, 0Dbe927e4fa17f65f6;
	fma_f64	$d10, $d10, $d7, 0D3efa01a019f4ec90;
	fma_f64	$d10, $d10, $d7, 0Dbf56c16c16c16967;
	fma_f64	$d10, $d10, $d7, 0D3fa5555555555555;
	mul_f64	$d11, $d7, $d7;
	fma_f64	$d9, $d10, $d11, $d9;
	fma_f64	$d10, 0D3de5e0b2f9a43bb8, $d7, 0Dbe5ae600b42fdfa7;
	fma_f64	$d10, $d10, $d7, 0D3ec71de3796cde01;
	fma_f64	$d10, $d10, $d7, 0Dbf2a01a019e83e5c;
	add_f64	$d8, $d8, $d9;
	fma_f64	$d9, $d10, $d7, 0D3f81111111110bb3;
	mul_f64	$d10, $d6, $d7;
	neg_f64	$d10, $d10;
	mul_f64	$d9, $d9, $d10;
	mul_f64	$d7, $d7, $d9;
	fma_f64	$d7, $d10, 0Dbfc5555555555555, $d7;
	sub_f64	$d6, $d6, $d7;
	cmov_b64	$d6, $c0, $d8, $d6;
	shl_u64	$d4, $d4, 63;
	xor_b64	$d3, $d4, $d3;
	mov_b64	$d4, $d6;
	xor_b64	$d3, $d3, $d4;
	cmp_lt_b1_f64	$c0, $d1, 0D4330000000000000;
	cmov_b64	$d1, $c0, $d3, $d5;
	mul_f64	$d2, $d0, $d2;
	mov_b64	$d0, $d1;
	mul_f64	$d1, $d2, $d0;
	div_f64	$d1, 0D400921fb54442d18, $d1;
	cmp_eq_b1_f64	$c0, $d1, 0D0000000000000000;
	cmov_b64	$d1, $c0, 9218868437227405312, $d1;
	cmp_eq_b1_f64	$c0, $d0, 0D0000000000000000;
	cmov_b64	$d2, $c0, 9221120237041090560, $d1;

@BB0_17:
	st_arg_align(8)_f64	$d2, [%_gcc_tgamma];
	ret;
};


decl function &_gcc_ceil(arg_f64 %ret)(arg_f64 %x);


function &_gcc_ceil(arg_f64 %_gcc_ceil)(arg_f64 %x)
{

@_gcc_ceil_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	ceil_f64	$d0, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_ceil];
	ret;
};


decl function &_gcc_log2(arg_f64 %ret)(arg_f64 %x);


function &_gcc_log2(arg_f64 %_gcc_log2)(arg_f64 %x)
{

@_gcc_log2_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	mov_b64	$d1, $d0;
	or_b64	$d2, $d1, 274719577269600256;
	add_f64	$d2, $d2, 0D83d0000000000000;
	cmp_lt_b1_u64	$c0, $d1, 4503599627370496;
	cmov_b64	$d1, $c0, $d2, $d1;
	cmov_b32	$s3, $c0, 4294966213, 4294966273;
	cmp_le_b1_f64	$c0, $d0, 0D3ff1082c00000000;
	cmp_ge_b1_f64	$c1, $d0, 0D3fee0faa00000000;
	and_b1	$c0, $c1, $c0;
	cmp_lt_b1_f64	$c1, $d0, 0D0000000000000000;
	cvt_u32_b1	$s0, $c1;
	class_b1_f64	$c1, $d0, 3;
	cvt_u32_b1	$s1, $c1;
	and_b32	$s1, $s1, 1;
	class_b1_f64	$c1, $d0, 516;
	cvt_u32_b1	$s2, $c1;
	and_b32	$s2, $s2, 1;
	shr_s64	$d2, $d1, 45;
	add_f64	$d3, $d0, 0Dbff0000000000000;
	cvt_u32_u64	$s5, $d2;
	add_f64	$d2, $d3, 0D4000000000000000;
	and_b32	$s4, $s5, 1;
	bitextract_u32	$s5, $s5, 1, 6;
	div_f64	$d4, $d3, $d2;
	or_b32	$s5, $s5, 64;
	add_f64	$d8, $d4, $d4;
	add_u32	$s4, $s5, $s4;
	mul_f64	$d6, $d8, $d8;
	mov_b64	$d2, $d3;
	and_b64	$d2, $d2, 18446744069414584320;
	sub_f64	$d7, $d3, $d2;
	cvt_near_f64_s32	$d5, $s4;
	mul_f64	$d8, $d8, $d6;
	fma_f64	$d9, $d6, 0D3f3c8034c85dfff0, 0D3f62492307f1519f;
	fma_f64	$d9, $d6, $d9, 0D3f89999999bac6d4;
	fma_f64	$d6, $d6, $d9, 0D3fb55555555554e6;
	mul_f64	$d3, $d3, $d4;
	neg_f64	$d3, $d3;
	fma_f64	$d3, $d8, $d6, $d3;
	add_f64	$d4, $d7, $d3;
	mul_f64	$d3, $d4, 0D3ecb295c17f0bbbe;
	fma_f64	$d6, 0D3ecb295c17f0bbbe, $d2, $d3;
	mul_f64	$d3, $d5, 0D3f80000000000000;
	and_b64	$d5, $d1, 4503599627370495;
	or_b64	$d5, $d5, 4602678819172646912;
	mov_b64	$d7, $d5;
	shr_u64	$d5, $d1, 52;
	sub_f64	$d1, $d7, $d3;
	fma_f64	$d3, $d1, 0D3fe0000000000000, $d3;
	div_f64	$d1, $d1, $d3;
	mul_f64	$d3, $d1, $d1;
	fma_f64	$d4, 0D3ff7154400000000, $d4, $d6;
	add_u32	$s4, $s4, 4294967232;
	cvt_s64_s32	$d6, $s4;
	shl_u64	$d6, $d6, 4;
	cvt_u32_u64	$s4, $d5;
	fma_f64	$d2, 0D3ff7154400000000, $d2, $d4;
	ld_v2_readonly_align(16)_f64	($d4, $d5), [&__math64_LN_TBL][$d6];
	and_b32	$s4, $s4, 2047;
	add_u32	$s3, $s3, $s4;
	cvt_near_f64_s32	$d6, $s3;
	fma_f64	$d7, $d3, 0D3f6249423bd94741, 0D3f89999999865ede;
	fma_f64	$d7, $d3, $d7, 0D3fb5555555555557;
	mul_f64	$d3, $d3, $d7;
	fma_f64	$d1, $d1, $d3, $d1;
	add_f64	$d1, $d5, $d1;
	fma_f64	$d3, 0D3ff7154400000000, $d4, $d6;
	mul_f64	$d5, $d1, 0D3ecb295c17f0bbbe;
	fma_f64	$d4, 0D3ecb295c17f0bbbe, $d4, $d5;
	fma_f64	$d1, 0D3ff7154400000000, $d1, $d4;
	add_f64	$d1, $d3, $d1;
	cmov_b64	$d1, $c0, $d2, $d1;
	cvt_b1_u32	$c0, $s2;
	cmov_b64	$d1, $c0, 9218868437227405312, $d1;
	or_b32	$s0, $s1, $s0;
	cmp_ne_b1_s32	$c0, $s0, 0;
	cmov_b64	$d1, $c0, 9221120237041090560, $d1;
	cmp_eq_b1_f64	$c0, $d0, 0D0000000000000000;
	cmov_b64	$d0, $c0, 18442240474082181120, $d1;
	st_arg_align(8)_f64	$d0, [%_gcc_log2];
	ret;
};


decl function &_gcc_rint(arg_f64 %ret)(arg_f64 %x);


function &_gcc_rint(arg_f64 %_gcc_rint)(arg_f64 %x)
{

@_gcc_rint_entry:
	// BB#0:
	ld_arg_align(8)_f64	$d0, [%x];
	rint_f64	$d0, $d0;
	st_arg_align(8)_f64	$d0, [%_gcc_rint];
	ret;
};

